openapi: 3.0.0
info:
  title: Kong CE Admin API V2.0
  description: >-
    <img
    src="https://2tjosk2rxzc21medji3nfn1g-wpengine.netdna-ssl.com/wp-content/themes/konghq/assets/img/gradient-logo.svg"
    alt="Kong Community Edition Admin API" title="Kong Community Edition Admin
    API" />

    <br>


    This Postman Collection refers to the [Kong Community Edition Admin
    API](https://docs.konghq.com/2.0.x/admin-api/) for running Kong configured
    with a database (Postgres or Cassandra). For using the Admin API for Kong in
    DB-less mode, please refer to the Admin API for DB-less Mode
    [konghq](https://docs.konghq.com/2.0.x/db-less-admin-api/).<br>


    **Disclaimer**: Collection not hardened by development AToW [George
    Jeffcock](https://www.linkedin.com/in/georgejeffcock/)


    Kong comes with an internal RESTful Admin API for administration purposes.
    Requests to the Admin API can be sent to any node in the cluster, and Kong
    will keep the configuration consistent across all nodes.


    * **8001** is the default port on which the Admin API listens.

    * **8444** is the default port for HTTPS traffic to the Admin API.


    This API is designed for internal use and provides full control over Kong,
    so care should be taken when setting up Kong environments to avoid undue
    public exposure of this API. See this
    [document](https://docs.konghq.com/2.0.x/secure-admin-api/) for a discussion
    of methods to secure the Admin API.


    # Supported Content Types

    * The Admin API accepts 2 content types on every endpoint:

    * application/x-www-form-urlencoded
     * Simple enough for basic request bodies, you will probably use it most of the time. Note that when sending nested values, Kong expects nested objects to be referenced with dotted keys
     * Example: config.limit=10&config.period=seconds
    * application/json
     * Handy for complex bodies (ex: complex plugin configuration), in that case simply send a JSON representation of the data you want to send.
     * Example:
     {"config": {"limit": 10, "period": "seconds"}}
  version: 1.0.0
servers:
  - url: http://{{gateway}}
  - url: http://{{gateway}}ca_
  - url: http://localhost:8001
tags:
  - name: 'Information Routes '
    description: https://docs.konghq.com/2.0.x/admin-api/#information-routes
  - name: Health Routes
    description: https://docs.konghq.com/2.0.x/admin-api/#health-routes
  - name: Tags
    description: >-
      https://docs.konghq.com/2.0.x/admin-api/#tags


      * Tags are strings associated to entities in Kong. Each tag must be
      composed of one or more alphanumeric characters, _, -, . or ~.

      * Most core entities can be tagged via their tags attribute, upon creation
      or edition.

      * Tags can be used to filter core entities as well, via the ?tags query
      string parameter.
       * For example: if you normally get a list of all the Services by doing:
      <br><table><tr><th>GET /services</th></tr></table>
       * You can get the list of all the Services tagged example by doing:
      <br><table><tr><th>GET /services?tags=example</th></tr></table>
       * Similarly, if you want to filter Services so that you only get the ones tagged example and admin, you can do that like so:
      <br><table><tr><th>GET /services?tags=example,admin</th></tr></table>
       * Finally, if you wanted to filter the Services tagged example or admin, you could use:
      <br><table><tr><th>GET /services?tags=example/admin</th></tr></table>

      * Some notes:
       * A maximum of 5 tags can be queried simultaneously in a single request with , or /
      Mixing operators is not supported: if you try to mix , with / in the same
      querystring, you will receive an error.
       * You may need to quote and/or escape some characters when using them from the command line.
       * Filtering by tags is not supported in foreign key relationship endpoints. For example, the tags parameter will be ignored in a request such as
      <br><table><tr><th>GET /services/foo/routes?tags=a,b</th></tr></table>
       * offset parameters are not guaranteed to work if the tags parameter is altered or removed
  - name: Service Object
    description: >-
      https://docs.konghq.com/2.0.x/admin-api/#service-object


      * Service entities, as the name implies, are abstractions of each of your
      own upstream services. Examples of Services would be a data transformation
      microservice, a billing API, etc.


      * The main attribute of a Service is its URL (where Kong should proxy
      traffic to), which can be set as a single string or by specifying its
      protocol, host, port and path individually.


      * Services are associated to Routes (a Service can have many Routes
      associated with it). Routes are entry-points in Kong and define rules to
      match client requests. Once a Route is matched, Kong proxies the request
      to its associated Service. See the Proxy Reference for a detailed
      explanation of how Kong proxies traffic.


      * Services can be both tagged and filtered by
      [tags](https://docs.konghq.com/2.0.x/admin-api/#tags)
  - name: Service Object > Add Service
    description: https://docs.konghq.com/2.0.x/admin-api/#add-service
  - name: Service Object > List Services
    description: https://docs.konghq.com/2.0.x/admin-api/#list-services
  - name: Service Object > Retrieve Service
    description: https://docs.konghq.com/2.0.x/admin-api/#retrieve-service
  - name: Service Object > Update Service
    description: https://docs.konghq.com/2.0.x/admin-api/#update-service
  - name: Service Object > Upsert Service
    description: https://docs.konghq.com/2.0.x/admin-api/#update-or-create-service
  - name: Service Object > Delete Service
    description: https://docs.konghq.com/2.0.x/admin-api/#delete-service
  - name: Consumer Object
    description: >
      https://docs.konghq.com/2.0.x/admin-api/#consumer-object


      * The Consumer object represents a consumer - or a user - of a Service.
      You can either rely on Kong as the primary datastore, or you can map the
      consumer list with your database to keep consistency between Kong and your
      existing primary datastore.


      * Consumers can be both tagged and filtered by tags.


      {
          "id": "ec1a1f6f-2aa4-4e58-93ff-b56368f19b27",
          "created_at": 1422386534,
          "username": "my-username",
          "custom_id": "my-custom-id",
          "tags": ["user-level", "low-priority"]
      }
  - name: Consumer Object > Add Consumer
    description: https://docs.konghq.com/2.0.x/admin-api/#add-consumer
  - name: Consumer Object > List Consumers
    description: https://docs.konghq.com/2.0.x/admin-api/#list-consumers
  - name: Consumer Object > Retrieve Consumer
    description: https://docs.konghq.com/2.0.x/admin-api/#retrieve-consumer
  - name: Consumer Object > Update Consumer
    description: https://docs.konghq.com/2.0.x/admin-api/#update-consumer
  - name: Consumer Object > Update Or Create Consumer
    description: https://docs.konghq.com/2.0.x/admin-api/#update-or-create-consumer
  - name: Consumer Object > Delete Consumer
    description: https://docs.konghq.com/2.0.x/admin-api/#delete-consumer
  - name: Route Object
    description: >-
      https://docs.konghq.com/2.0.x/admin-api/#route-object


      Route entities define rules to match client requests. Each Route is
      associated with a Service, and a Service may have multiple Routes
      associated to it. Every request matching a given Route will be proxied to
      its associated Service.


      The combination of Routes and Services (and the separation of concerns
      between them) offers a powerful routing mechanism with which it is
      possible to define fine-grained entry-points in Kong leading to different
      upstream services of your infrastructure.


      You need at least one matching rule that applies to the protocol being
      matched by the Route. Depending on the protocols configured to be matched
      by the Route (as defined with the protocols field), this means that at
      least one of the following attributes must be set:


      * For http, at least one of methods, hosts, headers or paths;

      * For https, at least one of methods, hosts, headers, paths or snis;

      * For tcp, at least one of sources or destinations;

      * For tls, at least one of sources, destinations or snis;

      * For grpc, at least one of hosts, headers or paths;

      * For grpcs, at least one of hosts, headers, paths or snis.
       
      ## Path handling algorithms 
      https://docs.konghq.com/2.0.x/admin-api/#path-handling-algorithms

      "v0" is the behavior used in Kong 0.x and 2.x. It treats service.path,
      route.path and request path as segments of a url. It will always join them
      via slashes. Given a service path /s, route path /r and request path /re,
      the concatenated path will be /s/re. If the resulting path is a single
      slash, no further transformation is done to it. If it’s longer, then the
      trailing slash is removed.


      "v1" is the behavior used in Kong 1.x. It treats service.path as a prefix,
      and ignores the initial slashes of the request and route paths. Given
      service path /s, route path /r and request path /re, the concatenated path
      will be /sre.


      Both versions of the algorithm detect “double slashes” when combining
      paths, replacing them by single slashes.
  - name: Route Object > Add Route
    description: https://docs.konghq.com/2.0.x/admin-api/#add-route
  - name: Route Object > List Routes
    description: https://docs.konghq.com/2.0.x/admin-api/#list-routes
  - name: Route Object > Retrieve Route
    description: https://docs.konghq.com/2.0.x/admin-api/#retrieve-route
  - name: Route Object > Update Route
    description: https://docs.konghq.com/2.0.x/admin-api/#update-route
  - name: Route Object > Update Or Create Route
    description: https://docs.konghq.com/2.0.x/admin-api/#update-or-create-route
  - name: Route Object > Delete Route
    description: https://docs.konghq.com/2.0.x/admin-api/#delete-route
  - name: Plugin Object
    description: "https://docs.konghq.com/2.0.x/admin-api/#plugin-object\n\n* A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the Kong Hub.\n\n* When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the service and consumer fields.\n\n* Plugins can be both tagged and filtered by tags.\n\n{\n    \"id\": \"ce44eef5-41ed-47f6-baab-f725cecf98c7\",\n    \"name\": \"rate-limiting\",\n    \"created_at\": 1422386534,\n    \"route\": null,\n    \"service\": null,\n    \"consumer\": null,\n    \"config\": {\"hour\":500, \"minute\":20},\n    \"protocols\": [\"http\", \"https\"],\n    \"enabled\": true,\n    \"tags\": [\"user-level\", \"low-priority\"]\n}\n\n# Precedence\n\n* A plugin will always be run once and only once per request. But the configuration with which it will run depends on the entities it has been configured for.\n\n* Plugins can be configured for various entities, combination of entities, or even globally. This is useful, for example, when you wish to configure a plugin a certain way for most requests, but make authenticated requests behave slightly differently.\n\n* Therefore, there exists an order of precedence for running a plugin when it has been applied to different entities with different configurations. The rule of thumb is: the more specific a plugin is with regards to how many entities it has been configured on, the higher its priority.\n\n* The complete order of precedence when a plugin has been configured multiple times is:\n\n\t* Plugins configured on a combination of: a Route, a Service, and a Consumer. (Consumer means the request must be authenticated).\n\t* Plugins configured on a combination of a Route and a Consumer. (Consumer means the request must be authenticated).\n\t* Plugins configured on a combination of a Service and a Consumer. (Consumer means the request must be authenticated).\n\t* Plugins configured on a combination of a Route and a Service.\n\t*Plugins configured on a Consumer. (Consumer means the request must be authenticated).\n\t* Plugins configured on a Route.\n\t* Plugins configured on a Service.\n\t* Plugins configured to run globally.\n\n* Example: if the rate-limiting plugin is applied twice (with different configurations): for a Service (Plugin config A), and for a Consumer (Plugin config B), then requests authenticating this Consumer will run Plugin config B and ignore A. However, requests that do not authenticate this Consumer will fallback to running Plugin config A. Note that if config B is disabled (its enabled flag is set to false), config A will apply to requests that would have otherwise matched config B."
  - name: Plugin Object > Add Plugin
    description: https://docs.konghq.com/2.0.x/admin-api/#add-plugin
  - name: Plugin Object > List Plugins
    description: https://docs.konghq.com/2.0.x/admin-api/#list-plugins
  - name: Plugin Object > Retrieve Plugin
  - name: Plugin Object > Update Plugin
    description: https://docs.konghq.com/2.0.x/admin-api/#update-plugin
  - name: Plugin Object > Update or Create Plugin
    description: >-
      https://docs.konghq.com/2.0.x/admin-api/#update-or-create-plugin


      * Inserts (or replaces) the Plugin under the requested resource with the
      definition specified in the body. The Plugin will be identified via the
      name or id attribute.


      * When the name or id attribute has the structure of a UUID, the Plugin
      being inserted/replaced will be identified by its id. Otherwise it will be
      identified by its name.


      * When creating a new Plugin without specifying id (neither in the URL nor
      in the body), then it will be auto-generated.


      * Notice that specifying a name in the URL and a different one in the
      request body is not allowed.
  - name: Plugin Object > Delete Plugin
    description: https://docs.konghq.com/2.0.x/admin-api/#delete-plugin
  - name: Certificate Object
    description: >-
      https://docs.konghq.com/2.0.x/admin-api/#certificate-object


      A certificate object represents a public certificate, and can be
      optionally paired with the corresponding private key. These objects are
      used by Kong to handle SSL/TLS termination for encrypted requests, or for
      use as a trusted CA store when validating peer certificate of
      client/service. Certificates are optionally associated with SNI objects to
      tie a cert/key pair to one or more hostnames.


      If intermediate certificates are required in addition to the main
      certificate, they should be concatenated together into one string
      according to the following order: main certificate on the top, followed by
      any intermediates.


      Certificates can be both tagged and filtered by tags.


      {
          "id": "7fca84d6-7d37-4a74-a7b0-93e576089a41",
          "created_at": 1422386534,
          "cert": "-----BEGIN CERTIFICATE-----...",
          "key": "-----BEGIN RSA PRIVATE KEY-----...",
          "tags": ["user-level", "low-priority"]
      }
  - name: Certificate Object > Add Certificate
    description: https://docs.konghq.com/2.0.x/admin-api/#add-certificate
  - name: Certificate Object > List Certificates
    description: https://docs.konghq.com/2.0.x/admin-api/#list-certificates
  - name: Certificate Object > Retrieve Certificate
    description: https://docs.konghq.com/2.0.x/admin-api/#retrieve-certificate
  - name: Certificate Object > Update Certificate
    description: https://docs.konghq.com/2.0.x/admin-api/#update-certificate
  - name: Certificate Object > Update Or Create Certificate
    description: https://docs.konghq.com/2.0.x/admin-api/#update-or-create-certificate
  - name: Certificate Object > Delete Certificate
    description: https://docs.konghq.com/2.0.x/admin-api/#delete-certificate
  - name: CA Certificate Object
    description: >-
      https://docs.konghq.com/2.0.x/admin-api/#ca-certificate-object


      * A CA certificate object represents a trusted CA. These objects are used
      by Kong to verify the validity of a client or server certificate.


      * CA Certificates can be both tagged and filtered by tags.


      {
          "id": "04fbeacf-a9f1-4a5d-ae4a-b0407445db3f",
          "created_at": 1422386534,
          "cert": "-----BEGIN CERTIFICATE-----...",
          "tags": ["user-level", "low-priority"]
      }
  - name: CA Certificate Object > Add CA Certificate
    description: https://docs.konghq.com/2.0.x/admin-api/#add-ca-certificate
  - name: CA Certificate Object > List CA Certificates
    description: https://docs.konghq.com/2.0.x/admin-api/#list-ca-certificates
  - name: CA Certificate Object > Retrieve CA Certificate
    description: https://docs.konghq.com/2.0.x/admin-api/#retrieve-ca-certificate
  - name: CA Certificate Object > Update CA Certificate
    description: https://docs.konghq.com/2.0.x/admin-api/#update-ca-certificate
  - name: CA Certificate Object > Update Or Create CA Certificate
    description: https://docs.konghq.com/2.0.x/admin-api/#update-or-create-ca-certificate
  - name: CA Certificate Object > Delete CA Certificate
    description: https://docs.konghq.com/2.0.x/admin-api/#delete-ca-certificate
  - name: SNI Object
    description: >-
      https://docs.konghq.com/2.0.x/admin-api/#sni-object


      An SNI object represents a many-to-one mapping of hostnames to a
      certificate. That is, a certificate object can have many hostnames
      associated with it; when Kong receives an SSL request, it uses the SNI
      field in the Client Hello to lookup the certificate object based on the
      SNI associated with the certificate.


      SNIs can be both tagged and filtered by tags.


      {
          "id": "91020192-062d-416f-a275-9addeeaffaf2",
          "name": "my-sni",
          "created_at": 1422386534,
          "tags": ["user-level", "low-priority"],
          "certificate": {"id":"a2e013e8-7623-4494-a347-6d29108ff68b"}
      }
  - name: SNI Object > Add SNI
    description: https://docs.konghq.com/2.0.x/admin-api/#add-sni
  - name: SNI Object > List SNIs
    description: https://docs.konghq.com/2.0.x/admin-api/#list-snis
  - name: SNI Object > Retrieve SNI
    description: https://docs.konghq.com/2.0.x/admin-api/#retrieve-sni
  - name: SNI Object > Update SNI
    description: https://docs.konghq.com/2.0.x/admin-api/#update-sni
  - name: SNI Object > Update Or Create SNI
    description: https://docs.konghq.com/2.0.x/admin-api/#update-or-create-sni
  - name: SNI Object > Retrieve SNI Copy
    description: https://docs.konghq.com/2.0.x/admin-api/#retrieve-sni
  - name: Upstream Object
    description: >-
      https://docs.konghq.com/2.0.x/admin-api/#upstream-object


      * The upstream object represents a virtual hostname and can be used to
      loadbalance incoming requests over multiple services (targets). So for
      example an upstream named service.v1.xyz for a Service object whose host
      is service.v1.xyz. Requests for this Service would be proxied to the
      targets defined within the upstream.


      * An upstream also includes a health checker, which is able to enable and
      disable targets based on their ability or inability to serve requests. The
      configuration for the health checker is stored in the upstream object, and
      applies to all of its targets.


      * Upstreams can be both tagged and filtered by tags.



      {
          "id": "58c8ccbb-eafb-4566-991f-2ed4f678fa70",
          "created_at": 1422386534,
          "name": "my-upstream",
          "algorithm": "round-robin",
          "hash_on": "none",
          "hash_fallback": "none",
          "hash_on_cookie_path": "/",
          "slots": 10000,
          "healthchecks": {
              "active": {
                  "https_verify_certificate": true,
                  "unhealthy": {
                      "http_statuses": [429, 404, 500, 501, 502, 503, 504, 505],
                      "tcp_failures": 0,
                      "timeouts": 0,
                      "http_failures": 0,
                      "interval": 0
                  },
                  "http_path": "/",
                  "timeout": 1,
                  "healthy": {
                      "http_statuses": [200, 302],
                      "interval": 0,
                      "successes": 0
                  },
                  "https_sni": "example.com",
                  "concurrency": 10,
                  "type": "http"
              },
              "passive": {
                  "unhealthy": {
                      "http_failures": 0,
                      "http_statuses": [429, 500, 503],
                      "tcp_failures": 0,
                      "timeouts": 0
                  },
                  "type": "http",
                  "healthy": {
                      "successes": 0,
                      "http_statuses": [200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]
                  }
              },
              "threshold": 0
          },
          "tags": ["user-level", "low-priority"],
          "host_header": "example.com"
      }
  - name: Upstream Object > Add Upstream
    description: https://docs.konghq.com/2.0.x/admin-api/#add-upstream
  - name: Upstream Object > List All Upstreams
    description: https://docs.konghq.com/2.0.x/admin-api/#list-upstreams
  - name: Upstream Object > Retrieve Upstream
    description: https://docs.konghq.com/2.0.x/admin-api/#retrieve-upstream
  - name: Upstream Object > Update Upstream
    description: https://docs.konghq.com/2.0.x/admin-api/#update-upstream
  - name: Upstream Object > Update Or Create Upstream
    description: https://docs.konghq.com/2.0.x/admin-api/#update-or-create-upstream
  - name: Upstream Object > Delete Upstream
    description: https://docs.konghq.com/2.0.x/admin-api/#delete-upstream
  - name: Upstream Object > Show Upstream Health for Node
    description: "https://docs.konghq.com/2.0.x/admin-api/#list-upstreams\n\n* Displays the health status for all Targets of a given Upstream, or for the whole Upstream, according to the perspective of a specific Kong node. Note that, being node-specific information, making this same request to different nodes of the Kong cluster may produce different results. For example, one specific node of the Kong cluster may be experiencing network issues, causing it to fail to connect to some Targets: these Targets will be marked as unhealthy by that node (directing traffic from this node to other Targets that it can successfully reach), but healthy to all others Kong nodes (which have no problems using that Target).\n\n* The data field of the response contains an array of Target objects. The health for each Target is returned in its health field:\n\n\t* If a Target fails to be activated in the balancer due to DNS issues, its status displays as DNS_ERROR.\n\t* When health checks are not enabled in the Upstream configuration, the health status for active Targets is displayed as HEALTHCHECKS_OFF.\n\t* When health checks are enabled and the Target is determined to be healthy, either automatically or manually, its status is displayed as HEALTHY. This means that this Target is currently included in this Upstream’s load balancer execution.\n\n* When a Target has been disabled by either active or passive health checks (circuit breakers) or manually, its status is displayed as UNHEALTHY. The load balancer is not directing any traffic to this Target via this Upstream.\nWhen the request query parameter balancer_health is set to 1, the data field of the response refers to the whole Upstream, and its health attribute is defined by the state of all of Upstream’s Targets, according to the field [health checker’s threshold][healthchecks.threshold]."
  - name: Target Object
    description: >
      https://docs.konghq.com/2.0.x/admin-api/#target-object


      * A target is an ip address/hostname with a port that identifies an
      instance of a backend service. Every upstream can have many targets, and
      the targets can be dynamically added. Changes are effectuated on the fly.


      * Because the upstream maintains a history of target changes, the targets
      cannot be deleted or modified. To disable a target, post a new one with
      weight=0; alternatively, use the DELETE convenience method to accomplish
      the same.


      * The current target object definition is the one with the latest
      created_at.


      * Targets can be both tagged and filtered by tags.


      {
          "id": "a3395f66-2af6-4c79-bea2-1b6933764f80",
          "created_at": 1422386534,
          "upstream": {"id":"885a0392-ef1b-4de3-aacf-af3f1697ce2c"},
          "target": "example.com:8000",
          "weight": 100,
          "tags": ["user-level", "low-priority"]
      }
  - name: Target Object > Add Target
    description: https://docs.konghq.com/2.0.x/admin-api/#add-target
  - name: Target Object > List Targets
    description: https://docs.konghq.com/2.0.x/admin-api/#list-targets
paths:
  /:
    get:
      tags:
        - 'Information Routes '
      summary: Retrieve Node Information
      description: >-
        ## Retieve generic details about a node
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-node-information)


        * node_id: A UUID representing the running Kong node. This UUID is
        randomly generated when Kong starts, so the node will have a different
        node_id each time it is restarted.

        * available_on_server: Names of plugins that are installed on the node.

        * nabled_in_cluster: Names of plugins that are enabled/configured. That
        is, the plugins configurations currently in the datastore shared by all
        Kong nodes.
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Fri, 06 Mar 2020 15:13:42 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '8664'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '1'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "plugins": {
                        "enabled_in_cluster": [],
                        "available_on_server": {
                            "correlation-id": true,
                            "pre-function": true,
                            "cors": true,
                            "ldap-auth": true,
                            "loggly": true,
                            "hmac-auth": true,
                            "zipkin": true,
                            "request-size-limiting": true,
                            "azure-functions": true,
                            "request-transformer": true,
                            "oauth2": true,
                            "response-transformer": true,
                            "ip-restriction": true,
                            "statsd": true,
                            "jwt": true,
                            "proxy-cache": true,
                            "basic-auth": true,
                            "key-auth": true,
                            "http-log": true,
                            "datadog": true,
                            "tcp-log": true,
                            "post-function": true,
                            "prometheus": true,
                            "acl": true,
                            "syslog": true,
                            "file-log": true,
                            "session": true,
                            "udp-log": true,
                            "response-ratelimiting": true,
                            "aws-lambda": true,
                            "bot-detection": true,
                            "rate-limiting": true,
                            "request-termination": true
                        }
                    },
                    "tagline": "Welcome to kong",
                    "configuration": {
                        "plugins": [
                            "bundled"
                        ],
                        "admin_listen": [
                            "0.0.0.0:8001",
                            "0.0.0.0:8444 ssl"
                        ],
                        "lua_ssl_verify_depth": 1,
                        "prefix": "/usr/local/kong",
                        "nginx_conf": "/usr/local/kong/nginx.conf",
                        "cassandra_username": "kong",
                        "nginx_events_directives": [
                            {
                                "value": "auto",
                                "name": "worker_connections"
                            },
                            {
                                "value": "on",
                                "name": "multi_accept"
                            }
                        ],
                        "admin_ssl_cert_key": "/usr/local/kong/ssl/admin-kong-default.key",
                        "dns_resolver": {},
                        "nginx_upstream_keepalive_requests": "100",
                        "nginx_http_upstream_directives": [
                            {
                                "value": "100",
                                "name": "keepalive_requests"
                            },
                            {
                                "value": "60s",
                                "name": "keepalive_timeout"
                            },
                            {
                                "value": "60",
                                "name": "keepalive"
                            }
                        ],
                        "nginx_main_daemon": "off",
                        "stream_proxy_ssl_enabled": false,
                        "nginx_acc_logs": "/usr/local/kong/logs/access.log",
                        "pg_semaphore_timeout": 60000,
                        "proxy_listen": [
                            "0.0.0.0:8000 reuseport backlog=16384",
                            "0.0.0.0:8443 http2 ssl reuseport backlog=16384"
                        ],
                        "client_ssl_cert_default": "/usr/local/kong/ssl/kong-default.crt",
                        "go_pluginserver_exe": "/usr/local/bin/go-pluginserver",
                        "dns_no_sync": false,
                        "db_update_propagation": 0,
                        "stream_listen": [
                            "off"
                        ],
                        "nginx_err_logs": "/usr/local/kong/logs/error.log",
                        "cassandra_port": 9042,
                        "headers": [
                            "server_tokens",
                            "latency_tokens"
                        ],
                        "nginx_http_client_max_body_size": "0",
                        "status_listen": [
                            "off"
                        ],
                        "nginx_status_directives": {},
                        "cluster_control_plane": "127.0.0.1:8005",
                        "nginx_http_ssl_prefer_server_ciphers": "off",
                        "pg_database": "kong",
                        "nginx_http_client_body_buffer_size": "8k",
                        "admin_acc_logs": "/usr/local/kong/logs/admin_access.log",
                        "cassandra_refresh_frequency": 60,
                        "nginx_pid": "/usr/local/kong/pids/nginx.pid",
                        "nginx_main_worker_rlimit_nofile": "auto",
                        "admin_access_log": "/dev/stdout",
                        "proxy_listeners": [
                            {
                                "listener": "0.0.0.0:8000 reuseport backlog=16384",
                                "proxy_protocol": false,
                                "reuseport": true,
                                "deferred": false,
                                "ssl": false,
                                "ip": "0.0.0.0",
                                "backlog=16384": true,
                                "http2": false,
                                "port": 8000,
                                "bind": false
                            },
                            {
                                "listener": "0.0.0.0:8443 ssl http2 reuseport backlog=16384",
                                "proxy_protocol": false,
                                "reuseport": true,
                                "deferred": false,
                                "ssl": true,
                                "ip": "0.0.0.0",
                                "backlog=16384": true,
                                "http2": true,
                                "port": 8443,
                                "bind": false
                            }
                        ],
                        "db_cache_warmup_entities": [
                            "services",
                            "plugins"
                        ],
                        "enabled_headers": {
                            "latency_tokens": true,
                            "X-Kong-Response-Latency": true,
                            "Server": true,
                            "X-Kong-Admin-Latency": true,
                            "X-Kong-Upstream-Status": false,
                            "Via": true,
                            "X-Kong-Proxy-Latency": true,
                            "server_tokens": true,
                            "X-Kong-Upstream-Latency": true
                        },
                        "nginx_http_ssl_protocols": "TLSv1.2 TLSv1.3",
                        "db_cache_ttl": 0,
                        "nginx_events_multi_accept": "on",
                        "admin_ssl_cert_default": "/usr/local/kong/ssl/admin-kong-default.crt",
                        "pg_ssl": false,
                        "status_access_log": "off",
                        "cluster_listeners": [
                            {
                                "listener": "0.0.0.0:8005",
                                "proxy_protocol": false,
                                "reuseport": false,
                                "backlog=%d+": false,
                                "deferred": false,
                                "ssl": false,
                                "ip": "0.0.0.0",
                                "port": 8005,
                                "http2": false,
                                "bind": false
                            }
                        ],
                        "kong_env": "/usr/local/kong/.kong_env",
                        "cassandra_schema_consensus_timeout": 10000,
                        "log_level": "notice",
                        "admin_ssl_cert_key_default": "/usr/local/kong/ssl/admin-kong-default.key",
                        "real_ip_recursive": "off",
                        "proxy_error_log": "/dev/stderr",
                        "ssl_cipher_suite": "intermediate",
                        "router_consistency": "strict",
                        "pg_port": 5432,
                        "cassandra_keyspace": "kong",
                        "ssl_cert_default": "/usr/local/kong/ssl/kong-default.crt",
                        "nginx_http_ssl_session_timeout": "1d",
                        "nginx_upstream_directives": [
                            {
                                "value": "100",
                                "name": "keepalive_requests"
                            },
                            {
                                "value": "60s",
                                "name": "keepalive_timeout"
                            },
                            {
                                "value": "60",
                                "name": "keepalive"
                            }
                        ],
                        "role": "traditional",
                        "admin_ssl_enabled": true,
                        "trusted_ips": {},
                        "loaded_plugins": {
                            "correlation-id": true,
                            "pre-function": true,
                            "cors": true,
                            "rate-limiting": true,
                            "loggly": true,
                            "hmac-auth": true,
                            "zipkin": true,
                            "bot-detection": true,
                            "azure-functions": true,
                            "request-transformer": true,
                            "oauth2": true,
                            "response-transformer": true,
                            "syslog": true,
                            "statsd": true,
                            "jwt": true,
                            "proxy-cache": true,
                            "basic-auth": true,
                            "key-auth": true,
                            "http-log": true,
                            "datadog": true,
                            "tcp-log": true,
                            "post-function": true,
                            "ldap-auth": true,
                            "acl": true,
                            "ip-restriction": true,
                            "file-log": true,
                            "prometheus": true,
                            "udp-log": true,
                            "response-ratelimiting": true,
                            "aws-lambda": true,
                            "request-size-limiting": true,
                            "session": true,
                            "request-termination": true
                        },
                        "nginx_supstream_directives": {},
                        "ssl_cert_key": "/usr/local/kong/ssl/kong-default.key",
                        "pg_user": "kong",
                        "pg_password": "******",
                        "cassandra_data_centers": [
                            "dc1:2",
                            "dc2:3"
                        ],
                        "nginx_admin_directives": {},
                        "nginx_upstream_keepalive_timeout": "60s",
                        "nginx_http_directives": [
                            {
                                "value": "0",
                                "name": "client_max_body_size"
                            },
                            {
                                "value": "off",
                                "name": "ssl_prefer_server_ciphers"
                            },
                            {
                                "value": "8k",
                                "name": "client_body_buffer_size"
                            },
                            {
                                "value": "TLSv1.2 TLSv1.3",
                                "name": "ssl_protocols"
                            },
                            {
                                "value": "on",
                                "name": "ssl_session_tickets"
                            },
                            {
                                "value": "1d",
                                "name": "ssl_session_timeout"
                            },
                            {
                                "value": "prometheus_metrics 5m",
                                "name": "lua_shared_dict"
                            }
                        ],
                        "pg_host": "kong-database",
                        "nginx_kong_stream_conf": "/usr/local/kong/nginx-kong-stream.conf",
                        "cassandra_ssl": false,
                        "go_plugins_dir": "off",
                        "cluster_listen": [
                            "0.0.0.0:8005"
                        ],
                        "dns_order": [
                            "LAST",
                            "SRV",
                            "A",
                            "CNAME"
                        ],
                        "dns_error_ttl": 1,
                        "nginx_sproxy_directives": {},
                        "nginx_http_upstream_keepalive_timeout": "60s",
                        "pg_timeout": 5000,
                        "nginx_http_upstream_keepalive_requests": "100",
                        "database": "postgres",
                        "nginx_upstream_keepalive": "60",
                        "nginx_worker_processes": "auto",
                        "nginx_http_status_directives": {},
                        "lua_package_path": "./?.lua;./?/init.lua;",
                        "router_update_frequency": 1,
                        "upstream_keepalive": 60,
                        "pg_max_concurrent_queries": 0,
                        "proxy_ssl_enabled": true,
                        "nginx_http_upstream_keepalive": "60",
                        "lua_socket_pool_size": 30,
                        "nginx_proxy_real_ip_header": "X-Real-IP",
                        "db_resurrect_ttl": 30,
                        "mem_cache_size": "128m",
                        "cassandra_consistency": "ONE",
                        "client_max_body_size": "0",
                        "admin_error_log": "/dev/stderr",
                        "nginx_main_directives": [
                            {
                                "value": "off",
                                "name": "daemon"
                            },
                            {
                                "value": "auto",
                                "name": "worker_rlimit_nofile"
                            },
                            {
                                "value": "auto",
                                "name": "worker_processes"
                            }
                        ],
                        "dns_not_found_ttl": 30,
                        "nginx_http_ssl_session_tickets": "on",
                        "ssl_ciphers": "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384",
                        "client_ssl": false,
                        "cassandra_repl_strategy": "SimpleStrategy",
                        "status_error_log": "logs/status_error.log",
                        "ssl_cert_key_default": "/usr/local/kong/ssl/kong-default.key",
                        "dns_stale_ttl": 4,
                        "nginx_main_worker_processes": "auto",
                        "nginx_kong_conf": "/usr/local/kong/nginx-kong.conf",
                        "real_ip_header": "X-Real-IP",
                        "dns_hostsfile": "/etc/hosts",
                        "admin_listeners": [
                            {
                                "listener": "0.0.0.0:8001",
                                "proxy_protocol": false,
                                "reuseport": false,
                                "backlog=%d+": false,
                                "deferred": false,
                                "ssl": false,
                                "ip": "0.0.0.0",
                                "port": 8001,
                                "http2": false,
                                "bind": false
                            },
                            {
                                "listener": "0.0.0.0:8444 ssl",
                                "proxy_protocol": false,
                                "reuseport": false,
                                "backlog=%d+": false,
                                "deferred": false,
                                "ssl": true,
                                "ip": "0.0.0.0",
                                "port": 8444,
                                "http2": false,
                                "bind": false
                            }
                        ],
                        "cassandra_contact_points": [
                            "kong-database"
                        ],
                        "ssl_cert": "/usr/local/kong/ssl/kong-default.crt",
                        "nginx_proxy_real_ip_recursive": "off",
                        "proxy_access_log": "/dev/stdout",
                        "cassandra_ssl_verify": false,
                        "admin_ssl_cert": "/usr/local/kong/ssl/admin-kong-default.crt",
                        "cassandra_repl_factor": 1,
                        "db_update_frequency": 5,
                        "nginx_optimizations": true,
                        "nginx_proxy_directives": [
                            {
                                "value": "X-Real-IP",
                                "name": "real_ip_header"
                            },
                            {
                                "value": "off",
                                "name": "real_ip_recursive"
                            }
                        ],
                        "nginx_daemon": "off",
                        "anonymous_reports": true,
                        "cassandra_timeout": 5000,
                        "status_listeners": {},
                        "client_ssl_cert_key_default": "/usr/local/kong/ssl/kong-default.key",
                        "pg_ssl_verify": false,
                        "client_body_buffer_size": "8k",
                        "nginx_events_worker_connections": "auto",
                        "stream_listeners": {},
                        "error_default_type": "text/plain",
                        "lua_package_cpath": "",
                        "cassandra_lb_policy": "RequestRoundRobin",
                        "nginx_stream_directives": [
                            {
                                "value": "stream_prometheus_metrics 5m",
                                "name": "lua_shared_dict"
                            }
                        ],
                        "ssl_cert_csr_default": "/usr/local/kong/ssl/kong-default.csr"
                    },
                    "version": "2.0.1",
                    "node_id": "60d82979-75a1-4c56-aceb-e99d637265c9",
                    "lua_version": "LuaJIT 2.1.0-beta3",
                    "prng_seeds": {
                        "pid: 23": 181234361471,
                        "pid: 22": 351146012690,
                        "pid: 1": 145823120472
                    },
                    "timers": {
                        "pending": 7,
                        "running": 0
                    },
                    "hostname": "cb1b9b178042"
                }
  /status:
    get:
      tags:
        - Health Routes
      summary: Retrieve Node Status
      description: "## Retrieve Node Status [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-node-status)\n\n* Retrieve usage information about a node, with some basic information about the connections being processed by the underlying nginx process, the status of the database connection, and node’s memory usage.\n* If you want to monitor the Kong process, since Kong is built on top of nginx, every existing nginx monitoring tool or agent can be used.\n\n* memory: Metrics about the memory usage.\n\t* workers_lua_vms: An array with all workers of the Kong node, where each entry contains:\n\t* http_allocated_gc: HTTP submodule’s Lua virtual machine’s memory usage information, as reported by collectgarbage(\"count\"), for every active worker, i.e. a worker that received a proxy call in the last 10 seconds.\n\t* pid: worker’s process identification number.\nlua_shared_dicts: An array of information about dictionaries that are shared with all workers in a Kong node, where each array node contains how much memory is dedicated for the specific shared dictionary (capacity) and how much of said memory is in use (allocated_slabs). These shared dictionaries have least recent used (LRU) eviction capabilities, so a full dictionary, where allocated_slabs == capacity, will work properly. However for some dictionaries, e.g. cache HIT/MISS shared dictionaries, increasing their size can be beneficial for the overall performance of a Kong node.\n\t*  The memory usage unit and precision can be changed using the querystring arguments unit and scale:\n\t\t* unit: one of b/B, k/K, m/M, g/G, which will return results in bytes, kibibytes, mebibytes, or gibibytes, respectively. When “bytes” are requested, the memory values in the response will have a number type instead of string. Defaults to m.\n\t\t* scale: the number of digits to the right of the decimal points when values are given in human-readable memory strings (unit other than “bytes”). Defaults to 2. You can get the shared dictionaries memory usage in kibibytes with 4 digits of precision by doing: GET /status?unit=k&scale=4\n* server: Metrics about the nginx HTTP/S server.\n\t* total_requests: The total number of client requests.\n\t* connections_active: The current number of active client connections including Waiting connections.\n\t* connections_accepted: The total number of accepted client connections.\n\t* connections_handled: The total number of handled connections. Generally, the parameter value is the same as accepts unless some resource limits have been reached.\n\t* connections_reading: The current number of connections where Kong is reading the request header.\n\t* connections_writing: The current number of connections where nginx is writing the response back to the client.\n\t* connections_waiting: The current number of idle client connections waiting for a request.\n* database: Metrics about the database.\n\t* reachable: A boolean value reflecting the state of the database connection. Please note that this flag does not reflect the health of the database itself."
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 00:40:05 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '1153'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '913'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "database": {
                        "reachable": true
                    },
                    "memory": {
                        "workers_lua_vms": [
                            {
                                "http_allocated_gc": "0.03 MiB",
                                "pid": 22
                            },
                            {
                                "http_allocated_gc": "0.03 MiB",
                                "pid": 23
                            }
                        ],
                        "lua_shared_dicts": {
                            "kong_locks": {
                                "allocated_slabs": "0.06 MiB",
                                "capacity": "8.00 MiB"
                            },
                            "kong": {
                                "allocated_slabs": "0.04 MiB",
                                "capacity": "5.00 MiB"
                            },
                            "kong_process_events": {
                                "allocated_slabs": "0.04 MiB",
                                "capacity": "5.00 MiB"
                            },
                            "kong_db_cache_miss": {
                                "allocated_slabs": "0.08 MiB",
                                "capacity": "12.00 MiB"
                            },
                            "kong_healthchecks": {
                                "allocated_slabs": "0.04 MiB",
                                "capacity": "5.00 MiB"
                            },
                            "kong_cluster_events": {
                                "allocated_slabs": "0.04 MiB",
                                "capacity": "5.00 MiB"
                            },
                            "kong_core_db_cache_miss": {
                                "allocated_slabs": "0.08 MiB",
                                "capacity": "12.00 MiB"
                            },
                            "kong_core_db_cache": {
                                "allocated_slabs": "0.77 MiB",
                                "capacity": "128.00 MiB"
                            },
                            "prometheus_metrics": {
                                "allocated_slabs": "0.04 MiB",
                                "capacity": "5.00 MiB"
                            },
                            "kong_db_cache": {
                                "allocated_slabs": "0.76 MiB",
                                "capacity": "128.00 MiB"
                            },
                            "kong_rate_limiting_counters": {
                                "allocated_slabs": "0.08 MiB",
                                "capacity": "12.00 MiB"
                            }
                        }
                    },
                    "server": {
                        "connections_writing": 1,
                        "total_requests": 21,
                        "connections_handled": 15,
                        "connections_accepted": 15,
                        "connections_reading": 0,
                        "connections_active": 4,
                        "connections_waiting": 3
                    }
                }
  /tags:
    get:
      tags:
        - Tags
      summary: List All Tags
      description: >-
        ## Retrieve Node Status
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-all-tags)



        * Returns a paginated list of all the tags in the system.

        * The list of entities will not be restricted to a single entity type:
        all the entities tagged with tags will be present on this list.

        * If an entity is tagged with more than one tag, the entity_id for that
        entity will appear more than once in the resulting list. Similarly, if
        several entities have been tagged with the same tag, the tag will appear
        in several items of this list.
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Fri, 13 Mar 2020 01:04:37 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '1002'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '3'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "next": null,
                    "data": [
                        {
                            "entity_id": "626169e4-6cd7-4952-85b1-3fda70fd5333",
                            "entity_name": "consumers",
                            "tag": "user-level"
                        },
                        {
                            "entity_id": "626169e4-6cd7-4952-85b1-3fda70fd5333",
                            "entity_name": "consumers",
                            "tag": "low-priority"
                        },
                        {
                            "entity_id": "875973fd-ba3f-4c7b-8301-e9263013e6d2",
                            "entity_name": "routes",
                            "tag": "user-level"
                        },
                        {
                            "entity_id": "875973fd-ba3f-4c7b-8301-e9263013e6d2",
                            "entity_name": "routes",
                            "tag": "low-priority"
                        },
                        {
                            "entity_id": "c883d8e7-0a33-4153-9d18-0741a3412125",
                            "entity_name": "consumers",
                            "tag": "user-level"
                        },
                        {
                            "entity_id": "c883d8e7-0a33-4153-9d18-0741a3412125",
                            "entity_name": "consumers",
                            "tag": "low-priority"
                        },
                        {
                            "entity_id": "e080cdd2-cdf4-4634-9d5d-1668c6929697",
                            "entity_name": "plugins",
                            "tag": "user-level"
                        },
                        {
                            "entity_id": "e080cdd2-cdf4-4634-9d5d-1668c6929697",
                            "entity_name": "plugins",
                            "tag": "low-priority"
                        },
                        {
                            "entity_id": "f8d38987-1eb6-4cb2-a7c8-6b11a17de911",
                            "entity_name": "upstreams",
                            "tag": "user-level"
                        },
                        {
                            "entity_id": "f8d38987-1eb6-4cb2-a7c8-6b11a17de911",
                            "entity_name": "upstreams",
                            "tag": "low-priority"
                        }
                    ]
                }
  /tags/{tags}:
    get:
      tags:
        - Tags
      summary: List Entity Ids by Tag
      description: >-
        ## List Entity Ids by Tag
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-entity-ids-by-tag)


        * Returns the entities that have been tagged with the specified tag.

        * The list of entities will not be restricted to a single entity type:
        all the entities tagged with tags will be present on this list.
      parameters:
        - name: tags
          in: path
          schema:
            type: string
          required: true
          description: Returns the entities that have been tagged with the specified tag.
          example: '{{tags}}'
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Fri, 13 Mar 2020 01:32:19 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '507'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '2'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "next": null,
                    "data": [
                        {
                            "entity_id": "626169e4-6cd7-4952-85b1-3fda70fd5333",
                            "entity_name": "consumers",
                            "tag": "user-level"
                        },
                        {
                            "entity_id": "875973fd-ba3f-4c7b-8301-e9263013e6d2",
                            "entity_name": "routes",
                            "tag": "user-level"
                        },
                        {
                            "entity_id": "c883d8e7-0a33-4153-9d18-0741a3412125",
                            "entity_name": "consumers",
                            "tag": "user-level"
                        },
                        {
                            "entity_id": "e080cdd2-cdf4-4634-9d5d-1668c6929697",
                            "entity_name": "plugins",
                            "tag": "user-level"
                        },
                        {
                            "entity_id": "f8d38987-1eb6-4cb2-a7c8-6b11a17de911",
                            "entity_name": "upstreams",
                            "tag": "user-level"
                        }
                    ]
                }
        '400':
          description: Bad Request
          headers:
            Date:
              schema:
                type: string
                example: Fri, 13 Mar 2020 01:33:47 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '90'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '0'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "name": "invalid unique tag",
                    "message": "invalid value: user-level,low-priority",
                    "code": 10
                }
  /services:
    post:
      tags:
        - Service Object > Add Service
      summary: Create Service
      description: >-
        ## Create Service
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-service)


        * Service entities, as the name implies, are abstractions of each of
        your own upstream services. Examples of Services would be a data
        transformation microservice, a billing API, etc.

        * The main attribute of a Service is its URL (where Kong should proxy
        traffic to), which can be set as a single string or by specifying its
        protocol, host, port and path individually.

        *Services are associated to Routes (a Service can have many Routes
        associated with it). Routes are entry-points in Kong and define rules to
        match client requests. Once a Route is matched, Kong proxies the request
        to its associated Service. See the Proxy Reference for a detailed
        explanation of how Kong proxies traffic.


        ## Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>optional</td>
            <td>The Service name</td>
          </tr>
          <tr>
            <td>retries</td>
            <td>optional</td>
            <td>The number of retries to execute upon failure to proxy. Defaults to 5</td>
          </tr>
          <tr>
            <td>protocol</td>
            <td>required</td>
            <td>The protocol used to communicate with the upstream. Accepted values are: "grpc", "grpcs", "http", "https", "tcp", "tls". Defaults to "http"</td>
          </tr>
           <tr>
            <td>host</td>
            <td>required</td>
            <td>The host of the upstream server</td>
          </tr>
           <tr>
            <td>port</td>
            <td>required</td>
            <td>The upstream server port. Defaults to 80</td>
          </tr>
           <tr>
            <td>path</td>
            <td>optional</td>
            <td>The path to be used in requests to the upstream server.</td>
          </tr>
             <tr>
            <td>connect_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds for establishing a connection to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>write_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>read_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Service, for grouping and filtering.</td>
          </tr>
               <tr>
            <td>client_certificate</td>
            <td>optional</td>
            <td>Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is client_certificate.id=<client_certificate id>. With JSON, use “"client_certificate":{"id":"<client_certificate id>"}.</td>
          </tr>
               <tr>
            <td>url</td>
            <td>required</td>
            <td>Shorthand attribute to set protocol, host, port and path at once. This attribute is write-only (the Admin API never “returns” the url).</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"host\": \"httpbin.org\",\n    \"connect_timeout\":
                60000,\n    \"protocol\": \"https\",\n    \"name\":
                \"httpbin-api\",\n    \"read_timeout\": 60000,\n    \"port\":
                443,\n    \"path\": \"/\",\n    \"retries\": 5,\n   
                \"write_timeout\": 60000,\n    \"tags\": null,\n   
                \"client_certificate\": null\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Date:
              schema:
                type: string
                example: Fri, 13 Mar 2020 01:57:34 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '294'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '8'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "host": "httpbin.org",
                    "created_at": 1584064654,
                    "connect_timeout": 60000,
                    "id": "0022319a-a0b7-49d9-9eba-f2794f461de8",
                    "protocol": "https",
                    "name": "httpbin-api",
                    "read_timeout": 60000,
                    "port": 443,
                    "path": "/",
                    "updated_at": 1584064654,
                    "retries": 5,
                    "write_timeout": 60000,
                    "tags": null,
                    "client_certificate": null
                }
        '409':
          description: Conflict
          headers:
            Date:
              schema:
                type: string
                example: Sat, 07 Mar 2020 23:04:28 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '145'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '5'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "message": "UNIQUE violation detected on '{name=\"httpbin-api\"}'",
                    "name": "unique constraint violation",
                    "fields": {
                        "name": "httpbin-api"
                    },
                    "code": 5
                }
    get:
      tags:
        - Service Object > List Services
      summary: List all services
      description: >-
        ## List all services
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-all-services)

        * Services can be both tagged and filtered by
        [tags](https://docs.konghq.com/2.0.x/admin-api/#tags)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>tags</td>
            <td>optional</td>
            <td>query</td>
            <td>Tags can be used to filter core entities as well, via the ?tags querystring parameter. See https://docs.konghq.com/2.0.x/admin-api/#tags </td>
          </tr>
        </table>
      parameters:
        - name: tags
          in: query
          schema:
            type: string
          example: '{{tags}}'
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Sat, 07 Mar 2020 23:07:29 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '317'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '1'
          content:
            text/plain:
              schema:
                type: string
              examples:
                example-0:
                  summary: List all services - 200
                  value: "{\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"a5fb8d9b-a99d-40e9-9d35-72d42a62d83a\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"updated_at\": 1422386534,\n\t\t\t\"name\": \"my-service\",\n\t\t\t\"retries\": 5,\n\t\t\t\"protocol\": \"http\",\n\t\t\t\"host\": \"example.com\",\n\t\t\t\"port\": 80,\n\t\t\t\"path\": \"/some_api\",\n\t\t\t\"connect_timeout\": 60000,\n\t\t\t\"write_timeout\": 60000,\n\t\t\t\"read_timeout\": 60000,\n\t\t\t\"tags\": [\n\t\t\t\t\"user-level\",\n\t\t\t\t\"low-priority\"\n\t\t\t],\n\t\t\t\"client_certificate\": {\n\t\t\t\t\"id\": \"51e77dc2-8f3e-4afa-9d0e-0e3bbbcfd515\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"fc73f2af-890d-4f9b-8363-af8945001f7f\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"updated_at\": 1422386534,\n\t\t\t\"name\": \"my-service\",\n\t\t\t\"retries\": 5,\n\t\t\t\"protocol\": \"http\",\n\t\t\t\"host\": \"example.com\",\n\t\t\t\"port\": 80,\n\t\t\t\"path\": \"/another_api\",\n\t\t\t\"connect_timeout\": 60000,\n\t\t\t\"write_timeout\": 60000,\n\t\t\t\"read_timeout\": 60000,\n\t\t\t\"tags\": [\n\t\t\t\t\"admin\",\n\t\t\t\t\"high-priority\",\n\t\t\t\t\"critical\"\n\t\t\t],\n\t\t\t\"client_certificate\": {\n\t\t\t\t\"id\": \"4506673d-c825-444c-a25b-602e3c2ec16e\"\n\t\t\t}\n\t\t}\n\t],\n\t\"next\": \"http://localhost:8001/services?offset=6378122c-a0a1-438d-a5c6-efabae9fb969\"\n}"
                example-1:
                  summary: List all services - 200
                  value: |-
                    {
                     "next": "sed pariatur Ut veniam do",
                     "data": [
                      {
                       "host": "httpbin.org",
                       "created_at": 1584064654,
                       "connect_timeout": 60000,
                       "id": "0022319a-a0b7-49d9-9eba-f2794f461de8",
                       "protocol": "https",
                       "name": "httpbin-apil",
                       "read_timeout": 60000,
                       "port": 443,
                       "path": "/",
                       "updated_at": 1584065489,
                       "retries": 5,
                       "write_timeout": 60000,
                       "tags": [
                        "user-level",
                        "low-priority"
                       ],
                       "client_certificate": {
                        "id": "ut"
                       }
                      }
                     ]
                    }
  /certificates/{certificateIdorName}/services:
    post:
      tags:
        - Service Object > Add Service
      summary: Create Service Associated to a Specific Certificate
      description: >-
        ## Create Service Associated to a Specific Certificate
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-service-associated-to-a-specific-certificate)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>certificate name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name attribute of the Certificate that should be associated to the newly-created Service.</td>
          </tr>
        </table>


        ## Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>optional</td>
            <td>The Service name</td>
          </tr>
          <tr>
            <td>retries</td>
            <td>optional</td>
            <td>The number of retries to execute upon failure to proxy. Defaults to 5</td>
          </tr>
          <tr>
            <td>protocol</td>
            <td>required</td>
            <td>The protocol used to communicate with the upstream. Accepted values are: "grpc", "grpcs", "http", "https", "tcp", "tls". Defaults to "http"</td>
          </tr>
           <tr>
            <td>host</td>
            <td>required</td>
            <td>The host of the upstream server</td>
          </tr>
           <tr>
            <td>port</td>
            <td>required</td>
            <td>The upstream server port. Defaults to 80</td>
          </tr>
           <tr>
            <td>path</td>
            <td>optional</td>
            <td>The path to be used in requests to the upstream server.</td>
          </tr>
             <tr>
            <td>connect_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds for establishing a connection to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>write_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>read_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Service, for grouping and filtering.</td>
          </tr>
               <tr>
            <td>client_certificate</td>
            <td>optional</td>
            <td>Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is client_certificate.id=<client_certificate id>. With JSON, use “"client_certificate":{"id":"<client_certificate id>"}.</td>
          </tr>
               <tr>
            <td>url</td>
            <td>required</td>
            <td>Shorthand attribute to set protocol, host, port and path at once. This attribute is write-only (the Admin API never “returns” the url).</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n\t\"name\": \"httpbin-api\",\n\t\"url\":
                \"https://httpbin.org/\"\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: certificateIdorName
          in: path
          schema:
            type: string
          required: true
      responses:
        '201':
          description: Created
          headers:
            Date:
              schema:
                type: string
                example: Fri, 06 Mar 2020 19:57:47 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '294'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '19'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "host": "httpbin.org",
                    "created_at": 1583524667,
                    "connect_timeout": 60000,
                    "id": "ebcbaad6-797f-435c-be22-63051db717c3",
                    "protocol": "https",
                    "name": "httpbin-api",
                    "read_timeout": 60000,
                    "port": 443,
                    "path": "/",
                    "updated_at": 1583524667,
                    "retries": 5,
                    "write_timeout": 60000,
                    "tags": null,
                    "client_certificate": null
                }
        undefined:
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "id": "9748f662-7711-4a90-8186-dc02f10eb0f5",
                    "created_at": 1422386534,
                    "updated_at": 1422386534,
                    "name": "my-service",
                    "retries": 5,
                    "protocol": "http",
                    "host": "example.com",
                    "port": 80,
                    "path": "/some_api",
                    "connect_timeout": 60000,
                    "write_timeout": 60000,
                    "read_timeout": 60000,
                    "tags": [
                        "user-level",
                        "low-priority"
                    ],
                    "client_certificate": {
                        "id": "4e3ad2e4-0bc4-4638-8e34-c84a417ba39b"
                    }
                }
  /certificates/{certificateNameOrId}/services:
    get:
      tags:
        - Service Object > List Services
      summary: List Services Associated to a Specific Certificate
      description: >-
        ## List Services Associated to a Specific Certificate
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-services-associated-to-a-specific-certificate)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>certificate name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name attribute of the Certificate whose Services are to be retrieved. When using this endpoint, only Services associated to the specified Certificate will be listed.</td>
          </tr>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: certificateNameOrId
          in: path
          schema:
            type: string
          required: true
      responses:
        '404':
          description: Not Found
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 01:07:47 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '23'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '0'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "message": "Not found"
                }
  /services/{serviceNameOrID}:
    get:
      tags:
        - Service Object > Retrieve Service
      summary: Retrieve Service
      description: >-
        ## Retrieve Service
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-service-1)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>Service name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Service to retrieve.</td>
          </tr>
        </table>
      parameters:
        - name: serviceNameOrID
          in: path
          schema:
            type: string
          required: true
          example: '{{serviceNameOrID}}'
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Fri, 13 Mar 2020 02:05:23 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '294'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '2'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "host": "httpbin.org",
                    "created_at": 1584064654,
                    "connect_timeout": 60000,
                    "id": "0022319a-a0b7-49d9-9eba-f2794f461de8",
                    "protocol": "https",
                    "name": "httpbin-api",
                    "read_timeout": 60000,
                    "port": 443,
                    "path": "/",
                    "updated_at": 1584064654,
                    "retries": 5,
                    "write_timeout": 60000,
                    "tags": null,
                    "client_certificate": null
                }
        '404':
          description: Not Found
          headers:
            Date:
              schema:
                type: string
                example: Fri, 13 Mar 2020 02:06:03 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '23'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '1'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "message": "Not found"
                }
  /certificates/{certificateId}/services/{serviceNameOrId}:
    get:
      tags:
        - Service Object > Retrieve Service
      summary: Retrieve Service Associated to a Specific Certificate
      description: >-
        ## Retrieve Service Associated to a Specific Certificate
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-service-associated-to-a-specific-certificate)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>certificate id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Certificate to retrieve.</td>
          </tr>
          <tr>
            <td>service name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Service to retrieve.</td>
          </tr>
        </table>
      parameters:
        - name: certificateId
          in: path
          schema:
            type: string
          required: true
        - name: serviceNameOrId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - Route Object > Update Route
      summary: Update Service Associated to a Specific Certificate
      description: >-
        ## Update Service
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-service-associated-to-a-specific-certificate)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>certificate id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Certificate to update</td>
          </tr>
          <tr>
            <td>service name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Service to update.</td>
          </tr>
        </table>


        ## Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>optional</td>
            <td>The Service name</td>
          </tr>
          <tr>
            <td>retries</td>
            <td>optional</td>
            <td>The number of retries to execute upon failure to proxy. Defaults to 5</td>
          </tr>
          <tr>
            <td>protocol</td>
            <td>required</td>
            <td>The protocol used to communicate with the upstream. Accepted values are: "grpc", "grpcs", "http", "https", "tcp", "tls". Defaults to "http"</td>
          </tr>
           <tr>
            <td>host</td>
            <td>required</td>
            <td>The host of the upstream server</td>
          </tr>
           <tr>
            <td>port</td>
            <td>required</td>
            <td>The upstream server port. Defaults to 80</td>
          </tr>
           <tr>
            <td>path</td>
            <td>optional</td>
            <td>The path to be used in requests to the upstream server.</td>
          </tr>
             <tr>
            <td>connect_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds for establishing a connection to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>write_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>read_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Service, for grouping and filtering.</td>
          </tr>
               <tr>
            <td>client_certificate</td>
            <td>optional</td>
            <td>Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is client_certificate.id=<client_certificate id>. With JSON, use “"client_certificate":{"id":"<client_certificate id>"}.</td>
          </tr>
               <tr>
            <td>url</td>
            <td>required</td>
            <td>Shorthand attribute to set protocol, host, port and path at once. This attribute is write-only (the Admin API never “returns” the url).</td>
          </tr>
        </table>
      requestBody:
        content: {}
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: certificateId
          in: path
          schema:
            type: string
          required: true
        - name: serviceNameOrId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Service Object > Upsert Service
      summary: Create Or Update Service Associated to a Specific Certificate
      description: >-
        ## Create Or Update Service Associated to a Specific Certificate
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-service-associated-to-a-specific-certificate)

        * Inserts (or replaces) the Service under the requested resource with
        the definition specified in the body. The Service will be identified via
        the name or id attribute.

        * When the name or id attribute has the structure of a UUID, the Service
        being inserted/replaced will be identified by its id. Otherwise it will
        be identified by its name.

        * When creating a new Service without specifying id (neither in the URL
        nor in the body), then it will be auto-generated.

        * Notice that specifying a name in the URL and a different one in the
        request body is not allowed.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>certificate id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Certificate to update</td>
          </tr>
          <tr>
            <td>service name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Service to update.</td>
          </tr>
        </table>


        ## Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>optional</td>
            <td>The Service name</td>
          </tr>
          <tr>
            <td>retries</td>
            <td>optional</td>
            <td>The number of retries to execute upon failure to proxy. Defaults to 5</td>
          </tr>
          <tr>
            <td>protocol</td>
            <td>required</td>
            <td>The protocol used to communicate with the upstream. Accepted values are: "grpc", "grpcs", "http", "https", "tcp", "tls". Defaults to "http"</td>
          </tr>
           <tr>
            <td>host</td>
            <td>required</td>
            <td>The host of the upstream server</td>
          </tr>
           <tr>
            <td>port</td>
            <td>required</td>
            <td>The upstream server port. Defaults to 80</td>
          </tr>
           <tr>
            <td>path</td>
            <td>optional</td>
            <td>The path to be used in requests to the upstream server.</td>
          </tr>
             <tr>
            <td>connect_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds for establishing a connection to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>write_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>read_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Service, for grouping and filtering.</td>
          </tr>
               <tr>
            <td>client_certificate</td>
            <td>optional</td>
            <td>Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is client_certificate.id=<client_certificate id>. With JSON, use “"client_certificate":{"id":"<client_certificate id>"}.</td>
          </tr>
               <tr>
            <td>url</td>
            <td>required</td>
            <td>Shorthand attribute to set protocol, host, port and path at once. This attribute is write-only (the Admin API never “returns” the url).</td>
          </tr>
        </table>
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                host: httpbin.org
                name: httpbin-api
                retries: 5
                protocol: https
                port: 443
                path: /
                connect_timeout: 60000
                write_timeout: 60000
                read_timeout: 60000
                tags: null
                client_certificate: null
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: certificateId
          in: path
          schema:
            type: string
          required: true
        - name: serviceNameOrId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Service Object > Delete Service
      summary: Delete Service Associated to a Specific Certificate
      description: >-
        ## Delete Service Associated to a Specific Certificate
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-service-associated-to-a-specific-certificate)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>certificate id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Certificate to delete.</td>
          </tr>
          <tr>
            <td>service name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Service to delete.</td>
          </tr>
        </table>
      parameters:
        - name: certificateId
          in: path
          schema:
            type: string
          required: true
        - name: serviceNameOrId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /routes/{routeNameOrId}/service:
    get:
      tags:
        - Service Object > Retrieve Service
      summary: Retrieve Service Associated to a Specific Route
      description: >-
        ## Retrieve Service Associated to a Specific Route
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-service-associated-to-a-specific-route)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>route name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Route associated to the Service to be retrieved.</td>
          </tr>
        </table>
      parameters:
        - name: routeNameOrId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - Route Object > Update Route
      summary: Update Service Associated to a Specific Route
      description: >-
        ## Update Service Associated to a Specific Route
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-service-associated-to-a-specific-route)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>route name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Route associated to the Service to be updated</td>
          </tr>
        </table>


        ## Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>optional</td>
            <td>The Service name</td>
          </tr>
          <tr>
            <td>retries</td>
            <td>optional</td>
            <td>The number of retries to execute upon failure to proxy. Defaults to 5</td>
          </tr>
          <tr>
            <td>protocol</td>
            <td>required</td>
            <td>The protocol used to communicate with the upstream. Accepted values are: "grpc", "grpcs", "http", "https", "tcp", "tls". Defaults to "http"</td>
          </tr>
           <tr>
            <td>host</td>
            <td>required</td>
            <td>The host of the upstream server</td>
          </tr>
           <tr>
            <td>port</td>
            <td>required</td>
            <td>The upstream server port. Defaults to 80</td>
          </tr>
           <tr>
            <td>path</td>
            <td>optional</td>
            <td>The path to be used in requests to the upstream server.</td>
          </tr>
             <tr>
            <td>connect_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds for establishing a connection to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>write_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>read_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Service, for grouping and filtering.</td>
          </tr>
               <tr>
            <td>client_certificate</td>
            <td>optional</td>
            <td>Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is client_certificate.id=<client_certificate id>. With JSON, use “"client_certificate":{"id":"<client_certificate id>"}.</td>
          </tr>
               <tr>
            <td>url</td>
            <td>required</td>
            <td>Shorthand attribute to set protocol, host, port and path at once. This attribute is write-only (the Admin API never “returns” the url).</td>
          </tr>
        </table>
      requestBody:
        content: {}
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: routeNameOrId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Service Object > Upsert Service
      summary: Create Or Update Service Associated to a Specific Route
      description: >-
        ## Create Or Update Service Associated to a Specific Route
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-service-associated-to-a-specific-route)

        * Inserts (or replaces) the Service under the requested resource with
        the definition specified in the body. The Service will be identified via
        the name or id attribute.

        * When the name or id attribute has the structure of a UUID, the Service
        being inserted/replaced will be identified by its id. Otherwise it will
        be identified by its name.

        * When creating a new Service without specifying id (neither in the URL
        nor in the body), then it will be auto-generated.

        * Notice that specifying a name in the URL and a different one in the
        request body is not allowed.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>route name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Route associated to the Service to be updated</td>
          </tr>
        </table>


        ## Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>optional</td>
            <td>The Service name</td>
          </tr>
          <tr>
            <td>retries</td>
            <td>optional</td>
            <td>The number of retries to execute upon failure to proxy. Defaults to 5</td>
          </tr>
          <tr>
            <td>protocol</td>
            <td>required</td>
            <td>The protocol used to communicate with the upstream. Accepted values are: "grpc", "grpcs", "http", "https", "tcp", "tls". Defaults to "http"</td>
          </tr>
           <tr>
            <td>host</td>
            <td>required</td>
            <td>The host of the upstream server</td>
          </tr>
           <tr>
            <td>port</td>
            <td>required</td>
            <td>The upstream server port. Defaults to 80</td>
          </tr>
           <tr>
            <td>path</td>
            <td>optional</td>
            <td>The path to be used in requests to the upstream server.</td>
          </tr>
             <tr>
            <td>connect_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds for establishing a connection to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>write_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>read_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Service, for grouping and filtering.</td>
          </tr>
               <tr>
            <td>client_certificate</td>
            <td>optional</td>
            <td>Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is client_certificate.id=<client_certificate id>. With JSON, use “"client_certificate":{"id":"<client_certificate id>"}.</td>
          </tr>
               <tr>
            <td>url</td>
            <td>required</td>
            <td>Shorthand attribute to set protocol, host, port and path at once. This attribute is write-only (the Admin API never “returns” the url).</td>
          </tr>
        </table>
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                host: httpbin.org
                name: httpbin-api
                retries: 5
                protocol: https
                port: 443
                path: /
                connect_timeout: 60000
                write_timeout: 60000
                read_timeout: 60000
                tags: null
                client_certificate: null
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: routeNameOrId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Service Object > Delete Service
      summary: Delete Service Associated to a Specific Route
      description: >-
        ## Delete Service Associated to a Specific Route
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-service-associated-to-a-specific-route)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>route name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Route associated to the Service to be deleted</td>
          </tr>
        </table>
      parameters:
        - name: routeNameOrId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /plugins/{pluginId}/service:
    get:
      tags:
        - Service Object > Retrieve Service
      summary: Retrieve Service Associated to a Specific Plugin
      description: >-
        ## Retrieve Service Associated to a Specific Plugin
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-service-associated-to-a-specific-plugin)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>plugin id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Plugin associated to the Service to be retrieved.</td>
          </tr>
        </table>
      parameters:
        - name: pluginId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - Route Object > Update Route
      summary: Update Service Associated to a Specific Plugin
      description: >-
        ## Update Service Associated to a Specific Plugin
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-service-associated-to-a-specific-plugin)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>plugin id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Plugin associated to the Service to be updated</td>
          </tr>
        </table>


        ## Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>optional</td>
            <td>The Service name</td>
          </tr>
          <tr>
            <td>retries</td>
            <td>optional</td>
            <td>The number of retries to execute upon failure to proxy. Defaults to 5</td>
          </tr>
          <tr>
            <td>protocol</td>
            <td>required</td>
            <td>The protocol used to communicate with the upstream. Accepted values are: "grpc", "grpcs", "http", "https", "tcp", "tls". Defaults to "http"</td>
          </tr>
           <tr>
            <td>host</td>
            <td>required</td>
            <td>The host of the upstream server</td>
          </tr>
           <tr>
            <td>port</td>
            <td>required</td>
            <td>The upstream server port. Defaults to 80</td>
          </tr>
           <tr>
            <td>path</td>
            <td>optional</td>
            <td>The path to be used in requests to the upstream server.</td>
          </tr>
             <tr>
            <td>connect_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds for establishing a connection to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>write_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>read_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Service, for grouping and filtering.</td>
          </tr>
               <tr>
            <td>client_certificate</td>
            <td>optional</td>
            <td>Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is client_certificate.id=<client_certificate id>. With JSON, use “"client_certificate":{"id":"<client_certificate id>"}.</td>
          </tr>
               <tr>
            <td>url</td>
            <td>required</td>
            <td>Shorthand attribute to set protocol, host, port and path at once. This attribute is write-only (the Admin API never “returns” the url).</td>
          </tr>
        </table>
      requestBody:
        content: {}
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: pluginId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Service Object > Upsert Service
      summary: Create Or Update Service Associated to a Specific Plugin
      description: >-
        ## Create Or Update Service Associated to a Specific Plugin
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-service-associated-to-a-specific-plugin)

        * Inserts (or replaces) the Service under the requested resource with
        the definition specified in the body. The Service will be identified via
        the name or id attribute.

        * When the name or id attribute has the structure of a UUID, the Service
        being inserted/replaced will be identified by its id. Otherwise it will
        be identified by its name.

        * When creating a new Service without specifying id (neither in the URL
        nor in the body), then it will be auto-generated.

        * Notice that specifying a name in the URL and a different one in the
        request body is not allowed.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>plugin id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Plugin associated to the Service to be updated</td>
          </tr>
        </table>


        ## Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>optional</td>
            <td>The Service name</td>
          </tr>
          <tr>
            <td>retries</td>
            <td>optional</td>
            <td>The number of retries to execute upon failure to proxy. Defaults to 5</td>
          </tr>
          <tr>
            <td>protocol</td>
            <td>required</td>
            <td>The protocol used to communicate with the upstream. Accepted values are: "grpc", "grpcs", "http", "https", "tcp", "tls". Defaults to "http"</td>
          </tr>
           <tr>
            <td>host</td>
            <td>required</td>
            <td>The host of the upstream server</td>
          </tr>
           <tr>
            <td>port</td>
            <td>required</td>
            <td>The upstream server port. Defaults to 80</td>
          </tr>
           <tr>
            <td>path</td>
            <td>optional</td>
            <td>The path to be used in requests to the upstream server.</td>
          </tr>
             <tr>
            <td>connect_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds for establishing a connection to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>write_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>read_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Service, for grouping and filtering.</td>
          </tr>
               <tr>
            <td>client_certificate</td>
            <td>optional</td>
            <td>Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is client_certificate.id=<client_certificate id>. With JSON, use “"client_certificate":{"id":"<client_certificate id>"}.</td>
          </tr>
               <tr>
            <td>url</td>
            <td>required</td>
            <td>Shorthand attribute to set protocol, host, port and path at once. This attribute is write-only (the Admin API never “returns” the url).</td>
          </tr>
        </table>
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                host: httpbin.org
                name: httpbin-api
                retries: 5
                protocol: https
                port: 443
                path: /
                connect_timeout: 60000
                write_timeout: 60000
                read_timeout: 60000
                tags: null
                client_certificate: null
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: pluginId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /services/{serviceNameOrId}:
    patch:
      tags:
        - Service Object > Update Service
      summary: Update Service
      description: >-
        ## Update Service
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-service)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>service name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Service to update.</td>
          </tr>
        </table>


        ## Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>optional</td>
            <td>The Service name</td>
          </tr>
          <tr>
            <td>retries</td>
            <td>optional</td>
            <td>The number of retries to execute upon failure to proxy. Defaults to 5</td>
          </tr>
          <tr>
            <td>protocol</td>
            <td>required</td>
            <td>The protocol used to communicate with the upstream. Accepted values are: "grpc", "grpcs", "http", "https", "tcp", "tls". Defaults to "http"</td>
          </tr>
           <tr>
            <td>host</td>
            <td>required</td>
            <td>The host of the upstream server</td>
          </tr>
           <tr>
            <td>port</td>
            <td>required</td>
            <td>The upstream server port. Defaults to 80</td>
          </tr>
           <tr>
            <td>path</td>
            <td>optional</td>
            <td>The path to be used in requests to the upstream server.</td>
          </tr>
             <tr>
            <td>connect_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds for establishing a connection to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>write_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>read_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Service, for grouping and filtering.</td>
          </tr>
               <tr>
            <td>client_certificate</td>
            <td>optional</td>
            <td>Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is client_certificate.id=<client_certificate id>. With JSON, use “"client_certificate":{"id":"<client_certificate id>"}.</td>
          </tr>
               <tr>
            <td>url</td>
            <td>required</td>
            <td>Shorthand attribute to set protocol, host, port and path at once. This attribute is write-only (the Admin API never “returns” the url).</td>
          </tr>
        </table>
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                host: httpbin.org
                name: httpbin-api
                retries: 5
                protocol: https
                port: 443
                path: /
                connect_timeout: 60000
                write_timeout: 60000
                read_timeout: 60000
                tags:
                  - user-level
                  - low-priority
                client_certificate: null
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: serviceNameOrId
          in: path
          schema:
            type: string
          required: true
          example: httpbin-api
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Fri, 13 Mar 2020 02:10:35 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '319'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '16'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "host": "httpbin.org",
                    "created_at": 1584064654,
                    "connect_timeout": 60000,
                    "id": "0022319a-a0b7-49d9-9eba-f2794f461de8",
                    "protocol": "https",
                    "name": "httpbin-api",
                    "read_timeout": 60000,
                    "port": 443,
                    "path": "/",
                    "updated_at": 1584065435,
                    "retries": 5,
                    "write_timeout": 60000,
                    "tags": [
                        "user-level",
                        "low-priority"
                    ],
                    "client_certificate": null
                }
    put:
      tags:
        - Service Object > Upsert Service
      summary: Create Or Update Service
      description: >-
        ## Create Or Update Service
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-service)


        * Inserts (or replaces) the Service under the requested resource with
        the definition specified in the body. The Service will be identified via
        the name or id attribute.

        * When the name or id attribute has the structure of a UUID, the Service
        being inserted/replaced will be identified by its id. Otherwise it will
        be identified by its name.

        * When creating a new Service without specifying id (neither in the URL
        nor in the body), then it will be auto-generated.

        * Notice that specifying a name in the URL and a different one in the
        request body is not allowed.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>service name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Service to update.</td>
          </tr>
        </table>


        ## Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>optional</td>
            <td>The Service name</td>
          </tr>
          <tr>
            <td>retries</td>
            <td>optional</td>
            <td>The number of retries to execute upon failure to proxy. Defaults to 5</td>
          </tr>
          <tr>
            <td>protocol</td>
            <td>required</td>
            <td>The protocol used to communicate with the upstream. Accepted values are: "grpc", "grpcs", "http", "https", "tcp", "tls". Defaults to "http"</td>
          </tr>
           <tr>
            <td>host</td>
            <td>required</td>
            <td>The host of the upstream server</td>
          </tr>
           <tr>
            <td>port</td>
            <td>required</td>
            <td>The upstream server port. Defaults to 80</td>
          </tr>
           <tr>
            <td>path</td>
            <td>optional</td>
            <td>The path to be used in requests to the upstream server.</td>
          </tr>
             <tr>
            <td>connect_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds for establishing a connection to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>write_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>read_timeout</td>
            <td>optional</td>
            <td>The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Defaults to 60000.</td>
          </tr>
             <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Service, for grouping and filtering.</td>
          </tr>
               <tr>
            <td>client_certificate</td>
            <td>optional</td>
            <td>Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is client_certificate.id=<client_certificate id>. With JSON, use “"client_certificate":{"id":"<client_certificate id>"}.</td>
          </tr>
               <tr>
            <td>url</td>
            <td>required</td>
            <td>Shorthand attribute to set protocol, host, port and path at once. This attribute is write-only (the Admin API never “returns” the url).</td>
          </tr>
        </table>
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                host: httpbin.org
                name: httpbin-api
                retries: 5
                protocol: https
                port: 443
                path: /
                connect_timeout: 60000
                write_timeout: 60000
                read_timeout: 60000
                tags: null
                client_certificate: null
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: serviceNameOrId
          in: path
          schema:
            type: string
          required: true
          example: httpbin-api
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Sun, 08 Mar 2020 01:25:47 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '294'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '11'
          content:
            text/plain:
              schema:
                type: string
              example: "{\r\n    \"host\": \"httpbin.org\",\r\n    \"created_at\": 1583630747,\r\n    \"connect_timeout\": 60000,\r\n    \"id\": \"c8b8f724-7e73-4df6-b1a8-8df19642d388\",\r\n    \"protocol\": \"https\",\r\n    \"name\": \"httpbin-api\",\r\n    \"read_timeout\": 60000,\r\n    \"port\": 443,\r\n    \"path\": \"/\",\r\n    \"updated_at\": 1583630747,\r\n    \"retries\": 5,\r\n    \"write_timeout\": 60000,\r\n    \"tags\": null,\r\n    \"client_certificate\": null\r\n}"
        '400':
          description: Bad Request
          headers:
            Date:
              schema:
                type: string
                example: Sun, 08 Mar 2020 01:20:52 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '330'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '1'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "message": "3 schema violations (host: required field missing; path: should start with: /; protocol: expected one of: grpc, grpcs, http, https, tcp, tls)",
                    "name": "schema violation",
                    "fields": {
                        "host": "required field missing",
                        "path": "should start with: /",
                        "protocol": "expected one of: grpc, grpcs, http, https, tcp, tls"
                    },
                    "code": 2
                }
  /services/{ServiceNameOrID}:
    delete:
      tags:
        - Service Object > Delete Service
      summary: Delete Service
      description: >-
        ## Delete Service
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-service-1)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>Service name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Service to delete</td>
          </tr>
        </table>
      parameters:
        - name: ServiceNameOrID
          in: path
          schema:
            type: string
          required: true
      responses:
        '204':
          description: No Content
          headers:
            Date:
              schema:
                type: string
                example: Fri, 13 Mar 2020 01:57:04 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '11'
          content:
            text/plain:
              schema:
                type: string
              example: null
        '400':
          description: Bad Request
          headers:
            Date:
              schema:
                type: string
                example: Fri, 13 Mar 2020 01:55:50 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '152'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '8'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "message": "an existing 'routes' entity references this 'services' entity",
                    "name": "foreign key violation",
                    "fields": {
                        "@referenced_by": "routes"
                    },
                    "code": 4
                }
  /consumers:
    post:
      tags:
        - Consumer Object > Add Consumer
      summary: Create Consumer
      description: >-
        ## Create Consumer
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-consumer)



        ## Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>username</td>
            <td>semi-optional</td>
            <td>The unique username of the consumer. You must send either this field or custom_id with the request.</td>
          </tr>
          <tr>
            <td>custom_id</td>
            <td>semi-optional</td>
            <td>Field for storing an existing unique ID for the consumer - useful for mapping Kong with users in your existing database. You must send either this field or username with the request.</td>
          </tr>
           <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Consumer, for grouping and filtering.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\r\n    \"username\": \"my-username\",\r\n    \"custom_id\":
                \"my-custom-id\",\r\n    \"tags\": [\"user-level\",
                \"low-priority\"]\r\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 05:32:53 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '158'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '11'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "custom_id": "my-custom-id",
                    "created_at": 1583991173,
                    "id": "626169e4-6cd7-4952-85b1-3fda70fd5333",
                    "tags": [
                        "user-level",
                        "low-priority"
                    ],
                    "username": "my-username"
                }
    get:
      tags:
        - Consumer Object > List Consumers
      summary: List All Consumers
      description: >-
        ## List All Consumers
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-all-consumers)
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 01:21:59 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '23'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '2'
          content:
            text/plain:
              schema:
                type: string
              examples:
                example-0:
                  summary: List All Routes
                  value: "{\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"a9daa3ba-8186-4a0d-96e8-00d80ce7240b\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"updated_at\": 1422386534,\n\t\t\t\"name\": \"my-route\",\n\t\t\t\"protocols\": [\n\t\t\t\t\"http\",\n\t\t\t\t\"https\"\n\t\t\t],\n\t\t\t\"methods\": [\n\t\t\t\t\"GET\",\n\t\t\t\t\"POST\"\n\t\t\t],\n\t\t\t\"hosts\": [\n\t\t\t\t\"example.com\",\n\t\t\t\t\"foo.test\"\n\t\t\t],\n\t\t\t\"paths\": [\n\t\t\t\t\"/foo\",\n\t\t\t\t\"/bar\"\n\t\t\t],\n\t\t\t\"headers\": {\n\t\t\t\t\"x-another-header\": [\n\t\t\t\t\t\"bla\"\n\t\t\t\t],\n\t\t\t\t\"x-my-header\": [\n\t\t\t\t\t\"foo\",\n\t\t\t\t\t\"bar\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"https_redirect_status_code\": 426,\n\t\t\t\"regex_priority\": 0,\n\t\t\t\"strip_path\": true,\n\t\t\t\"path_handling\": \"v0\",\n\t\t\t\"preserve_host\": false,\n\t\t\t\"tags\": [\n\t\t\t\t\"user-level\",\n\t\t\t\t\"low-priority\"\n\t\t\t],\n\t\t\t\"service\": {\n\t\t\t\t\"id\": \"127dfc88-ed57-45bf-b77a-a9d3a152ad31\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"9aa116fd-ef4a-4efa-89bf-a0b17c4be982\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"updated_at\": 1422386534,\n\t\t\t\"name\": \"my-route\",\n\t\t\t\"protocols\": [\n\t\t\t\t\"tcp\",\n\t\t\t\t\"tls\"\n\t\t\t],\n\t\t\t\"https_redirect_status_code\": 426,\n\t\t\t\"regex_priority\": 0,\n\t\t\t\"strip_path\": true,\n\t\t\t\"path_handling\": \"v0\",\n\t\t\t\"preserve_host\": false,\n\t\t\t\"snis\": [\n\t\t\t\t\"foo.test\",\n\t\t\t\t\"example.com\"\n\t\t\t],\n\t\t\t\"sources\": [\n\t\t\t\t{\n\t\t\t\t\t\"ip\": \"10.1.0.0/16\",\n\t\t\t\t\t\"port\": 1234\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"ip\": \"10.2.2.2\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"port\": 9123\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"destinations\": [\n\t\t\t\t{\n\t\t\t\t\t\"ip\": \"10.1.0.0/16\",\n\t\t\t\t\t\"port\": 1234\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"ip\": \"10.2.2.2\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"port\": 9123\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"tags\": [\n\t\t\t\t\"admin\",\n\t\t\t\t\"high-priority\",\n\t\t\t\t\"critical\"\n\t\t\t],\n\t\t\t\"service\": {\n\t\t\t\t\"id\": \"ba641b07-e74a-430a-ab46-94b61e5ea66b\"\n\t\t\t}\n\t\t}\n\t],\n\t\"next\": \"http://localhost:8001/routes?offset=6378122c-a0a1-438d-a5c6-efabae9fb969\"\n}"
                example-1:
                  summary: List All Consumers
                  value: |-
                    {
                     "next": "http://localhost:8001/consumers?offset=6378122c-a0a1-438d-a5c6-efabae9fb969",
                     "data": [
                      {
                       "custom_id": "my-custom-id",
                       "created_at": 1583991173,
                       "id": "626169e4-6cd7-4952-85b1-3fda70fd5333",
                       "tags": [
                        "user-level",
                        "low-priority"
                       ],
                       "username": "my-username",
                       "updated_at": 96342876,
                       "name": "pariatur occaecat",
                       "protocols": [
                        "elit sunt",
                        "sit est",
                        "tempor id"
                       ],
                       "https_redirect_status_code": 7940952,
                       "regex_priority": -84514160,
                       "strip_path": false,
                       "path_handling": "commodo Excepteur anim officia",
                       "preserve_host": true,
                       "service": {
                        "id": "sunt est"
                       }
                      },
                      {
                       "custom_id": null,
                       "created_at": 1583991062,
                       "id": "67775de2-2f2e-4eb1-90c8-967490e7b6c5",
                       "tags": [
                        "ullamco magna",
                        "sint officia ullamco sit",
                        "deserunt consectetur",
                        "qui enim sit veniam"
                       ],
                       "username": "my-consumer",
                       "updated_at": 64497866,
                       "name": "occaecat incididunt qui aliqua comm",
                       "protocols": [
                        "eu elit",
                        "minim velit enim",
                        "est sit fugiat commodo"
                       ],
                       "https_redirect_status_code": -26417144,
                       "regex_priority": -51823528,
                       "strip_path": false,
                       "path_handling": "deserunt sit",
                       "preserve_host": false,
                       "service": {
                        "id": "esse"
                       }
                      }
                     ]
                    }
  /consumers/{consumerUsernameOrID}:
    get:
      tags:
        - Consumer Object > Retrieve Consumer
      summary: Retrieve Consumer
      description: >-
        ## Retrieve Consumer
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-consumer-1)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>consumer username or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the username of the Consumer to retrieve.</td>
          </tr>
        </table>
      parameters:
        - name: consumerUsernameOrID
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the username of the Consumer to retrieve.
          example: my-username
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 06:16:23 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '158'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '2'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "custom_id": "my-custom-id",
                    "created_at": 1583991173,
                    "id": "626169e4-6cd7-4952-85b1-3fda70fd5333",
                    "tags": [
                        "user-level",
                        "low-priority"
                    ],
                    "username": "my-username"
                }
        '404':
          description: Not Found
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 06:17:18 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '23'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '1'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "message": "Not found"
                }
  /plugins/{pluginId}/consumer:
    get:
      tags:
        - Consumer Object > Retrieve Consumer
      summary: Retrieve Consumer Associated to a Specific Plugin
      description: >-
        ## Retrieve Consumer Associated to a Specific Plugin
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-consumer-associated-to-a-specific-plugin)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>https://docs.konghq.com/2.0.x/admin-api/#retrieve-consumer-associated-to-a-specific-plugin</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the username of the Consumer to retrieve.</td>
          </tr>
        </table>
      parameters:
        - name: pluginId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the username of the Consumer to retrieve
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - Consumer Object > Update Consumer
      summary: Update Consumer Associated to a Specific Plugin
      description: >-
        ## Update Consumer Associated to a Specific Plugin
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-consumer-associated-to-a-specific-plugin)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>plugin id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Plugin associated to the Consumer to be updated.</td>
          </tr>
        </table>


        ## Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>username</td>
            <td>semi-optional</td>
            <td>The unique username of the consumer. You must send either this field or custom_id with the request.</td>
          </tr>
          <tr>
            <td>custom_id</td>
            <td>semi-optional</td>
            <td>Field for storing an existing unique ID for the consumer - useful for mapping Kong with users in your existing database. You must send either this field or username with the request.</td>
          </tr>
           <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Consumer, for grouping and filtering.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\r\n    \"username\": \"my-username\",\r\n    \"custom_id\":
                \"my-custom-id\",\r\n    \"tags\": [\"user-level\",
                \"low-priority\"]\r\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: pluginId
          in: path
          schema:
            type: string
          required: true
          description: >-
            The unique identifier of the Plugin associated to the Consumer to be
            updated.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Consumer Object > Update Or Create Consumer
      summary: Create Or Update Consumer Associated to a Specific Plugin
      description: >-
        ## Create Or Update Consumer Associated to a Specific Plugin
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-consumer-associated-to-a-specific-plugin)


        * Inserts (or replaces) the Consumer under the requested resource with
        the definition specified in the body. The Consumer will be identified
        via the username or id attribute.

        * When the username or id attribute has the structure of a UUID, the
        Consumer being inserted/replaced will be identified by its id. Otherwise
        it will be identified by its username.

        * When creating a new Consumer without specifying id (neither in the URL
        nor in the body), then it will be auto-generated.

        * Notice that specifying a username in the URL and a different one in
        the request body is not allowed.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>plugin id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Plugin associated to the Consumer to be created or updated.</td>
          </tr>
        </table>


        ## Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>username</td>
            <td>semi-optional</td>
            <td>The unique username of the consumer. You must send either this field or custom_id with the request.</td>
          </tr>
          <tr>
            <td>custom_id</td>
            <td>semi-optional</td>
            <td>Field for storing an existing unique ID for the consumer - useful for mapping Kong with users in your existing database. You must send either this field or username with the request.</td>
          </tr>
           <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Consumer, for grouping and filtering.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\r\n    \"username\": \"my-username1\",\r\n    \"custom_id\":
                \"my-custom-id1\",\r\n    \"tags\": [\"user-level\",
                \"low-priority\"]\r\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: pluginId
          in: path
          schema:
            type: string
          required: true
          description: >-
            The unique identifier of the Plugin associated to the Consumer to be
            created or updated.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /consumers/{consumerUsernameOrId}:
    patch:
      tags:
        - Consumer Object > Update Consumer
      summary: Update Consumer
      description: >-
        ## Update Consumer
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-consumer-1)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>consumer username or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the username of the Consumer to retrieve.</td>
          </tr>
        </table>


        ## Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>username</td>
            <td>semi-optional</td>
            <td>The unique username of the consumer. You must send either this field or custom_id with the request.</td>
          </tr>
          <tr>
            <td>custom_id</td>
            <td>semi-optional</td>
            <td>Field for storing an existing unique ID for the consumer - useful for mapping Kong with users in your existing database. You must send either this field or username with the request.</td>
          </tr>
           <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Consumer, for grouping and filtering.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\r\n    \"username\": \"my-username\",\r\n    \"custom_id\":
                \"my-custom-id\",\r\n    \"tags\": [\"user-level\",
                \"low-priority\"]\r\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: consumerUsernameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the username of the Consumer to retrieve
          example: my-username
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 06:27:20 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '158'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '11'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "custom_id": "my-custom-id",
                    "created_at": 1583991173,
                    "id": "626169e4-6cd7-4952-85b1-3fda70fd5333",
                    "tags": [
                        "user-level",
                        "low-priority"
                    ],
                    "username": "my-username"
                }
    put:
      tags:
        - Consumer Object > Update Or Create Consumer
      summary: Create Or Update Consumer
      description: >-
        ## Create Or Update Consumer
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-consumer)


        * Inserts (or replaces) the Consumer under the requested resource with
        the definition specified in the body. The Consumer will be identified
        via the username or id attribute.

        * When the username or id attribute has the structure of a UUID, the
        Consumer being inserted/replaced will be identified by its id. Otherwise
        it will be identified by its username.

        * When creating a new Consumer without specifying id (neither in the URL
        nor in the body), then it will be auto-generated.

        * Notice that specifying a username in the URL and a different one in
        the request body is not allowed.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>consumer username or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the username of the Consumer to retrieve.</td>
          </tr>
        </table>


        ## Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>username</td>
            <td>semi-optional</td>
            <td>The unique username of the consumer. You must send either this field or custom_id with the request.</td>
          </tr>
          <tr>
            <td>custom_id</td>
            <td>semi-optional</td>
            <td>Field for storing an existing unique ID for the consumer - useful for mapping Kong with users in your existing database. You must send either this field or username with the request.</td>
          </tr>
           <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Consumer, for grouping and filtering.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\r\n    \"username\": \"my-username1\",\r\n    \"custom_id\":
                \"my-custom-id1\",\r\n    \"tags\": [\"user-level\",
                \"low-priority\"]\r\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: consumerUsernameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the username of the Consumer to retrieve
          example: my-username1
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 06:37:32 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '160'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '7'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "custom_id": "my-custom-id1",
                    "created_at": 1583995052,
                    "id": "c883d8e7-0a33-4153-9d18-0741a3412125",
                    "tags": [
                        "user-level",
                        "low-priority"
                    ],
                    "username": "my-username1"
                }
        '409':
          description: Conflict
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 06:36:37 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '157'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '2'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "message": "UNIQUE violation detected on '{custom_id=\"my-custom-id\"}'",
                    "name": "unique constraint violation",
                    "fields": {
                        "custom_id": "my-custom-id"
                    },
                    "code": 5
                }
    delete:
      tags:
        - Consumer Object > Delete Consumer
      summary: Delete Consumer
      description: >-
        ## Delete Consumer
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-consumer-1)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>consumer username or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the username of the Consumer to delete.</td>
          </tr>
        </table>
      parameters:
        - name: consumerUsernameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the username of the Consumer to delete.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /routes:
    post:
      tags:
        - Route Object > Add Route
      summary: Create Route
      description: >-
        ## Create Route
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-route)


        * See also
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#route-object)


        ## Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>optional</td>
            <td>The Route name</td>
          </tr>
          <tr>
            <td>protocols</td>
            <td>required</td>
            <td>A list of the protocols this Route should allow. When set to ["https"], HTTP requests are answered with a request to upgrade to HTTPS. Defaults to ["http", "https"]</td>
          </tr>
           <tr>
            <td>methods</td>
            <td>semi-optional</td>
            <td>A list of HTTP methods that match this Route</td>
          </tr>
           <tr>
            <td>hosts</td>
            <td>semi-optional</td>
            <td>A list of domain names that match this Route. With form-encoded, the notation is hosts[]=example.com&hosts[]=foo.test. With JSON, use an Array.</td>
          </tr>
           <tr>
            <td>paths</td>
            <td>semi-optional</td>
            <td>A list of paths that match this Route. With form-encoded, the notation is paths[]=/foo&paths[]=/bar. With JSON, use an Array.</td>
          </tr>
             <tr>
            <td>headers</td>
            <td>semi-optional</td>
            <td>One or more lists of values indexed by header name that will cause this Route to match if present in the request. The Host header cannot be used with this attribute: hosts should be specified using the hosts attribute.</td>
          </tr>
             <tr>
            <td>https_redirect_status_code</td>
            <td>required</td>
            <td>The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is HTTP instead of HTTPS. Location header is injected by Kong if the field is set to 301, 302, 307 or 308. Accepted values are: 426, 301, 302, 307, 308. Defaults to 426.</td>
          </tr>
             <tr>
            <td>regex_priority</td>
            <td>optional</td>
            <td>A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same regex_priority, the older one (lowest created_at) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones). Defaults to 0.</td>
          </tr>
             <tr>
            <td>strip_path</td>
            <td>optional</td>
            <td>When matching a Route via one of the paths, strip the matching prefix from the upstream request URL. Defaults to true.</td>
          </tr>
               <tr>
            <td>path_handling</td>
            <td>optional</td>
            <td>Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior. Accepted values are: "v0", "v1". Defaults to "v0".</td>
          </tr>
               <tr>
            <td>preserve_host</td>
            <td>optional</td>
            <td>When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Service’s host.</td>
          </tr>
               <tr>
            <td>snis</td>
            <td>semi-optional</td>
            <td>A list of SNIs that match this Route when using stream routing.</td>
          </tr>
               <tr>
            <td>sources</td>
            <td>semi-optional</td>
            <td>A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.</td>
          </tr>
               <tr>
            <td>preserve_host</td>
            <td>optional</td>
            <td>When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Service’s host.</td>
          </tr>
               <tr>
            <td>destinations</td>
            <td>semi-optional</td>
            <td>A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.</td>
          </tr>
               <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Route, for grouping and filtering.</td>
          </tr>
               <tr>
            <td>service</td>
            <td>optional</td>
            <td>The Service this Route is associated to. This is where the Route proxies traffic to. With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “"service":{"id":"<service id>"} or "service":{"name":"<service name>"}</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n\t\"name\": \"httpbin-api\",\n\t\"url\":
                \"https://httpbin.org/\"\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 01:51:19 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '546'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '25'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "id": "875973fd-ba3f-4c7b-8301-e9263013e6d2",
                    "path_handling": "v0",
                    "paths": [
                        "/foo",
                        "/bar"
                    ],
                    "destinations": null,
                    "headers": {
                        "x-another-header": [
                            "bla"
                        ],
                        "x-my-header": [
                            "foo",
                            "bar"
                        ]
                    },
                    "protocols": [
                        "http",
                        "https"
                    ],
                    "methods": [
                        "GET",
                        "POST"
                    ],
                    "snis": null,
                    "service": {
                        "id": "c8b8f724-7e73-4df6-b1a8-8df19642d388"
                    },
                    "name": "my-route",
                    "strip_path": true,
                    "preserve_host": false,
                    "regex_priority": 0,
                    "updated_at": 1583977879,
                    "sources": null,
                    "hosts": [
                        "example.com",
                        "foo.test"
                    ],
                    "https_redirect_status_code": 426,
                    "tags": [
                        "user-level",
                        "low-priority"
                    ],
                    "created_at": 1583977879
                }
        '400':
          description: Bad Request
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 01:49:26 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '234'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '7'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "message": "the foreign key '{id=\"af8330d3-dbdc-48bd-b1be-55b98608834b\"}' does not reference an existing 'services' entity.",
                    "name": "foreign key violation",
                    "fields": {
                        "service": {
                            "id": "af8330d3-dbdc-48bd-b1be-55b98608834b"
                        }
                    },
                    "code": 4
                }
    get:
      tags:
        - Route Object > List Routes
      summary: List All Routes
      description: >-
        ## List All Routes
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-all-routes)
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 01:21:59 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '23'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '2'
          content:
            text/plain:
              schema:
                type: string
              example: "{\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"a9daa3ba-8186-4a0d-96e8-00d80ce7240b\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"updated_at\": 1422386534,\n\t\t\t\"name\": \"my-route\",\n\t\t\t\"protocols\": [\n\t\t\t\t\"http\",\n\t\t\t\t\"https\"\n\t\t\t],\n\t\t\t\"methods\": [\n\t\t\t\t\"GET\",\n\t\t\t\t\"POST\"\n\t\t\t],\n\t\t\t\"hosts\": [\n\t\t\t\t\"example.com\",\n\t\t\t\t\"foo.test\"\n\t\t\t],\n\t\t\t\"paths\": [\n\t\t\t\t\"/foo\",\n\t\t\t\t\"/bar\"\n\t\t\t],\n\t\t\t\"headers\": {\n\t\t\t\t\"x-another-header\": [\n\t\t\t\t\t\"bla\"\n\t\t\t\t],\n\t\t\t\t\"x-my-header\": [\n\t\t\t\t\t\"foo\",\n\t\t\t\t\t\"bar\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"https_redirect_status_code\": 426,\n\t\t\t\"regex_priority\": 0,\n\t\t\t\"strip_path\": true,\n\t\t\t\"path_handling\": \"v0\",\n\t\t\t\"preserve_host\": false,\n\t\t\t\"tags\": [\n\t\t\t\t\"user-level\",\n\t\t\t\t\"low-priority\"\n\t\t\t],\n\t\t\t\"service\": {\n\t\t\t\t\"id\": \"127dfc88-ed57-45bf-b77a-a9d3a152ad31\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"9aa116fd-ef4a-4efa-89bf-a0b17c4be982\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"updated_at\": 1422386534,\n\t\t\t\"name\": \"my-route\",\n\t\t\t\"protocols\": [\n\t\t\t\t\"tcp\",\n\t\t\t\t\"tls\"\n\t\t\t],\n\t\t\t\"https_redirect_status_code\": 426,\n\t\t\t\"regex_priority\": 0,\n\t\t\t\"strip_path\": true,\n\t\t\t\"path_handling\": \"v0\",\n\t\t\t\"preserve_host\": false,\n\t\t\t\"snis\": [\n\t\t\t\t\"foo.test\",\n\t\t\t\t\"example.com\"\n\t\t\t],\n\t\t\t\"sources\": [\n\t\t\t\t{\n\t\t\t\t\t\"ip\": \"10.1.0.0/16\",\n\t\t\t\t\t\"port\": 1234\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"ip\": \"10.2.2.2\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"port\": 9123\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"destinations\": [\n\t\t\t\t{\n\t\t\t\t\t\"ip\": \"10.1.0.0/16\",\n\t\t\t\t\t\"port\": 1234\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"ip\": \"10.2.2.2\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"port\": 9123\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"tags\": [\n\t\t\t\t\"admin\",\n\t\t\t\t\"high-priority\",\n\t\t\t\t\"critical\"\n\t\t\t],\n\t\t\t\"service\": {\n\t\t\t\t\"id\": \"ba641b07-e74a-430a-ab46-94b61e5ea66b\"\n\t\t\t}\n\t\t}\n\t],\n\t\"next\": \"http://localhost:8001/routes?offset=6378122c-a0a1-438d-a5c6-efabae9fb969\"\n}"
  /services/{serviceNameOrId}/routes:
    post:
      tags:
        - Route Object > Add Route
      summary: Create Route Associated to a Specific Service
      description: >-
        ## Create Route Associated to a Specific Service
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-route-associated-to-a-specific-service)


        * See also
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#route-object)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>service name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name attribute of the Service that should be associated to the newly-created Route.</td>
          </tr>
        </table>


        ## Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>optional</td>
            <td>The Route name</td>
          </tr>
          <tr>
            <td>protocols</td>
            <td>required</td>
            <td>A list of the protocols this Route should allow. When set to ["https"], HTTP requests are answered with a request to upgrade to HTTPS. Defaults to ["http", "https"]</td>
          </tr>
           <tr>
            <td>methods</td>
            <td>semi-optional</td>
            <td>A list of HTTP methods that match this Route</td>
          </tr>
           <tr>
            <td>hosts</td>
            <td>semi-optional</td>
            <td>A list of domain names that match this Route. With form-encoded, the notation is hosts[]=example.com&hosts[]=foo.test. With JSON, use an Array.</td>
          </tr>
           <tr>
            <td>paths</td>
            <td>semi-optional</td>
            <td>A list of paths that match this Route. With form-encoded, the notation is paths[]=/foo&paths[]=/bar. With JSON, use an Array.</td>
          </tr>
             <tr>
            <td>headers</td>
            <td>semi-optional</td>
            <td>One or more lists of values indexed by header name that will cause this Route to match if present in the request. The Host header cannot be used with this attribute: hosts should be specified using the hosts attribute.</td>
          </tr>
             <tr>
            <td>https_redirect_status_code</td>
            <td>required</td>
            <td>The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is HTTP instead of HTTPS. Location header is injected by Kong if the field is set to 301, 302, 307 or 308. Accepted values are: 426, 301, 302, 307, 308. Defaults to 426.</td>
          </tr>
             <tr>
            <td>regex_priority</td>
            <td>optional</td>
            <td>A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same regex_priority, the older one (lowest created_at) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones). Defaults to 0.</td>
          </tr>
             <tr>
            <td>strip_path</td>
            <td>optional</td>
            <td>When matching a Route via one of the paths, strip the matching prefix from the upstream request URL. Defaults to true.</td>
          </tr>
               <tr>
            <td>path_handling</td>
            <td>optional</td>
            <td>Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior. Accepted values are: "v0", "v1". Defaults to "v0".</td>
          </tr>
               <tr>
            <td>preserve_host</td>
            <td>optional</td>
            <td>When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Service’s host.</td>
          </tr>
               <tr>
            <td>snis</td>
            <td>semi-optional</td>
            <td>A list of SNIs that match this Route when using stream routing.</td>
          </tr>
               <tr>
            <td>sources</td>
            <td>semi-optional</td>
            <td>A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.</td>
          </tr>
               <tr>
            <td>preserve_host</td>
            <td>optional</td>
            <td>When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Service’s host.</td>
          </tr>
               <tr>
            <td>destinations</td>
            <td>semi-optional</td>
            <td>A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.</td>
          </tr>
               <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Route, for grouping and filtering.</td>
          </tr>
               <tr>
            <td>service</td>
            <td>optional</td>
            <td>The Service this Route is associated to. This is where the Route proxies traffic to. With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “"service":{"id":"<service id>"} or "service":{"name":"<service name>"}</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n\t\"name\": \"httpbin-api\",\n\t\"url\":
                \"https://httpbin.org/\"\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: serviceNameOrId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Route Object > List Routes
      summary: List Routes Associated to a Specific Service
      description: >-
        ## List Routes Associated to a Specific Service
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-routes-associated-to-a-specific-service)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>service name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name attribute of the Service whose Routes are to be retrieved. When using this endpoint, only Routes associated to the specified Service will be listed.</td>
          </tr>
      parameters:
        - name: serviceNameOrId
          in: path
          schema:
            type: string
          required: true
          description: >-
            The unique identifier or the name attribute of the Service whose
            Routes are to be retrieved. When using this endpoint, only Routes
            associated to the specified Service will be listed.
          example: httpbin-api
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 01:53:37 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '569'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '3'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "next": null,
                    "data": [
                        {
                            "id": "875973fd-ba3f-4c7b-8301-e9263013e6d2",
                            "path_handling": "v0",
                            "paths": [
                                "/foo",
                                "/bar"
                            ],
                            "destinations": null,
                            "headers": {
                                "x-another-header": [
                                    "bla"
                                ],
                                "x-my-header": [
                                    "foo",
                                    "bar"
                                ]
                            },
                            "protocols": [
                                "http",
                                "https"
                            ],
                            "methods": [
                                "GET",
                                "POST"
                            ],
                            "snis": null,
                            "service": {
                                "id": "c8b8f724-7e73-4df6-b1a8-8df19642d388"
                            },
                            "name": "my-route",
                            "strip_path": true,
                            "preserve_host": false,
                            "regex_priority": 0,
                            "updated_at": 1583977879,
                            "sources": null,
                            "hosts": [
                                "example.com",
                                "foo.test"
                            ],
                            "https_redirect_status_code": 426,
                            "tags": [
                                "user-level",
                                "low-priority"
                            ],
                            "created_at": 1583977879
                        }
                    ]
                }
  /routes/{routeNameOrID}:
    get:
      tags:
        - Route Object > Retrieve Route
      summary: Retrieve Route
      description: >-
        ## Retrieve Route
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-route-1)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>Route name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Route to retrieve.</td>
          </tr>
        </table>
      parameters:
        - name: routeNameOrID
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the Route to retrieve.
          example: my-route
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 01:55:07 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '546'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '1'
          content:
            text/plain:
              schema:
                type: string
              examples:
                example-0:
                  summary: Retrieve Route
                  value: |-
                    {
                        "id": "875973fd-ba3f-4c7b-8301-e9263013e6d2",
                        "path_handling": "v0",
                        "paths": [
                            "/foo",
                            "/bar"
                        ],
                        "destinations": null,
                        "headers": {
                            "x-another-header": [
                                "bla"
                            ],
                            "x-my-header": [
                                "foo",
                                "bar"
                            ]
                        },
                        "protocols": [
                            "http",
                            "https"
                        ],
                        "methods": [
                            "GET",
                            "POST"
                        ],
                        "snis": null,
                        "service": {
                            "id": "c8b8f724-7e73-4df6-b1a8-8df19642d388"
                        },
                        "name": "my-route",
                        "strip_path": true,
                        "preserve_host": false,
                        "regex_priority": 0,
                        "updated_at": 1583977879,
                        "sources": null,
                        "hosts": [
                            "example.com",
                            "foo.test"
                        ],
                        "https_redirect_status_code": 426,
                        "tags": [
                            "user-level",
                            "low-priority"
                        ],
                        "created_at": 1583977879
                    }
                example-1:
                  summary: Retrieve Route
                  value: |-
                    {
                     "id": "d35165e2-d03e-461a-bdeb-dad0a112abfe",
                     "created_at": 1422386534,
                     "updated_at": 1422386534,
                     "name": "my-route",
                     "protocols": [
                      "http",
                      "https"
                     ],
                     "methods": [
                      "GET",
                      "POST"
                     ],
                     "hosts": [
                      "example.com",
                      "foo.test"
                     ],
                     "paths": [
                      "/foo",
                      "/bar"
                     ],
                     "headers": {
                      "x-another-header": [
                       "bla"
                      ],
                      "x-my-header": [
                       "foo",
                       "bar"
                      ]
                     },
                     "https_redirect_status_code": 426,
                     "regex_priority": 0,
                     "strip_path": true,
                     "path_handling": "v0",
                     "preserve_host": false,
                     "tags": [
                      "user-level",
                      "low-priority"
                     ],
                     "service": {
                      "id": "af8330d3-dbdc-48bd-b1be-55b98608834b"
                     },
                     "destinations": "Excepteur magna",
                     "snis": "eu fugiat",
                     "sources": "irure"
                    }
        '404':
          description: Not Found
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 01:48:17 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '23'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '1'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "message": "Not found"
                }
  /services/{serviceNameOrId}/routes/{routeNameOrId}:
    get:
      tags:
        - Route Object > Retrieve Route
      summary: Retrieve Route Associated to a Specific Service
      description: >-
        ## Retrieve Route Associated to a Specific Service
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-route-associated-to-a-specific-service)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>Service name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Service to retrieve</td>
          </tr>
          <tr>
            <td>Route name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Route to retrieve.</td>
          </tr>
        </table>
      parameters:
        - name: serviceNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the Service to retrieve.
          example: httpbin-api
        - name: routeNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the Route to retrieve.
          example: my-route
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 02:22:24 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '546'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '4'
          content:
            text/plain:
              schema:
                type: string
              examples:
                example-0:
                  summary: Retrieve Route Associated to a Specific Service
                  value: |-
                    {
                        "id": "875973fd-ba3f-4c7b-8301-e9263013e6d2",
                        "path_handling": "v0",
                        "paths": [
                            "/foo",
                            "/bar"
                        ],
                        "destinations": null,
                        "headers": {
                            "x-another-header": [
                                "bla"
                            ],
                            "x-my-header": [
                                "foo",
                                "bar"
                            ]
                        },
                        "protocols": [
                            "http",
                            "https"
                        ],
                        "methods": [
                            "GET",
                            "POST"
                        ],
                        "snis": null,
                        "service": {
                            "id": "c8b8f724-7e73-4df6-b1a8-8df19642d388"
                        },
                        "name": "my-route",
                        "strip_path": true,
                        "preserve_host": false,
                        "regex_priority": 0,
                        "updated_at": 1583977879,
                        "sources": null,
                        "hosts": [
                            "example.com",
                            "foo.test"
                        ],
                        "https_redirect_status_code": 426,
                        "tags": [
                            "user-level",
                            "low-priority"
                        ],
                        "created_at": 1583977879
                    }
                example-1:
                  summary: Retrieve Route
                  value: |-
                    {
                        "id": "875973fd-ba3f-4c7b-8301-e9263013e6d2",
                        "path_handling": "v0",
                        "paths": [
                            "/foo",
                            "/bar"
                        ],
                        "destinations": null,
                        "headers": {
                            "x-another-header": [
                                "bla"
                            ],
                            "x-my-header": [
                                "foo",
                                "bar"
                            ]
                        },
                        "protocols": [
                            "http",
                            "https"
                        ],
                        "methods": [
                            "GET",
                            "POST"
                        ],
                        "snis": null,
                        "service": {
                            "id": "c8b8f724-7e73-4df6-b1a8-8df19642d388"
                        },
                        "name": "my-route",
                        "strip_path": true,
                        "preserve_host": false,
                        "regex_priority": 0,
                        "updated_at": 1583977879,
                        "sources": null,
                        "hosts": [
                            "example.com",
                            "foo.test"
                        ],
                        "https_redirect_status_code": 426,
                        "tags": [
                            "user-level",
                            "low-priority"
                        ],
                        "created_at": 1583977879
                    }
                example-2:
                  summary: Retrieve Route
                  value: |-
                    {
                     "id": "d35165e2-d03e-461a-bdeb-dad0a112abfe",
                     "created_at": 1422386534,
                     "updated_at": 1422386534,
                     "name": "my-route",
                     "protocols": [
                      "http",
                      "https"
                     ],
                     "methods": [
                      "GET",
                      "POST"
                     ],
                     "hosts": [
                      "example.com",
                      "foo.test"
                     ],
                     "paths": [
                      "/foo",
                      "/bar"
                     ],
                     "headers": {
                      "x-another-header": [
                       "bla"
                      ],
                      "x-my-header": [
                       "foo",
                       "bar"
                      ]
                     },
                     "https_redirect_status_code": 426,
                     "regex_priority": 0,
                     "strip_path": true,
                     "path_handling": "v0",
                     "preserve_host": false,
                     "tags": [
                      "user-level",
                      "low-priority"
                     ],
                     "service": {
                      "id": "af8330d3-dbdc-48bd-b1be-55b98608834b"
                     },
                     "destinations": "anim id esse",
                     "snis": "in magna",
                     "sources": "aliquip anim"
                    }
        '404':
          description: Not Found
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 01:48:17 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '23'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '1'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "message": "Not found"
                }
    put:
      tags:
        - Route Object > Update Or Create Route
      summary: Create Or Update Route Associated to a Specific Service
      description: >-
        ## Create Or Update Route Associated to a Specific Service
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-route-associated-to-a-specific-service)


        * Inserts (or replaces) the Route under the requested resource with the
        definition specified in the body. The Route will be identified via the
        name or id attribute.

        * When the name or id attribute has the structure of a UUID, the Route
        being inserted/replaced will be identified by its id. Otherwise it will
        be identified by its name.

        * When creating a new Route without specifying id (neither in the URL
        nor in the body), then it will be auto-generated.

        *Notice that specifying a name in the URL and a different one in the
        request body is not allowed.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>service name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Service to create or update.</td>
          </tr>
          <tr>
            <td>route name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Route to create or update.</td>
          </tr>
        </table>


        ## Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>optional</td>
            <td>The Route name</td>
          </tr>
          <tr>
            <td>protocols</td>
            <td>required</td>
            <td>A list of the protocols this Route should allow. When set to ["https"], HTTP requests are answered with a request to upgrade to HTTPS. Defaults to ["http", "https"].</td>
          </tr>
          <tr>
            <td>methods</td>
            <td>semi-optional</td>
            <td>A list of HTTP methods that match this Route.</td>
          </tr>
           <tr>
            <td>hosts</td>
            <td>semi-optional</td>
            <td>A list of domain names that match this Route. With form-encoded, the notation is hosts[]=example.com&hosts[]=foo.test. With JSON, use an Array.</td>
          </tr>
           <tr>
            <td>paths</td>
            <td>semi-optional</td>
            <td>A list of paths that match this Route. With form-encoded, the notation is paths[]=/foo&paths[]=/bar. With JSON, use an Array.</td>
          </tr>
             <tr>
            <td>headers</td>
            <td>semi-optional</td>
            <td>One or more lists of values indexed by header name that will cause this Route to match if present in the request. The Host header cannot be used with this attribute: hosts should be specified using the hosts attribute.</td>
          </tr>
             <tr>
            <td>https_redirect_status_code</td>
            <td>required</td>
            <td>The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is HTTP instead of HTTPS. Location header is injected by Kong if the field is set to 301, 302, 307 or 308. Accepted values are: 426, 301, 302, 307, 308. Defaults to 426.</td>
          </tr>
             <tr>
            <td>regex_priority</td>
            <td>optional</td>
            <td>A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same regex_priority, the older one (lowest created_at) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones). Defaults to 0.</td>
          </tr>
             <tr>
            <td>strip_path</td>
            <td>optional</td>
            <td>When matching a Route via one of the paths, strip the matching prefix from the upstream request URL. Defaults to true.</td>
          </tr>
               <tr>
            <td>path_handling</td>
            <td>optional</td>
            <td>Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior. Accepted values are: "v0", "v1". Defaults to "v0".</td>
          </tr>
               <tr>
            <td>preserve_host</td>
            <td>optional</td>
            <td>When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Service’s host.</td>
          </tr>
                 <tr>
            <td>preserve_host</td>
            <td>optional</td>
            <td>When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Service’s host.</td>
          </tr>
                <tr>
            <td>snis</td>
            <td>semi-optional</td>
            <td>A list of SNIs that match this Route when using stream routing.</td>
          </tr>
                <tr>
            <td>sources</td>
            <td>semi-optional</td>
            <td>A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.</td>
          </tr>
                <tr>
            <td>destinations</td>
            <td>semi-optional</td>
            <td>A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.</td>
          </tr>
                 <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Route, for grouping and filtering.</td>
          </tr>
                <tr>
            <td>service</td>
            <td>optional</td>
            <td>The Service this Route is associated to. This is where the Route proxies traffic to. With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “"service":{"id":"<service id>"} or "service":{"name":"<service name>"}.</td>
          </tr>
        </table>


        ## Response

        * HTTP 201 Created or HTTP 200 OK

        * See POST and PATCH responses.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                host: httpbin.org
                name: httpbin-api
                retries: 5
                protocol: https
                port: 443
                path: /
                connect_timeout: 60000
                write_timeout: 60000
                read_timeout: 60000
                tags: null
                client_certificate: null
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: serviceNameOrId
          in: path
          schema:
            type: string
          required: true
          description: >-
            The unique identifier or the name of the Service to create or
            update.
        - name: routeNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the Route to create or update.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Route Object > Delete Route
      summary: Delete Route Associated to a Specific Service
      description: >-
        ## Delete Service Associated to a Specific Certificate
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-service-associated-to-a-specific-certificate)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>service name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Service to delete.</td>
          </tr>
          <tr>
            <td>route name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Route to delete.</td>
          </tr>
        </table>
      parameters:
        - name: serviceNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the Service to delete.
        - name: routeNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the Route to delete.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /plugins/{pluginId}/route:
    get:
      tags:
        - Route Object > Retrieve Route
      summary: Retrieve Route Associated to a Specific Plugin
      description: >-
        ## Retrieve Route Associated to a Specific Plugin
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-route-associated-to-a-specific-plugin)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>Plugin id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Plugin associated to the Route to be retrieved.</td>
          </tr>
        </table>
      parameters:
        - name: pluginId
          in: path
          schema:
            type: string
          required: true
          description: >-
            The unique identifier of the Plugin associated to the Route to be
            retrieved.
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 02:22:24 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '546'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '4'
          content:
            text/plain:
              schema:
                type: string
              examples:
                example-0:
                  summary: Retrieve Route Associated to a Specific Service
                  value: |-
                    {
                        "id": "875973fd-ba3f-4c7b-8301-e9263013e6d2",
                        "path_handling": "v0",
                        "paths": [
                            "/foo",
                            "/bar"
                        ],
                        "destinations": null,
                        "headers": {
                            "x-another-header": [
                                "bla"
                            ],
                            "x-my-header": [
                                "foo",
                                "bar"
                            ]
                        },
                        "protocols": [
                            "http",
                            "https"
                        ],
                        "methods": [
                            "GET",
                            "POST"
                        ],
                        "snis": null,
                        "service": {
                            "id": "c8b8f724-7e73-4df6-b1a8-8df19642d388"
                        },
                        "name": "my-route",
                        "strip_path": true,
                        "preserve_host": false,
                        "regex_priority": 0,
                        "updated_at": 1583977879,
                        "sources": null,
                        "hosts": [
                            "example.com",
                            "foo.test"
                        ],
                        "https_redirect_status_code": 426,
                        "tags": [
                            "user-level",
                            "low-priority"
                        ],
                        "created_at": 1583977879
                    }
                example-1:
                  summary: Retrieve Route
                  value: |-
                    {
                        "id": "875973fd-ba3f-4c7b-8301-e9263013e6d2",
                        "path_handling": "v0",
                        "paths": [
                            "/foo",
                            "/bar"
                        ],
                        "destinations": null,
                        "headers": {
                            "x-another-header": [
                                "bla"
                            ],
                            "x-my-header": [
                                "foo",
                                "bar"
                            ]
                        },
                        "protocols": [
                            "http",
                            "https"
                        ],
                        "methods": [
                            "GET",
                            "POST"
                        ],
                        "snis": null,
                        "service": {
                            "id": "c8b8f724-7e73-4df6-b1a8-8df19642d388"
                        },
                        "name": "my-route",
                        "strip_path": true,
                        "preserve_host": false,
                        "regex_priority": 0,
                        "updated_at": 1583977879,
                        "sources": null,
                        "hosts": [
                            "example.com",
                            "foo.test"
                        ],
                        "https_redirect_status_code": 426,
                        "tags": [
                            "user-level",
                            "low-priority"
                        ],
                        "created_at": 1583977879
                    }
                example-2:
                  summary: Retrieve Route
                  value: |-
                    {
                     "id": "d35165e2-d03e-461a-bdeb-dad0a112abfe",
                     "created_at": 1422386534,
                     "updated_at": 1422386534,
                     "name": "my-route",
                     "protocols": [
                      "http",
                      "https"
                     ],
                     "methods": [
                      "GET",
                      "POST"
                     ],
                     "hosts": [
                      "example.com",
                      "foo.test"
                     ],
                     "paths": [
                      "/foo",
                      "/bar"
                     ],
                     "headers": {
                      "x-another-header": [
                       "bla"
                      ],
                      "x-my-header": [
                       "foo",
                       "bar"
                      ]
                     },
                     "https_redirect_status_code": 426,
                     "regex_priority": 0,
                     "strip_path": true,
                     "path_handling": "v0",
                     "preserve_host": false,
                     "tags": [
                      "user-level",
                      "low-priority"
                     ],
                     "service": {
                      "id": "af8330d3-dbdc-48bd-b1be-55b98608834b"
                     },
                     "destinations": "anim id esse",
                     "snis": "in magna",
                     "sources": "aliquip anim"
                    }
        '404':
          description: Not Found
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 01:48:17 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '23'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '1'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "message": "Not found"
                }
    put:
      tags:
        - Route Object > Update Or Create Route
      summary: Create Or Update Route Associated to a Specific Plugin
      description: >-
        ## Create Or Update Route Associated to a Specific Plugin
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-route-associated-to-a-specific-plugin)


        * Inserts (or replaces) the Route under the requested resource with the
        definition specified in the body. The Route will be identified via the
        name or id attribute.

        * When the name or id attribute has the structure of a UUID, the Route
        being inserted/replaced will be identified by its id. Otherwise it will
        be identified by its name.

        * When creating a new Route without specifying id (neither in the URL
        nor in the body), then it will be auto-generated.

        *Notice that specifying a name in the URL and a different one in the
        request body is not allowed.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>plugin id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Plugin associated to the Route to be created or updated.</td>
          </tr>
        </table>


        ## Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>optional</td>
            <td>The Route name</td>
          </tr>
          <tr>
            <td>protocols</td>
            <td>required</td>
            <td>A list of the protocols this Route should allow. When set to ["https"], HTTP requests are answered with a request to upgrade to HTTPS. Defaults to ["http", "https"].</td>
          </tr>
          <tr>
            <td>methods</td>
            <td>semi-optional</td>
            <td>A list of HTTP methods that match this Route.</td>
          </tr>
           <tr>
            <td>hosts</td>
            <td>semi-optional</td>
            <td>A list of domain names that match this Route. With form-encoded, the notation is hosts[]=example.com&hosts[]=foo.test. With JSON, use an Array.</td>
          </tr>
           <tr>
            <td>paths</td>
            <td>semi-optional</td>
            <td>A list of paths that match this Route. With form-encoded, the notation is paths[]=/foo&paths[]=/bar. With JSON, use an Array.</td>
          </tr>
             <tr>
            <td>headers</td>
            <td>semi-optional</td>
            <td>One or more lists of values indexed by header name that will cause this Route to match if present in the request. The Host header cannot be used with this attribute: hosts should be specified using the hosts attribute.</td>
          </tr>
             <tr>
            <td>https_redirect_status_code</td>
            <td>required</td>
            <td>The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is HTTP instead of HTTPS. Location header is injected by Kong if the field is set to 301, 302, 307 or 308. Accepted values are: 426, 301, 302, 307, 308. Defaults to 426.</td>
          </tr>
             <tr>
            <td>regex_priority</td>
            <td>optional</td>
            <td>A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same regex_priority, the older one (lowest created_at) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones). Defaults to 0.</td>
          </tr>
             <tr>
            <td>strip_path</td>
            <td>optional</td>
            <td>When matching a Route via one of the paths, strip the matching prefix from the upstream request URL. Defaults to true.</td>
          </tr>
               <tr>
            <td>path_handling</td>
            <td>optional</td>
            <td>Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior. Accepted values are: "v0", "v1". Defaults to "v0".</td>
          </tr>
               <tr>
            <td>preserve_host</td>
            <td>optional</td>
            <td>When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Service’s host.</td>
          </tr>
                 <tr>
            <td>preserve_host</td>
            <td>optional</td>
            <td>When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Service’s host.</td>
          </tr>
                <tr>
            <td>snis</td>
            <td>semi-optional</td>
            <td>A list of SNIs that match this Route when using stream routing.</td>
          </tr>
                <tr>
            <td>sources</td>
            <td>semi-optional</td>
            <td>A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.</td>
          </tr>
                <tr>
            <td>destinations</td>
            <td>semi-optional</td>
            <td>A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.</td>
          </tr>
                 <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Route, for grouping and filtering.</td>
          </tr>
                <tr>
            <td>service</td>
            <td>optional</td>
            <td>The Service this Route is associated to. This is where the Route proxies traffic to. With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “"service":{"id":"<service id>"} or "service":{"name":"<service name>"}.</td>
          </tr>
        </table>


        ## Response

        * HTTP 201 Created or HTTP 200 OK

        * See POST and PATCH responses.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                host: httpbin.org
                name: httpbin-api
                retries: 5
                protocol: https
                port: 443
                path: /
                connect_timeout: 60000
                write_timeout: 60000
                read_timeout: 60000
                tags: null
                client_certificate: null
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: pluginId
          in: path
          schema:
            type: string
          required: true
          description: >-
            The unique identifier of the Plugin associated to the Route to be
            created or updated.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /routes/{routeNameOrId}:
    patch:
      tags:
        - Route Object > Update Route
      summary: Update Route
      description: >-
        ## Update Service
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-route-1)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>route name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Route to update.</td>
          </tr>
        </table>


        ## Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>optional</td>
            <td>The Service name</td>
          </tr>
          <tr>
            <td>protocols</td>
            <td>required</td>
            <td>A list of the protocols this Route should allow. When set to ["https"], HTTP requests are answered with a request to upgrade to HTTPS. Defaults to ["http", "https"].</td>
          </tr>
          <tr>
            <td>methods</td>
            <td>semi-optional</td>
            <td>A list of HTTP methods that match this Route.</td>
          </tr>
           <tr>
            <td>hosts</td>
            <td>semi-optional</td>
            <td>A list of domain names that match this Route. With form-encoded, the notation is hosts[]=example.com&hosts[]=foo.test. With JSON, use an Array.</td>
          </tr>
           <tr>
            <td>paths</td>
            <td>semi-optional</td>
            <td>A list of paths that match this Route. With form-encoded, the notation is paths[]=/foo&paths[]=/bar. With JSON, use an Array.</td>
          </tr>
             <tr>
            <td>headers</td>
            <td>semi-optional</td>
            <td>One or more lists of values indexed by header name that will cause this Route to match if present in the request. The Host header cannot be used with this attribute: hosts should be specified using the hosts attribute.</td>
          </tr>
             <tr>
            <td>https_redirect_status_code</td>
            <td>required</td>
            <td>The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is HTTP instead of HTTPS. Location header is injected by Kong if the field is set to 301, 302, 307 or 308. Accepted values are: 426, 301, 302, 307, 308. Defaults to 426.</td>
          </tr>
             <tr>
            <td>regex_priority</td>
            <td>optional</td>
            <td>A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same regex_priority, the older one (lowest created_at) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones). Defaults to 0.</td>
          </tr>
             <tr>
            <td>strip_path</td>
            <td>optional</td>
            <td>When matching a Route via one of the paths, strip the matching prefix from the upstream request URL. Defaults to true.</td>
          </tr>
               <tr>
            <td>path_handling</td>
            <td>optional</td>
            <td>Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior. Accepted values are: "v0", "v1". Defaults to "v0".</td>
          </tr>
               <tr>
            <td>preserve_host</td>
            <td>optional</td>
            <td>When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Service’s host.</td>
          </tr>
                 <tr>
            <td>preserve_host</td>
            <td>optional</td>
            <td>When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Service’s host.</td>
          </tr>
                <tr>
            <td>snis</td>
            <td>semi-optional</td>
            <td>A list of SNIs that match this Route when using stream routing.</td>
          </tr>
                <tr>
            <td>sources</td>
            <td>semi-optional</td>
            <td>A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.</td>
          </tr>
                <tr>
            <td>destinations</td>
            <td>semi-optional</td>
            <td>A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.</td>
          </tr>
                 <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Route, for grouping and filtering.</td>
          </tr>
                <tr>
            <td>service</td>
            <td>optional</td>
            <td>The Service this Route is associated to. This is where the Route proxies traffic to. With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “"service":{"id":"<service id>"} or "service":{"name":"<service name>"}.</td>
          </tr>
        </table>
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                host: httpbin.org
                name: httpbin-api
                retries: 5
                protocol: https
                port: 443
                path: /
                connect_timeout: 60000
                write_timeout: 60000
                read_timeout: 60000
                tags: null
                client_certificate: null
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: routeNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the Route to update.
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Sun, 08 Mar 2020 01:25:47 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '294'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '11'
          content:
            text/plain:
              schema:
                type: string
              example: "{\r\n    \"host\": \"httpbin.org\",\r\n    \"created_at\": 1583630747,\r\n    \"connect_timeout\": 60000,\r\n    \"id\": \"c8b8f724-7e73-4df6-b1a8-8df19642d388\",\r\n    \"protocol\": \"https\",\r\n    \"name\": \"httpbin-api\",\r\n    \"read_timeout\": 60000,\r\n    \"port\": 443,\r\n    \"path\": \"/\",\r\n    \"updated_at\": 1583630747,\r\n    \"retries\": 5,\r\n    \"write_timeout\": 60000,\r\n    \"tags\": null,\r\n    \"client_certificate\": null\r\n}"
        '400':
          description: Bad Request
          headers:
            Date:
              schema:
                type: string
                example: Sun, 08 Mar 2020 01:20:52 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '330'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '1'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "message": "3 schema violations (host: required field missing; path: should start with: /; protocol: expected one of: grpc, grpcs, http, https, tcp, tls)",
                    "name": "schema violation",
                    "fields": {
                        "host": "required field missing",
                        "path": "should start with: /",
                        "protocol": "expected one of: grpc, grpcs, http, https, tcp, tls"
                    },
                    "code": 2
                }
    put:
      tags:
        - Route Object > Update Or Create Route
      summary: Create Or Update Route
      description: >-
        ## Create Or Update Route
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-route)


        * Inserts (or replaces) the Route under the requested resource with the
        definition specified in the body. The Route will be identified via the
        name or id attribute.

        * When the name or id attribute has the structure of a UUID, the Route
        being inserted/replaced will be identified by its id. Otherwise it will
        be identified by its name.

        * When creating a new Route without specifying id (neither in the URL
        nor in the body), then it will be auto-generated.

        *Notice that specifying a name in the URL and a different one in the
        request body is not allowed.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>route name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Route to create or update.</td>
          </tr>
        </table>


        ## Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>optional</td>
            <td>The Route name</td>
          </tr>
          <tr>
            <td>protocols</td>
            <td>required</td>
            <td>A list of the protocols this Route should allow. When set to ["https"], HTTP requests are answered with a request to upgrade to HTTPS. Defaults to ["http", "https"].</td>
          </tr>
          <tr>
            <td>methods</td>
            <td>semi-optional</td>
            <td>A list of HTTP methods that match this Route.</td>
          </tr>
           <tr>
            <td>hosts</td>
            <td>semi-optional</td>
            <td>A list of domain names that match this Route. With form-encoded, the notation is hosts[]=example.com&hosts[]=foo.test. With JSON, use an Array.</td>
          </tr>
           <tr>
            <td>paths</td>
            <td>semi-optional</td>
            <td>A list of paths that match this Route. With form-encoded, the notation is paths[]=/foo&paths[]=/bar. With JSON, use an Array.</td>
          </tr>
             <tr>
            <td>headers</td>
            <td>semi-optional</td>
            <td>One or more lists of values indexed by header name that will cause this Route to match if present in the request. The Host header cannot be used with this attribute: hosts should be specified using the hosts attribute.</td>
          </tr>
             <tr>
            <td>https_redirect_status_code</td>
            <td>required</td>
            <td>The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is HTTP instead of HTTPS. Location header is injected by Kong if the field is set to 301, 302, 307 or 308. Accepted values are: 426, 301, 302, 307, 308. Defaults to 426.</td>
          </tr>
             <tr>
            <td>regex_priority</td>
            <td>optional</td>
            <td>A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same regex_priority, the older one (lowest created_at) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones). Defaults to 0.</td>
          </tr>
             <tr>
            <td>strip_path</td>
            <td>optional</td>
            <td>When matching a Route via one of the paths, strip the matching prefix from the upstream request URL. Defaults to true.</td>
          </tr>
               <tr>
            <td>path_handling</td>
            <td>optional</td>
            <td>Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior. Accepted values are: "v0", "v1". Defaults to "v0".</td>
          </tr>
               <tr>
            <td>preserve_host</td>
            <td>optional</td>
            <td>When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Service’s host.</td>
          </tr>
                 <tr>
            <td>preserve_host</td>
            <td>optional</td>
            <td>When matching a Route via one of the hosts domain names, use the request Host header in the upstream request headers. If set to false, the upstream Host header will be that of the Service’s host.</td>
          </tr>
                <tr>
            <td>snis</td>
            <td>semi-optional</td>
            <td>A list of SNIs that match this Route when using stream routing.</td>
          </tr>
                <tr>
            <td>sources</td>
            <td>semi-optional</td>
            <td>A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.</td>
          </tr>
                <tr>
            <td>destinations</td>
            <td>semi-optional</td>
            <td>A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.</td>
          </tr>
                 <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Route, for grouping and filtering.</td>
          </tr>
                <tr>
            <td>service</td>
            <td>optional</td>
            <td>The Service this Route is associated to. This is where the Route proxies traffic to. With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “"service":{"id":"<service id>"} or "service":{"name":"<service name>"}.</td>
          </tr>
        </table>


        ## Response

        * HTTP 201 Created or HTTP 200 OK

        * See POST and PATCH responses.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                host: httpbin.org
                name: httpbin-api
                retries: 5
                protocol: https
                port: 443
                path: /
                connect_timeout: 60000
                write_timeout: 60000
                read_timeout: 60000
                tags: null
                client_certificate: null
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: routeNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the Route to update.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Route Object > Delete Route
      summary: Delete Route
      description: >-
        ## Delete Route
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-route-1)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>Route name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Route to delete.</td>
          </tr>
        </table>
      parameters:
        - name: routeNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the Route to delete.
      responses:
        '204':
          description: No Content
          headers:
            Date:
              schema:
                type: string
                example: Fri, 13 Mar 2020 01:56:42 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '18'
          content:
            text/plain:
              schema:
                type: string
              example: null
  /plugins:
    post:
      tags:
        - Plugin Object > Add Plugin
      summary: Create Plugin
      description: >-
        # Create Plugin
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-plugin)



        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>required</td>
            <td>The name of the Plugin that’s going to be added. Currently the Plugin must be installed in every Kong instance separately.</td>
          </tr>
          <tr>
            <td>route</td>
            <td>optional</td>
            <td>If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used. Defaults to null.With form-encoded, the notation is route.id=<route id> or route.name=<route name>. With JSON, use “"route":{"id":"<route id>"} or "route":{"name":"<route name>"}.</td>
          </tr>
           <tr>
            <td>service</td>
            <td>optional</td>
            <td>If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched. Defaults to null.With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “"service":{"id":"<service id>"} or "service":{"name":"<service name>"}.</td>
          </tr>
           <tr>
            <td>consumer</td>
            <td>optional</td>
            <td>If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated consumer. Defaults to null.With form-encoded, the notation is consumer.id=<consumer id> or consumer.username=<consumer username>. With JSON, use “"consumer":{"id":"<consumer id>"} or "consumer":{"username":"<consumer username>"}.</td>
          </tr>
           <tr>
            <td>config</td>
            <td>optional</td>
            <td>The configuration properties for the Plugin which can be found on the plugins documentation page in the Kong Hub.</td>
          </tr>
           <tr>
            <td>protocols</td>
            <td>required</td>
            <td>A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support "tcp" and "tls". Defaults to ["grpc", "grpcs", "http", "https"].</td>
          </tr>
           <tr>
            <td>enabled</td>
            <td>optional</td>
            <td>Whether the plugin is applied. Defaults to true.</td>
          </tr>
           <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Plugin, for grouping and filtering.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\r\n    \"name\": \"rate-limiting\",\r\n    \"route\":
                null,\r\n    \"service\": null,\r\n    \"consumer\":
                null,\r\n    \"config\": {\"hour\":500, \"minute\":20},\r\n   
                \"protocols\": [\"grpc\", \"grpcs\"],\r\n    \"enabled\":
                true,\r\n    \"tags\": [\"admin\", \"high-priority\",
                \"critical\"]\r\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Plugin Object > List Plugins
      summary: List All Plugins
      description: >-
        # List All Plugins
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-all-plugins)
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 10:13:50 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '1052'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '2'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                 "next": null,
                 "data": [
                  {
                   "created_at": 1583998823,
                   "config": {
                    "minute": 20,
                    "policy": "cluster",
                    "month": null,
                    "redis_timeout": 2000,
                    "limit_by": "consumer",
                    "hide_client_headers": false,
                    "second": null,
                    "day": null,
                    "redis_password": null,
                    "year": null,
                    "redis_database": 0,
                    "hour": 500,
                    "redis_port": 6379,
                    "redis_host": null,
                    "fault_tolerant": true
                   },
                   "id": "9175fd5b-e364-4759-bbe2-e7d00da5edd2",
                   "service": null,
                   "enabled": true,
                   "protocols": [
                    "https",
                    "http"
                   ],
                   "name": "rate-limiting",
                   "consumer": null,
                   "route": {
                    "id": "875973fd-ba3f-4c7b-8301-e9263013e6d2"
                   },
                   "tags": [
                    "admin",
                    "high-priority",
                    "critical"
                   ]
                  },
                  {
                   "created_at": 1422386534,
                   "config": {
                    "minute": 20,
                    "policy": "cluster",
                    "month": null,
                    "redis_timeout": 2000,
                    "limit_by": "consumer",
                    "hide_client_headers": false,
                    "second": null,
                    "day": null,
                    "redis_password": null,
                    "year": null,
                    "redis_database": 0,
                    "hour": 500,
                    "redis_port": 6379,
                    "redis_host": null,
                    "fault_tolerant": true
                   },
                   "id": "e080cdd2-cdf4-4634-9d5d-1668c6929697",
                   "service": null,
                   "enabled": true,
                   "protocols": [
                    "http",
                    "https"
                   ],
                   "name": "rate-limiting",
                   "consumer": null,
                   "route": {},
                   "tags": [
                    "user-level",
                    "low-priority"
                   ]
                  }
                 ]
                }
  /routes/{routeId}/plugins:
    post:
      tags:
        - Plugin Object > Add Plugin
      summary: Create Plugin Associated to a Specific Route
      description: >-
        # Create Plugin Associated to a Specific Route
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-plugin-associated-to-a-specific-route)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>route id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Route that should be associated to the newly-created Plugin.</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>required</td>
            <td>The name of the Plugin that’s going to be added. Currently the Plugin must be installed in every Kong instance separately.</td>
          </tr>
          <tr>
            <td>route</td>
            <td>optional</td>
            <td>If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used. Defaults to null.With form-encoded, the notation is route.id=<route id> or route.name=<route name>. With JSON, use “"route":{"id":"<route id>"} or "route":{"name":"<route name>"}.</td>
          </tr>
           <tr>
            <td>service</td>
            <td>optional</td>
            <td>If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched. Defaults to null.With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “"service":{"id":"<service id>"} or "service":{"name":"<service name>"}.</td>
          </tr>
           <tr>
            <td>consumer</td>
            <td>optional</td>
            <td>If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated consumer. Defaults to null.With form-encoded, the notation is consumer.id=<consumer id> or consumer.username=<consumer username>. With JSON, use “"consumer":{"id":"<consumer id>"} or "consumer":{"username":"<consumer username>"}.</td>
          </tr>
           <tr>
            <td>config</td>
            <td>optional</td>
            <td>The configuration properties for the Plugin which can be found on the plugins documentation page in the Kong Hub.</td>
          </tr>
           <tr>
            <td>protocols</td>
            <td>required</td>
            <td>A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support "tcp" and "tls". Defaults to ["grpc", "grpcs", "http", "https"].</td>
          </tr>
           <tr>
            <td>enabled</td>
            <td>optional</td>
            <td>Whether the plugin is applied. Defaults to true.</td>
          </tr>
           <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Plugin, for grouping and filtering.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\r\n    \"name\": \"rate-limiting\",\r\n    \"service\":
                null,\r\n    \"consumer\": null,\r\n    \"config\":
                {\"hour\":500, \"minute\":20},\r\n    \"protocols\": [\"https\",
                \"http\"],\r\n    \"enabled\": true,\r\n    \"tags\":
                [\"admin\", \"high-priority\", \"critical\"]\r\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: routeId
          in: path
          schema:
            type: string
          required: true
          description: >-
            The unique identifier of the Route that should be associated to the
            newly-created Plugin.
          example: my-route
      responses:
        '201':
          description: Created
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 07:40:23 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '538'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '15'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "created_at": 1583998823,
                    "config": {
                        "minute": 20,
                        "policy": "cluster",
                        "month": null,
                        "redis_timeout": 2000,
                        "limit_by": "consumer",
                        "hide_client_headers": false,
                        "second": null,
                        "day": null,
                        "redis_password": null,
                        "year": null,
                        "redis_database": 0,
                        "hour": 500,
                        "redis_port": 6379,
                        "redis_host": null,
                        "fault_tolerant": true
                    },
                    "id": "9175fd5b-e364-4759-bbe2-e7d00da5edd2",
                    "service": null,
                    "enabled": true,
                    "protocols": [
                        "https",
                        "http"
                    ],
                    "name": "rate-limiting",
                    "consumer": null,
                    "route": {
                        "id": "875973fd-ba3f-4c7b-8301-e9263013e6d2"
                    },
                    "tags": [
                        "admin",
                        "high-priority",
                        "critical"
                    ]
                }
    get:
      tags:
        - Plugin Object > List Plugins
      summary: List Plugins Associated to a Specific Route
      description: >-
        # List Plugins Associated to a Specific Route
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-plugins-associated-to-a-specific-route)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>route id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Route whose Plugins are to be retrieved. When using this endpoint, only Plugins associated to the specified Route will be listed.</td>
          </tr>
        </table>
      parameters:
        - name: routeId
          in: path
          schema:
            type: string
          required: true
          description: >-
            The unique identifier of the Route whose Plugins are to be
            retrieved. When using this endpoint, only Plugins associated to the
            specified Route will be listed.
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 10:14:36 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '561'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '3'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "next": null,
                    "data": [
                        {
                            "created_at": 1583998823,
                            "config": {
                                "minute": 20,
                                "policy": "cluster",
                                "month": null,
                                "redis_timeout": 2000,
                                "limit_by": "consumer",
                                "hide_client_headers": false,
                                "second": null,
                                "day": null,
                                "redis_password": null,
                                "year": null,
                                "redis_database": 0,
                                "hour": 500,
                                "redis_port": 6379,
                                "redis_host": null,
                                "fault_tolerant": true
                            },
                            "id": "9175fd5b-e364-4759-bbe2-e7d00da5edd2",
                            "service": null,
                            "enabled": true,
                            "protocols": [
                                "https",
                                "http"
                            ],
                            "name": "rate-limiting",
                            "consumer": null,
                            "route": {
                                "id": "875973fd-ba3f-4c7b-8301-e9263013e6d2"
                            },
                            "tags": [
                                "admin",
                                "high-priority",
                                "critical"
                            ]
                        }
                    ]
                }
  /services/{serviceId}/plugins:
    post:
      tags:
        - Plugin Object > Add Plugin
      summary: Create Plugin Associated to a Specific Service
      description: >-
        # Create Plugin Associated to a Specific Service
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-plugin-associated-to-a-specific-service)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>service id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Service that should be associated to the newly-created Plugin.</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>required</td>
            <td>The name of the Plugin that’s going to be added. Currently the Plugin must be installed in every Kong instance separately.</td>
          </tr>
          <tr>
            <td>route</td>
            <td>optional</td>
            <td>If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used. Defaults to null.With form-encoded, the notation is route.id=<route id> or route.name=<route name>. With JSON, use “"route":{"id":"<route id>"} or "route":{"name":"<route name>"}.</td>
          </tr>
           <tr>
            <td>service</td>
            <td>optional</td>
            <td>If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched. Defaults to null.With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “"service":{"id":"<service id>"} or "service":{"name":"<service name>"}.</td>
          </tr>
           <tr>
            <td>consumer</td>
            <td>optional</td>
            <td>If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated consumer. Defaults to null.With form-encoded, the notation is consumer.id=<consumer id> or consumer.username=<consumer username>. With JSON, use “"consumer":{"id":"<consumer id>"} or "consumer":{"username":"<consumer username>"}.</td>
          </tr>
           <tr>
            <td>config</td>
            <td>optional</td>
            <td>The configuration properties for the Plugin which can be found on the plugins documentation page in the Kong Hub.</td>
          </tr>
           <tr>
            <td>protocols</td>
            <td>required</td>
            <td>A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support "tcp" and "tls". Defaults to ["grpc", "grpcs", "http", "https"].</td>
          </tr>
           <tr>
            <td>enabled</td>
            <td>optional</td>
            <td>Whether the plugin is applied. Defaults to true.</td>
          </tr>
           <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Plugin, for grouping and filtering.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\r\n    \"name\": \"rate-limiting\",\r\n    \"service\":
                null,\r\n    \"consumer\": null,\r\n    \"config\":
                {\"hour\":500, \"minute\":20},\r\n    \"protocols\": [\"https\",
                \"http\"],\r\n    \"enabled\": true,\r\n    \"tags\":
                [\"admin\", \"high-priority\", \"critical\"]\r\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: serviceId
          in: path
          schema:
            type: string
          required: true
          description: >-
            The unique identifier of the Service that should be associated to
            the newly-created Plugin.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Plugin Object > List Plugins
      summary: List Plugins Associated to a Specific Service
      description: >-
        # List Plugins Associated to a Specific Service
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-plugins-associated-to-a-specific-service)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>service id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Service whose Plugins are to be retrieved. When using this endpoint, only Plugins associated to the specified Service will be listed.</td>
          </tr>
        </table>
      parameters:
        - name: serviceId
          in: path
          schema:
            type: string
          required: true
          description: >-
            The unique identifier of the Service whose Plugins are to be
            retrieved. When using this endpoint, only Plugins associated to the
            specified Service will be listed.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /services/{consumerId}/plugins:
    post:
      tags:
        - Plugin Object > Add Plugin
      summary: Create Plugin Associated to a Specific Service
      description: >-
        # Create Plugin Associated to a Specific Service
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-plugin-associated-to-a-specific-service)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>service id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Service that should be associated to the newly-created Plugin.</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>required</td>
            <td>The name of the Plugin that’s going to be added. Currently the Plugin must be installed in every Kong instance separately.</td>
          </tr>
          <tr>
            <td>route</td>
            <td>optional</td>
            <td>If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used. Defaults to null.With form-encoded, the notation is route.id=<route id> or route.name=<route name>. With JSON, use “"route":{"id":"<route id>"} or "route":{"name":"<route name>"}.</td>
          </tr>
           <tr>
            <td>service</td>
            <td>optional</td>
            <td>If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched. Defaults to null.With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “"service":{"id":"<service id>"} or "service":{"name":"<service name>"}.</td>
          </tr>
           <tr>
            <td>consumer</td>
            <td>optional</td>
            <td>If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated consumer. Defaults to null.With form-encoded, the notation is consumer.id=<consumer id> or consumer.username=<consumer username>. With JSON, use “"consumer":{"id":"<consumer id>"} or "consumer":{"username":"<consumer username>"}.</td>
          </tr>
           <tr>
            <td>config</td>
            <td>optional</td>
            <td>The configuration properties for the Plugin which can be found on the plugins documentation page in the Kong Hub.</td>
          </tr>
           <tr>
            <td>protocols</td>
            <td>required</td>
            <td>A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support "tcp" and "tls". Defaults to ["grpc", "grpcs", "http", "https"].</td>
          </tr>
           <tr>
            <td>enabled</td>
            <td>optional</td>
            <td>Whether the plugin is applied. Defaults to true.</td>
          </tr>
           <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Plugin, for grouping and filtering.</td>
          </tr>
        </table>
      requestBody:
        content: {}
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: consumerId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /consumers/{consumerId}/plugins:
    get:
      tags:
        - Plugin Object > List Plugins
      summary: List Plugins Associated to a Specific Consumer
      description: >-
        # List Plugins Associated to a Specific Consumer
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-plugins-associated-to-a-specific-consumer)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>consumer id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Consumer whose Plugins are to be retrieved. When using this endpoint, only Plugins associated to the specified Consumer will be listed.</td>
          </tr>
        </table>
      parameters:
        - name: consumerId
          in: path
          schema:
            type: string
          required: true
          description: >-
            The unique identifier of the Consumer whose Plugins are to be
            retrieved. When using this endpoint, only Plugins associated to the
            specified Consumer will be listed.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /plugins/{pluginId}:
    get:
      tags:
        - Plugin Object > Retrieve Plugin
      summary: Retrieve Enabled Plugins
      description: >-
        # Retrieve Enabled Plugins
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-enabled-plugins)


        Retrieve a list of all installed plugins on the Kong node
      parameters:
        - name: pluginId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 10:33:31 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '538'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '2'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                 "created_at": 1583998823,
                 "config": {
                  "minute": 20,
                  "policy": "cluster",
                  "month": null,
                  "redis_timeout": 2000,
                  "limit_by": "consumer",
                  "hide_client_headers": false,
                  "second": null,
                  "day": null,
                  "redis_password": null,
                  "year": null,
                  "redis_database": 0,
                  "hour": 500,
                  "redis_port": 6379,
                  "redis_host": null,
                  "fault_tolerant": true
                 },
                 "id": "9175fd5b-e364-4759-bbe2-e7d00da5edd2",
                 "service": null,
                 "enabled": true,
                 "protocols": [
                  "https",
                  "http"
                 ],
                 "name": "rate-limiting",
                 "consumer": null,
                 "route": {
                  "id": "875973fd-ba3f-4c7b-8301-e9263013e6d2"
                 },
                 "tags": [
                  "admin",
                  "high-priority",
                  "critical"
                 ],
                 "enabled_plugins": [
                  "correlation-id",
                  "pre-function",
                  "cors",
                  "ldap-auth",
                  "loggly",
                  "hmac-auth",
                  "zipkin",
                  "request-size-limiting",
                  "azure-functions",
                  "request-transformer",
                  "oauth2",
                  "response-transformer",
                  "ip-restriction",
                  "statsd",
                  "jwt",
                  "proxy-cache",
                  "basic-auth",
                  "key-auth",
                  "http-log",
                  "datadog",
                  "tcp-log",
                  "post-function",
                  "prometheus",
                  "acl",
                  "syslog",
                  "file-log",
                  "session",
                  "udp-log",
                  "response-ratelimiting",
                  "aws-lambda",
                  "bot-detection",
                  "rate-limiting",
                  "request-termination"
                 ]
                }
    patch:
      tags:
        - Plugin Object > Update Plugin
      summary: Update Plugin
      description: >-
        # Update Plugin
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-plugin)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>plugin  id</td>
            <td>required</td>
            <td>The unique identifier of the Plugin to update.</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>required</td>
            <td>The name of the Plugin that’s going to be added. Currently the Plugin must be installed in every Kong instance separately.</td>
          </tr>
          <tr>
            <td>route</td>
            <td>optional</td>
            <td>If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used. Defaults to null.With form-encoded, the notation is route.id=<route id> or route.name=<route name>. With JSON, use “"route":{"id":"<route id>"} or "route":{"name":"<route name>"}.</td>
          </tr>
           <tr>
            <td>service</td>
            <td>optional</td>
            <td>If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched. Defaults to null.With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “"service":{"id":"<service id>"} or "service":{"name":"<service name>"}.</td>
          </tr>
           <tr>
            <td>consumer</td>
            <td>optional</td>
            <td>If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated consumer. Defaults to null.With form-encoded, the notation is consumer.id=<consumer id> or consumer.username=<consumer username>. With JSON, use “"consumer":{"id":"<consumer id>"} or "consumer":{"username":"<consumer username>"}.</td>
          </tr>
           <tr>
            <td>config</td>
            <td>optional</td>
            <td>The configuration properties for the Plugin which can be found on the plugins documentation page in the Kong Hub.</td>
          </tr>
           <tr>
            <td>protocols</td>
            <td>required</td>
            <td>A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support "tcp" and "tls". Defaults to ["grpc", "grpcs", "http", "https"].</td>
          </tr>
           <tr>
            <td>enabled</td>
            <td>optional</td>
            <td>Whether the plugin is applied. Defaults to true.</td>
          </tr>
           <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Plugin, for grouping and filtering.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"config\": {\n        \"minute\": 20,\n       
                \"policy\": \"cluster\",\n        \"month\": null,\n       
                \"redis_timeout\": 2000,\n        \"limit_by\":
                \"consumer\",\n        \"hide_client_headers\": false,\n       
                \"second\": null,\n        \"day\": null,\n       
                \"redis_password\": null,\n        \"year\": null,\n       
                \"redis_database\": 0,\n        \"hour\": 500,\n       
                \"redis_port\": 6379,\n        \"redis_host\": null,\n       
                \"fault_tolerant\": true\n    },\n    \"service\": null,\n   
                \"enabled\": true,\n    \"protocols\": [\n       
                \"https\",\n        \"http\"\n    ],\n    \"name\":
                \"rate-limiting\",\n    \"consumer\": null,\n    \"route\":
                {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n   
                },\n    \"tags\": [\n        \"admin\",\n       
                \"high-priority\",\n        \"critical\"\n    ]\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: pluginId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier of the Plugin to update.
          example: 9175fd5b-e364-4759-bbe2-e7d00da5edd2
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 11:10:55 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '538'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '14'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "config": {
                        "minute": 20,
                        "policy": "cluster",
                        "month": null,
                        "redis_timeout": 2000,
                        "limit_by": "consumer",
                        "hide_client_headers": false,
                        "second": null,
                        "day": null,
                        "redis_password": null,
                        "year": null,
                        "redis_database": 0,
                        "hour": 500,
                        "redis_port": 6379,
                        "redis_host": null,
                        "fault_tolerant": true
                    },
                    "service": null,
                    "enabled": true,
                    "protocols": [
                        "https",
                        "http"
                    ],
                    "name": "rate-limiting",
                    "consumer": null,
                    "route": {
                        "id": "875973fd-ba3f-4c7b-8301-e9263013e6d2"
                    },
                    "tags": [
                        "admin",
                        "high-priority",
                        "critical"
                    ]
                }
        '400':
          description: Bad Request
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 11:06:03 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '145'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '1'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "message": "invalid primary key: '{id=\"expected a valid UUID\"}'",
                    "name": "invalid primary key",
                    "fields": {
                        "id": "expected a valid UUID"
                    },
                    "code": 1
                }
    put:
      tags:
        - Plugin Object > Update or Create Plugin
      summary: Create Or Update Plugin
      description: >-
        # Create Or Update Plugin
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-plugin)

        * Inserts (or replaces) the Plugin under the requested resource with the
        definition specified in the body. The Plugin will be identified via the
        name or id attribute.

        * When the name or id attribute has the structure of a UUID, the Plugin
        being inserted/replaced will be identified by its id. Otherwise it will
        be identified by its name.

        * When creating a new Plugin without specifying id (neither in the URL
        nor in the body), then it will be auto-generated.

        * Notice that specifying a name in the URL and a different one in the
        request body is not allowed.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>plugin  id</td>
            <td>required</td>
            <td>The unique identifier of the Plugin to update.</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>required</td>
            <td>The name of the Plugin that’s going to be added. Currently the Plugin must be installed in every Kong instance separately.</td>
          </tr>
          <tr>
            <td>route</td>
            <td>optional</td>
            <td>If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used. Defaults to null.With form-encoded, the notation is route.id=<route id> or route.name=<route name>. With JSON, use “"route":{"id":"<route id>"} or "route":{"name":"<route name>"}.</td>
          </tr>
           <tr>
            <td>service</td>
            <td>optional</td>
            <td>If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched. Defaults to null.With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “"service":{"id":"<service id>"} or "service":{"name":"<service name>"}.</td>
          </tr>
           <tr>
            <td>consumer</td>
            <td>optional</td>
            <td>If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated consumer. Defaults to null.With form-encoded, the notation is consumer.id=<consumer id> or consumer.username=<consumer username>. With JSON, use “"consumer":{"id":"<consumer id>"} or "consumer":{"username":"<consumer username>"}.</td>
          </tr>
           <tr>
            <td>config</td>
            <td>optional</td>
            <td>The configuration properties for the Plugin which can be found on the plugins documentation page in the Kong Hub.</td>
          </tr>
           <tr>
            <td>protocols</td>
            <td>required</td>
            <td>A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support "tcp" and "tls". Defaults to ["grpc", "grpcs", "http", "https"].</td>
          </tr>
           <tr>
            <td>enabled</td>
            <td>optional</td>
            <td>Whether the plugin is applied. Defaults to true.</td>
          </tr>
           <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Plugin, for grouping and filtering.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"config\": {\n        \"minute\": 20,\n       
                \"policy\": \"cluster\",\n        \"month\": null,\n       
                \"redis_timeout\": 2000,\n        \"limit_by\":
                \"consumer\",\n        \"hide_client_headers\": false,\n       
                \"second\": null,\n        \"day\": null,\n       
                \"redis_password\": null,\n        \"year\": null,\n       
                \"redis_database\": 0,\n        \"hour\": 500,\n       
                \"redis_port\": 6379,\n        \"redis_host\": null,\n       
                \"fault_tolerant\": true\n    },\n    \"service\": null,\n   
                \"enabled\": true,\n    \"protocols\": [\n       
                \"https\",\n        \"http\"\n    ],\n    \"name\":
                \"rate-limiting\",\n    \"consumer\": null,\n    \"route\":
                {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n   
                },\n    \"tags\": [\n        \"admin\",\n       
                \"high-priority\",\n        \"critical\"\n    ]\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: pluginId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier of the Plugin to update.
          example: 9175fd5b-e364-4759-bbe2-e7d00da5edd2
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 11:37:53 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '538'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '11'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "created_at": 1584013073,
                    "config": {
                        "minute": 20,
                        "policy": "cluster",
                        "month": null,
                        "redis_timeout": 2000,
                        "limit_by": "consumer",
                        "hide_client_headers": false,
                        "second": null,
                        "day": null,
                        "redis_password": null,
                        "year": null,
                        "redis_database": 0,
                        "hour": 500,
                        "redis_port": 6379,
                        "redis_host": null,
                        "fault_tolerant": true
                    },
                    "id": "9175fd5b-e364-4759-bbe2-e7d00da5edd2",
                    "service": null,
                    "enabled": true,
                    "protocols": [
                        "https",
                        "http"
                    ],
                    "name": "rate-limiting",
                    "consumer": null,
                    "route": {
                        "id": "875973fd-ba3f-4c7b-8301-e9263013e6d2"
                    },
                    "tags": [
                        "admin",
                        "high-priority",
                        "critical"
                    ]
                }
    delete:
      tags:
        - Plugin Object > Delete Plugin
      summary: Delete Plugin
      description: >-
        # Delete Plugin
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-plugin-1)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>plugin  id</td>
            <td>required</td>
            <td>The unique identifier of the Plugin to delete.</td>
          </tr>
        </table>
      parameters:
        - name: pluginId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier of the Plugin to delete
          example: 9175fd5b-e364-4759-bbe2-e7d00da5edd2
      responses:
        '204':
          description: No Content
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 12:14:32 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '17'
          content:
            text/plain:
              schema:
                type: string
              example: null
  /routes/{routeNameOrId}/plugins/{pluginId}:
    get:
      tags:
        - Plugin Object > Retrieve Plugin
      summary: Retrieve Plugin Associated to a Specific Route
      description: >-
        # Retrieve Plugin Associated to a Specific Route
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-plugin-associated-to-a-specific-route)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>route name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Route to retrieve.</td>
          </tr>
           <tr>
            <td>plugin id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Plugin to retrieve.</td>
          </tr>
        </table>
      parameters:
        - name: routeNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the Route to retrieve
        - name: pluginId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier of the Plugin to retrieve.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - Plugin Object > Update Plugin
      summary: Update Plugin Associated to a Specific Route
      description: >-
        # Update Plugin Associated to a Specific Route
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-plugin-associated-to-a-specific-route)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>route name or id</td>
            <td>required</td>
            <td>The unique identifier or the name of the Route to update.</td>
          </tr>
          <tr>
            <td>plugin  id</td>
            <td>required</td>
            <td>The unique identifier of the Plugin to update.</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>required</td>
            <td>The name of the Plugin that’s going to be added. Currently the Plugin must be installed in every Kong instance separately.</td>
          </tr>
          <tr>
            <td>route</td>
            <td>optional</td>
            <td>If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used. Defaults to null.With form-encoded, the notation is route.id=<route id> or route.name=<route name>. With JSON, use “"route":{"id":"<route id>"} or "route":{"name":"<route name>"}.</td>
          </tr>
           <tr>
            <td>service</td>
            <td>optional</td>
            <td>If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched. Defaults to null.With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “"service":{"id":"<service id>"} or "service":{"name":"<service name>"}.</td>
          </tr>
           <tr>
            <td>consumer</td>
            <td>optional</td>
            <td>If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated consumer. Defaults to null.With form-encoded, the notation is consumer.id=<consumer id> or consumer.username=<consumer username>. With JSON, use “"consumer":{"id":"<consumer id>"} or "consumer":{"username":"<consumer username>"}.</td>
          </tr>
           <tr>
            <td>config</td>
            <td>optional</td>
            <td>The configuration properties for the Plugin which can be found on the plugins documentation page in the Kong Hub.</td>
          </tr>
           <tr>
            <td>protocols</td>
            <td>required</td>
            <td>A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support "tcp" and "tls". Defaults to ["grpc", "grpcs", "http", "https"].</td>
          </tr>
           <tr>
            <td>enabled</td>
            <td>optional</td>
            <td>Whether the plugin is applied. Defaults to true.</td>
          </tr>
           <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Plugin, for grouping and filtering.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"config\": {\n        \"minute\": 20,\n       
                \"policy\": \"cluster\",\n        \"month\": null,\n       
                \"redis_timeout\": 2000,\n        \"limit_by\":
                \"consumer\",\n        \"hide_client_headers\": false,\n       
                \"second\": null,\n        \"day\": null,\n       
                \"redis_password\": null,\n        \"year\": null,\n       
                \"redis_database\": 0,\n        \"hour\": 500,\n       
                \"redis_port\": 6379,\n        \"redis_host\": null,\n       
                \"fault_tolerant\": true\n    },\n    \"service\": null,\n   
                \"enabled\": true,\n    \"protocols\": [\n       
                \"https\",\n        \"http\"\n    ],\n    \"name\":
                \"rate-limiting\",\n    \"consumer\": null,\n    \"route\":
                {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n   
                },\n    \"tags\": [\n        \"admin\",\n       
                \"high-priority\",\n        \"critical\"\n    ]\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: routeNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the Route to update.
          example: 875973fd-ba3f-4c7b-8301-e9263013e6d2
        - name: pluginId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier of the Plugin to update.
          example: 9175fd5b-e364-4759-bbe2-e7d00da5edd2
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 11:23:03 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '538'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '15'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "config": {
                        "minute": 20,
                        "policy": "cluster",
                        "month": null,
                        "redis_timeout": 2000,
                        "limit_by": "consumer",
                        "hide_client_headers": false,
                        "second": null,
                        "day": null,
                        "redis_password": null,
                        "year": null,
                        "redis_database": 0,
                        "hour": 500,
                        "redis_port": 6379,
                        "redis_host": null,
                        "fault_tolerant": true
                    },
                    "service": null,
                    "enabled": true,
                    "protocols": [
                        "https",
                        "http"
                    ],
                    "name": "rate-limiting",
                    "consumer": null,
                    "route": {
                        "id": "875973fd-ba3f-4c7b-8301-e9263013e6d2"
                    },
                    "tags": [
                        "admin",
                        "high-priority",
                        "critical"
                    ]
                }
    put:
      tags:
        - Plugin Object > Update or Create Plugin
      summary: Create Or Update Plugin Associated to a Specific Route
      description: >-
        # Create Or Update Plugin Associated to a Specific Route
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-plugin-associated-to-a-specific-route)

        * Inserts (or replaces) the Plugin under the requested resource with the
        definition specified in the body. The Plugin will be identified via the
        name or id attribute.

        * When the name or id attribute has the structure of a UUID, the Plugin
        being inserted/replaced will be identified by its id. Otherwise it will
        be identified by its name.

        * When creating a new Plugin without specifying id (neither in the URL
        nor in the body), then it will be auto-generated.

        * Notice that specifying a name in the URL and a different one in the
        request body is not allowed.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>route name or id</td>
            <td>required</td>
            <td>The unique identifier or the name of the Route to update.</td>
          </tr>
          <tr>
            <td>plugin  id</td>
            <td>required</td>
            <td>The unique identifier of the Plugin to update.</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>required</td>
            <td>The name of the Plugin that’s going to be added. Currently the Plugin must be installed in every Kong instance separately.</td>
          </tr>
          <tr>
            <td>route</td>
            <td>optional</td>
            <td>If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used. Defaults to null.With form-encoded, the notation is route.id=<route id> or route.name=<route name>. With JSON, use “"route":{"id":"<route id>"} or "route":{"name":"<route name>"}.</td>
          </tr>
           <tr>
            <td>service</td>
            <td>optional</td>
            <td>If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched. Defaults to null.With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “"service":{"id":"<service id>"} or "service":{"name":"<service name>"}.</td>
          </tr>
           <tr>
            <td>consumer</td>
            <td>optional</td>
            <td>If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated consumer. Defaults to null.With form-encoded, the notation is consumer.id=<consumer id> or consumer.username=<consumer username>. With JSON, use “"consumer":{"id":"<consumer id>"} or "consumer":{"username":"<consumer username>"}.</td>
          </tr>
           <tr>
            <td>config</td>
            <td>optional</td>
            <td>The configuration properties for the Plugin which can be found on the plugins documentation page in the Kong Hub.</td>
          </tr>
           <tr>
            <td>protocols</td>
            <td>required</td>
            <td>A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support "tcp" and "tls". Defaults to ["grpc", "grpcs", "http", "https"].</td>
          </tr>
           <tr>
            <td>enabled</td>
            <td>optional</td>
            <td>Whether the plugin is applied. Defaults to true.</td>
          </tr>
           <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Plugin, for grouping and filtering.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"config\": {\n        \"minute\": 20,\n       
                \"policy\": \"cluster\",\n        \"month\": null,\n       
                \"redis_timeout\": 2000,\n        \"limit_by\":
                \"consumer\",\n        \"hide_client_headers\": false,\n       
                \"second\": null,\n        \"day\": null,\n       
                \"redis_password\": null,\n        \"year\": null,\n       
                \"redis_database\": 0,\n        \"hour\": 500,\n       
                \"redis_port\": 6379,\n        \"redis_host\": null,\n       
                \"fault_tolerant\": true\n    },\n    \"service\": null,\n   
                \"enabled\": true,\n    \"protocols\": [\n       
                \"https\",\n        \"http\"\n    ],\n    \"name\":
                \"rate-limiting\",\n    \"consumer\": null,\n    \"route\":
                {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n   
                },\n    \"tags\": [\n        \"admin\",\n       
                \"high-priority\",\n        \"critical\"\n    ]\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: routeNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the Route to update.
          example: 875973fd-ba3f-4c7b-8301-e9263013e6d2
        - name: pluginId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier of the Plugin to update.
          example: 9175fd5b-e364-4759-bbe2-e7d00da5edd2
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 11:23:03 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '538'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '15'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "config": {
                        "minute": 20,
                        "policy": "cluster",
                        "month": null,
                        "redis_timeout": 2000,
                        "limit_by": "consumer",
                        "hide_client_headers": false,
                        "second": null,
                        "day": null,
                        "redis_password": null,
                        "year": null,
                        "redis_database": 0,
                        "hour": 500,
                        "redis_port": 6379,
                        "redis_host": null,
                        "fault_tolerant": true
                    },
                    "service": null,
                    "enabled": true,
                    "protocols": [
                        "https",
                        "http"
                    ],
                    "name": "rate-limiting",
                    "consumer": null,
                    "route": {
                        "id": "875973fd-ba3f-4c7b-8301-e9263013e6d2"
                    },
                    "tags": [
                        "admin",
                        "high-priority",
                        "critical"
                    ]
                }
    delete:
      tags:
        - Plugin Object > Delete Plugin
      summary: Delete Plugin Associated to a Specific Route
      description: >-
        # Delete Plugin Associated to a Specific Route
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-plugin-associated-to-a-specific-route)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>route name or id</td>
            <td>required</td>
            <td>The unique identifier or the name of the Route to delete.</td>
          </tr>
          <tr>
            <td>plugin id</td>
            <td>required</td>
            <td>The unique identifier of the Plugin to delete.</td>
          </tr>
        </table>
      parameters:
        - name: routeNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the Route to delete.
          example: 875973fd-ba3f-4c7b-8301-e9263013e6d2
        - name: pluginId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier of the Plugin to delete.
          example: 9175fd5b-e364-4759-bbe2-e7d00da5edd2
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 11:23:03 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '538'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '15'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "config": {
                        "minute": 20,
                        "policy": "cluster",
                        "month": null,
                        "redis_timeout": 2000,
                        "limit_by": "consumer",
                        "hide_client_headers": false,
                        "second": null,
                        "day": null,
                        "redis_password": null,
                        "year": null,
                        "redis_database": 0,
                        "hour": 500,
                        "redis_port": 6379,
                        "redis_host": null,
                        "fault_tolerant": true
                    },
                    "service": null,
                    "enabled": true,
                    "protocols": [
                        "https",
                        "http"
                    ],
                    "name": "rate-limiting",
                    "consumer": null,
                    "route": {
                        "id": "875973fd-ba3f-4c7b-8301-e9263013e6d2"
                    },
                    "tags": [
                        "admin",
                        "high-priority",
                        "critical"
                    ]
                }
  /services/{serviceNameOrId}/plugins/{pluginId}:
    get:
      tags:
        - Plugin Object > Retrieve Plugin
      summary: Retrieve Plugin Associated to a Specific Service
      description: >-
        # Retrieve Plugin Associated to a Specific Service
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-plugin-associated-to-a-specific-service)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>service name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Service to retrieve.</td>
          </tr>
           <tr>
            <td>plugin id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Plugin to retrieve.</td>
          </tr>
        </table>
      parameters:
        - name: serviceNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the Service to retrieve
        - name: pluginId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier of the Plugin to retrieve
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - Plugin Object > Update Plugin
      summary: Update Plugin Associated to a Specific Service
      description: >-
        # Update Plugin Associated to a Specific Service
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-plugin-associated-to-a-specific-service)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>service name or id</td>
            <td>required</td>
            <td>The unique identifier or the name of the Service to update.</td>
          </tr>
          <tr>
            <td>plugin  id</td>
            <td>required</td>
            <td>The unique identifier of the Plugin to update.</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>required</td>
            <td>The name of the Plugin that’s going to be added. Currently the Plugin must be installed in every Kong instance separately.</td>
          </tr>
          <tr>
            <td>route</td>
            <td>optional</td>
            <td>If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used. Defaults to null.With form-encoded, the notation is route.id=<route id> or route.name=<route name>. With JSON, use “"route":{"id":"<route id>"} or "route":{"name":"<route name>"}.</td>
          </tr>
           <tr>
            <td>service</td>
            <td>optional</td>
            <td>If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched. Defaults to null.With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “"service":{"id":"<service id>"} or "service":{"name":"<service name>"}.</td>
          </tr>
           <tr>
            <td>consumer</td>
            <td>optional</td>
            <td>If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated consumer. Defaults to null.With form-encoded, the notation is consumer.id=<consumer id> or consumer.username=<consumer username>. With JSON, use “"consumer":{"id":"<consumer id>"} or "consumer":{"username":"<consumer username>"}.</td>
          </tr>
           <tr>
            <td>config</td>
            <td>optional</td>
            <td>The configuration properties for the Plugin which can be found on the plugins documentation page in the Kong Hub.</td>
          </tr>
           <tr>
            <td>protocols</td>
            <td>required</td>
            <td>A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support "tcp" and "tls". Defaults to ["grpc", "grpcs", "http", "https"].</td>
          </tr>
           <tr>
            <td>enabled</td>
            <td>optional</td>
            <td>Whether the plugin is applied. Defaults to true.</td>
          </tr>
           <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Plugin, for grouping and filtering.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"config\": {\n        \"minute\": 20,\n       
                \"policy\": \"cluster\",\n        \"month\": null,\n       
                \"redis_timeout\": 2000,\n        \"limit_by\":
                \"consumer\",\n        \"hide_client_headers\": false,\n       
                \"second\": null,\n        \"day\": null,\n       
                \"redis_password\": null,\n        \"year\": null,\n       
                \"redis_database\": 0,\n        \"hour\": 500,\n       
                \"redis_port\": 6379,\n        \"redis_host\": null,\n       
                \"fault_tolerant\": true\n    },\n    \"service\": null,\n   
                \"enabled\": true,\n    \"protocols\": [\n       
                \"https\",\n        \"http\"\n    ],\n    \"name\":
                \"rate-limiting\",\n    \"consumer\": null,\n    \"route\":
                {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n   
                },\n    \"tags\": [\n        \"admin\",\n       
                \"high-priority\",\n        \"critical\"\n    ]\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: serviceNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the Service to update.
        - name: pluginId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier of the Plugin to update.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Plugin Object > Update or Create Plugin
      summary: Create Or Update Plugin Associated to a Specific Service
      description: >-
        # Create Or Update Plugin Associated to a Specific Service
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-plugin-associated-to-a-specific-service)

        * Inserts (or replaces) the Plugin under the requested resource with the
        definition specified in the body. The Plugin will be identified via the
        name or id attribute.

        * When the name or id attribute has the structure of a UUID, the Plugin
        being inserted/replaced will be identified by its id. Otherwise it will
        be identified by its name.

        * When creating a new Plugin without specifying id (neither in the URL
        nor in the body), then it will be auto-generated.

        * Notice that specifying a name in the URL and a different one in the
        request body is not allowed.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>service name or id</td>
            <td>required</td>
            <td>The unique identifier or the name of the Service to update.</td>
          </tr>
          <tr>
            <td>plugin  id</td>
            <td>required</td>
            <td>The unique identifier of the Plugin to update.</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>required</td>
            <td>The name of the Plugin that’s going to be added. Currently the Plugin must be installed in every Kong instance separately.</td>
          </tr>
          <tr>
            <td>route</td>
            <td>optional</td>
            <td>If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used. Defaults to null.With form-encoded, the notation is route.id=<route id> or route.name=<route name>. With JSON, use “"route":{"id":"<route id>"} or "route":{"name":"<route name>"}.</td>
          </tr>
           <tr>
            <td>service</td>
            <td>optional</td>
            <td>If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched. Defaults to null.With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “"service":{"id":"<service id>"} or "service":{"name":"<service name>"}.</td>
          </tr>
           <tr>
            <td>consumer</td>
            <td>optional</td>
            <td>If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated consumer. Defaults to null.With form-encoded, the notation is consumer.id=<consumer id> or consumer.username=<consumer username>. With JSON, use “"consumer":{"id":"<consumer id>"} or "consumer":{"username":"<consumer username>"}.</td>
          </tr>
           <tr>
            <td>config</td>
            <td>optional</td>
            <td>The configuration properties for the Plugin which can be found on the plugins documentation page in the Kong Hub.</td>
          </tr>
           <tr>
            <td>protocols</td>
            <td>required</td>
            <td>A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support "tcp" and "tls". Defaults to ["grpc", "grpcs", "http", "https"].</td>
          </tr>
           <tr>
            <td>enabled</td>
            <td>optional</td>
            <td>Whether the plugin is applied. Defaults to true.</td>
          </tr>
           <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Plugin, for grouping and filtering.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"config\": {\n        \"minute\": 20,\n       
                \"policy\": \"cluster\",\n        \"month\": null,\n       
                \"redis_timeout\": 2000,\n        \"limit_by\":
                \"consumer\",\n        \"hide_client_headers\": false,\n       
                \"second\": null,\n        \"day\": null,\n       
                \"redis_password\": null,\n        \"year\": null,\n       
                \"redis_database\": 0,\n        \"hour\": 500,\n       
                \"redis_port\": 6379,\n        \"redis_host\": null,\n       
                \"fault_tolerant\": true\n    },\n    \"service\": null,\n   
                \"enabled\": true,\n    \"protocols\": [\n       
                \"https\",\n        \"http\"\n    ],\n    \"name\":
                \"rate-limiting\",\n    \"consumer\": null,\n    \"route\":
                {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n   
                },\n    \"tags\": [\n        \"admin\",\n       
                \"high-priority\",\n        \"critical\"\n    ]\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: serviceNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the Service to update.
        - name: pluginId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier of the Plugin to update.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Plugin Object > Delete Plugin
      summary: Delete Plugin Associated to a Specific Service
      description: >-
        # Delete Plugin Associated to a Specific Service
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-plugin-associated-to-a-specific-service)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>service name or id</td>
            <td>required</td>
            <td>The unique identifier or the name of the Service to delete.</td>
          </tr>
          <tr>
            <td>plugin id</td>
            <td>required</td>
            <td>The unique identifier of the Plugin to delete.</td>
          </tr>
        </table>
      parameters:
        - name: serviceNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the Service to delete
        - name: pluginId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier of the Plugin to delete
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /consumers/{consumerUsernameOrId}/plugins/{pluginId}:
    get:
      tags:
        - Plugin Object > Retrieve Plugin
      summary: Retrieve Plugin Associated to a Specific Consumer
      description: >-
        # Retrieve Plugin Associated to a Specific Consumer
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-plugin-associated-to-a-specific-consumer)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>consumer username or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the username of the Consumer to retrieve</td>
          </tr>
           <tr>
            <td>plugin id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Plugin to retrieve.</td>
          </tr>
        </table>
      parameters:
        - name: consumerUsernameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the username of the Consumer to retriev
        - name: pluginId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier of the Plugin to retrieve
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /consumers/{consumerUsernameOrd}}/plugins/{pluginId}:
    patch:
      tags:
        - Plugin Object > Update Plugin
      summary: Update Plugin Associated to a Specific Consumer
      description: >-
        # Update Plugin Associated to a Specific Consumer
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-plugin-associated-to-a-specific-consumer)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>consumer username or id</td>
            <td>required</td>
            <td>The unique identifier or the username of the Consumer to update.</td>
          </tr>
          <tr>
            <td>plugin  id</td>
            <td>required</td>
            <td>The unique identifier of the Plugin to update.</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>required</td>
            <td>The name of the Plugin that’s going to be added. Currently the Plugin must be installed in every Kong instance separately.</td>
          </tr>
          <tr>
            <td>route</td>
            <td>optional</td>
            <td>If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used. Defaults to null.With form-encoded, the notation is route.id=<route id> or route.name=<route name>. With JSON, use “"route":{"id":"<route id>"} or "route":{"name":"<route name>"}.</td>
          </tr>
           <tr>
            <td>service</td>
            <td>optional</td>
            <td>If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched. Defaults to null.With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “"service":{"id":"<service id>"} or "service":{"name":"<service name>"}.</td>
          </tr>
           <tr>
            <td>consumer</td>
            <td>optional</td>
            <td>If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated consumer. Defaults to null.With form-encoded, the notation is consumer.id=<consumer id> or consumer.username=<consumer username>. With JSON, use “"consumer":{"id":"<consumer id>"} or "consumer":{"username":"<consumer username>"}.</td>
          </tr>
           <tr>
            <td>config</td>
            <td>optional</td>
            <td>The configuration properties for the Plugin which can be found on the plugins documentation page in the Kong Hub.</td>
          </tr>
           <tr>
            <td>protocols</td>
            <td>required</td>
            <td>A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support "tcp" and "tls". Defaults to ["grpc", "grpcs", "http", "https"].</td>
          </tr>
           <tr>
            <td>enabled</td>
            <td>optional</td>
            <td>Whether the plugin is applied. Defaults to true.</td>
          </tr>
           <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Plugin, for grouping and filtering.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"config\": {\n        \"minute\": 20,\n       
                \"policy\": \"cluster\",\n        \"month\": null,\n       
                \"redis_timeout\": 2000,\n        \"limit_by\":
                \"consumer\",\n        \"hide_client_headers\": false,\n       
                \"second\": null,\n        \"day\": null,\n       
                \"redis_password\": null,\n        \"year\": null,\n       
                \"redis_database\": 0,\n        \"hour\": 500,\n       
                \"redis_port\": 6379,\n        \"redis_host\": null,\n       
                \"fault_tolerant\": true\n    },\n    \"service\": null,\n   
                \"enabled\": true,\n    \"protocols\": [\n       
                \"https\",\n        \"http\"\n    ],\n    \"name\":
                \"rate-limiting\",\n    \"consumer\": null,\n    \"route\":
                {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n   
                },\n    \"tags\": [\n        \"admin\",\n       
                \"high-priority\",\n        \"critical\"\n    ]\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: consumerUsernameOrd
          in: path
          schema:
            type: string
          required: true
        - name: pluginId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier of the Plugin to update.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Plugin Object > Update or Create Plugin
      summary: Create Or Update Plugin Associated to a Specific Consumer
      description: >-
        # Create Or Update Plugin Associated to a Specific Consumer
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-plugin-associated-to-a-specific-consumer)

        * Inserts (or replaces) the Plugin under the requested resource with the
        definition specified in the body. The Plugin will be identified via the
        name or id attribute.

        * When the name or id attribute has the structure of a UUID, the Plugin
        being inserted/replaced will be identified by its id. Otherwise it will
        be identified by its name.

        * When creating a new Plugin without specifying id (neither in the URL
        nor in the body), then it will be auto-generated.

        * Notice that specifying a name in the URL and a different one in the
        request body is not allowed.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>consumer username or id</td>
            <td>required</td>
            <td>The unique identifier or the username of the Consumer to update.</td>
          </tr>
          <tr>
            <td>plugin  id</td>
            <td>required</td>
            <td>The unique identifier of the Plugin to update.</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>name</td>
            <td>required</td>
            <td>The name of the Plugin that’s going to be added. Currently the Plugin must be installed in every Kong instance separately.</td>
          </tr>
          <tr>
            <td>route</td>
            <td>optional</td>
            <td>If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used. Defaults to null.With form-encoded, the notation is route.id=<route id> or route.name=<route name>. With JSON, use “"route":{"id":"<route id>"} or "route":{"name":"<route name>"}.</td>
          </tr>
           <tr>
            <td>service</td>
            <td>optional</td>
            <td>If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched. Defaults to null.With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “"service":{"id":"<service id>"} or "service":{"name":"<service name>"}.</td>
          </tr>
           <tr>
            <td>consumer</td>
            <td>optional</td>
            <td>If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated consumer. Defaults to null.With form-encoded, the notation is consumer.id=<consumer id> or consumer.username=<consumer username>. With JSON, use “"consumer":{"id":"<consumer id>"} or "consumer":{"username":"<consumer username>"}.</td>
          </tr>
           <tr>
            <td>config</td>
            <td>optional</td>
            <td>The configuration properties for the Plugin which can be found on the plugins documentation page in the Kong Hub.</td>
          </tr>
           <tr>
            <td>protocols</td>
            <td>required</td>
            <td>A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support "tcp" and "tls". Defaults to ["grpc", "grpcs", "http", "https"].</td>
          </tr>
           <tr>
            <td>enabled</td>
            <td>optional</td>
            <td>Whether the plugin is applied. Defaults to true.</td>
          </tr>
           <tr>
            <td>tags</td>
            <td>optional</td>
            <td>An optional set of strings associated with the Plugin, for grouping and filtering.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"config\": {\n        \"minute\": 20,\n       
                \"policy\": \"cluster\",\n        \"month\": null,\n       
                \"redis_timeout\": 2000,\n        \"limit_by\":
                \"consumer\",\n        \"hide_client_headers\": false,\n       
                \"second\": null,\n        \"day\": null,\n       
                \"redis_password\": null,\n        \"year\": null,\n       
                \"redis_database\": 0,\n        \"hour\": 500,\n       
                \"redis_port\": 6379,\n        \"redis_host\": null,\n       
                \"fault_tolerant\": true\n    },\n    \"service\": null,\n   
                \"enabled\": true,\n    \"protocols\": [\n       
                \"https\",\n        \"http\"\n    ],\n    \"name\":
                \"rate-limiting\",\n    \"consumer\": null,\n    \"route\":
                {\n        \"id\": \"875973fd-ba3f-4c7b-8301-e9263013e6d2\"\n   
                },\n    \"tags\": [\n        \"admin\",\n       
                \"high-priority\",\n        \"critical\"\n    ]\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: consumerUsernameOrd
          in: path
          schema:
            type: string
          required: true
        - name: pluginId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier of the Plugin to update.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Plugin Object > Delete Plugin
      summary: Delete Plugin Associated to a Specific Consumer
      description: >-
        # Delete Plugin Associated to a Specific Consumer
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-plugin-associated-to-a-specific-consumer)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>consumer username or id</td>
            <td>required</td>
            <td>The unique identifier or the username of the Consumer to delete.</td>
          </tr>
          <tr>
            <td>plugin  id</td>
            <td>required</td>
            <td>The unique identifier of the Plugin to delete.</td>
          </tr>
        </table>
      parameters:
        - name: consumerUsernameOrd
          in: path
          schema:
            type: string
          required: true
        - name: pluginId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier of the Plugin to delete
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /plugins/enabled:
    get:
      tags:
        - Plugin Object > Retrieve Plugin
      summary: Retrieve Enabled Plugins
      description: >-
        # Retrieve Enabled Plugins
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-enabled-plugins)


        Retrieve a list of all installed plugins on the Kong node
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 13:05:38 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '465'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '1'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "enabled_plugins": [
                        "correlation-id",
                        "pre-function",
                        "cors",
                        "ldap-auth",
                        "loggly",
                        "hmac-auth",
                        "zipkin",
                        "request-size-limiting",
                        "azure-functions",
                        "request-transformer",
                        "oauth2",
                        "response-transformer",
                        "ip-restriction",
                        "statsd",
                        "jwt",
                        "proxy-cache",
                        "basic-auth",
                        "key-auth",
                        "http-log",
                        "datadog",
                        "tcp-log",
                        "post-function",
                        "prometheus",
                        "acl",
                        "syslog",
                        "file-log",
                        "session",
                        "udp-log",
                        "response-ratelimiting",
                        "aws-lambda",
                        "bot-detection",
                        "rate-limiting",
                        "request-termination"
                    ]
                }
  /plugins/schema/{pluginName}:
    get:
      tags:
        - Plugin Object > Retrieve Plugin
      summary: Retrieve Plugin Schema
      description: >-
        # Retrieve Plugin Schema
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-plugin-schema)

        * Retrieve the schema of a plugin’s configuration. This is useful to
        understand what fields a plugin accepts, and can be used for building
        third-party integrations to the Kong’s plugin system.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>plugin name</td>
            <td>required</td>
            <td>The Plugin name to retrieve</td>
          </tr>
        </table>
      parameters:
        - name: pluginName
          in: path
          schema:
            type: string
          required: true
          example: basic-auth
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 13:11:45 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '126'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '0'
          content:
            text/plain:
              schema:
                type: string
              example: "{\r\n    \"fields\": {\r\n        \"hide_credentials\": {\r\n            \"default\": false,\r\n            \"type\": \"boolean\"\r\n        },\r\n        \"key_names\": {\r\n            \"default\": \"function\",\r\n            \"required\": true,\r\n            \"type\": \"array\"\r\n        }\r\n    }\r\n}"
        '204':
          description: No Content
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 12:14:32 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '17'
          content:
            text/plain:
              schema:
                type: string
              example: null
  /certificates:
    post:
      tags:
        - Certificate Object > Add Certificate
      summary: Create Certificate
      description: >-
        # Create Certificate
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-certificate)

        * A certificate object represents a public certificate, and can be
        optionally paired with the corresponding private key. These objects are
        used by Kong to handle SSL/TLS termination for encrypted requests, or
        for use as a trusted CA store when validating peer certificate of
        client/service. Certificates are optionally associated with SNI objects
        to tie a cert/key pair to one or more hostnames.

        * If intermediate certificates are required in addition to the main
        certificate, they should be concatenated together into one string
        according to the following order: main certificate on the top, followed
        by any intermediates.

        * Certificates can be both tagged and filtered by tags.



        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>cert</td>
            <td>required</td>
            <td>body</td>
            <td>PEM-encoded public certificate chain of the SSL key pair.</td>
          </tr>
          <tr>
            <td>key</td>
            <td>required</td>
            <td>body</td>
            <td>PEM-encoded private key of the SSL key pair.</td>
          </tr>
          <tr>
            <td>tags</td>
            <td>optional</td>
            <td>body</td>
            <td>An optional set of strings associated with the Certificate, for grouping and filtering.</td>
          </tr>
          <tr>
            <td>snis</td>
            <td>optional</td>
            <td>body</td>
            <td>An array of zero or more hostnames to associate with this certificate as SNIs. This is a sugar parameter that will, under the hood, create an SNI object and associate it with this certificate for your convenience. To set this attribute this certificate must have a valid private key associated with it.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"cert\": \"-----BEGIN CERTIFICATE-----...\",\n   
                \"key\": \"-----BEGIN RSA PRIVATE KEY-----...\",\n    \"tags\":
                [\n        \"user-level\",\n        \"low-priority\"\n    ]\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Certificate Object > List Certificates
      summary: List All Certificates
      description: >-
        # List All Certificates
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-all-certificates)
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 15:08:32 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '23'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '1'
          content:
            text/plain:
              schema:
                type: string
              example: "{\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"d044b7d4-3dc2-4bbc-8e9f-6b7a69416df6\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"cert\": \"-----BEGIN CERTIFICATE-----...\",\n\t\t\t\"key\": \"-----BEGIN RSA PRIVATE KEY-----...\",\n\t\t\t\"tags\": [\n\t\t\t\t\"user-level\",\n\t\t\t\t\"low-priority\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"a9b2107f-a214-47b3-add4-46b942187924\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"cert\": \"-----BEGIN CERTIFICATE-----...\",\n\t\t\t\"key\": \"-----BEGIN RSA PRIVATE KEY-----...\",\n\t\t\t\"tags\": [\n\t\t\t\t\"admin\",\n\t\t\t\t\"high-priority\",\n\t\t\t\t\"critical\"\n\t\t\t]\n\t\t}\n\t],\n\t\"next\": \"http://localhost:8001/certificates?offset=6378122c-a0a1-438d-a5c6-efabae9fb969\"\n}"
  /certificates/{certificateId}:
    get:
      tags:
        - Certificate Object > Retrieve Certificate
      summary: Retrieve Certificate
      description: >-
        # Retrieve Certificate
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-certificate-1)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>certificate id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Certificate to retrieve.</td>
          </tr>
        </table>
      parameters:
        - name: certificateId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier of the Certificate to retrieve.
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 15:17:18 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '23'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '1'
          content:
            text/plain:
              schema:
                type: string
              example: "{\r\n    \"id\": \"7fca84d6-7d37-4a74-a7b0-93e576089a41\",\r\n    \"created_at\": 1422386534,\r\n    \"cert\": \"-----BEGIN CERTIFICATE-----...\",\r\n    \"key\": \"-----BEGIN RSA PRIVATE KEY-----...\",\r\n    \"tags\": [\"user-level\", \"low-priority\"]\r\n}"
    post:
      tags:
        - Certificate Object > Update Certificate
      summary: Update Certificate
      description: >-
        # Update Certificate
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-certificate-1)

        * A certificate object represents a public certificate, and can be
        optionally paired with the corresponding private key. These objects are
        used by Kong to handle SSL/TLS termination for encrypted requests, or
        for use as a trusted CA store when validating peer certificate of
        client/service. Certificates are optionally associated with SNI objects
        to tie a cert/key pair to one or more hostnames.

        * If intermediate certificates are required in addition to the main
        certificate, they should be concatenated together into one string
        according to the following order: main certificate on the top, followed
        by any intermediates.

        * Certificates can be both tagged and filtered by tags.


        # Path parameters

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>certificate id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Certificate to update.</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>cert</td>
            <td>required</td>
            <td>body</td>
            <td>PEM-encoded public certificate chain of the SSL key pair.</td>
          </tr>
          <tr>
            <td>key</td>
            <td>required</td>
            <td>body</td>
            <td>PEM-encoded private key of the SSL key pair.</td>
          </tr>
          <tr>
            <td>tags</td>
            <td>optional</td>
            <td>body</td>
            <td>An optional set of strings associated with the Certificate, for grouping and filtering.</td>
          </tr>
          <tr>
            <td>snis</td>
            <td>optional</td>
            <td>body</td>
            <td>An array of zero or more hostnames to associate with this certificate as SNIs. This is a sugar parameter that will, under the hood, create an SNI object and associate it with this certificate for your convenience. To set this attribute this certificate must have a valid private key associated with it.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"cert\": \"-----BEGIN CERTIFICATE-----...\",\n   
                \"key\": \"-----BEGIN RSA PRIVATE KEY-----...\",\n    \"tags\":
                [\n        \"user-level\",\n        \"low-priority\"\n    ]\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: certificateId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier of the Certificate to update.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Certificate Object > Update Or Create Certificate
      summary: Create Or Update Certificate
      description: >-
        # Create Or Update Certificate
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-certificate)

        * A certificate object represents a public certificate, and can be
        optionally paired with the corresponding private key. These objects are
        used by Kong to handle SSL/TLS termination for encrypted requests, or
        for use as a trusted CA store when validating peer certificate of
        client/service. Certificates are optionally associated with SNI objects
        to tie a cert/key pair to one or more hostnames.

        * If intermediate certificates are required in addition to the main
        certificate, they should be concatenated together into one string
        according to the following order: main certificate on the top, followed
        by any intermediates.

        * Certificates can be both tagged and filtered by tags.


        * Inserts (or replaces) the Certificate under the requested resource
        with the definition specified in the body. The Certificate will be
        identified via the name or id attribute.

        * When the name or id attribute has the structure of a UUID, the
        Certificate being inserted/replaced will be identified by its id.
        Otherwise it will be identified by its name.

        * When creating a new Certificate without specifying id (neither in the
        URL nor in the body), then it will be auto-generated.

        * Notice that specifying a name in the URL and a different one in the
        request body is not allowed.


        # Path parameters

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>certificate id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Certificate to create or update.</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>cert</td>
            <td>required</td>
            <td>body</td>
            <td>PEM-encoded public certificate chain of the SSL key pair.</td>
          </tr>
          <tr>
            <td>key</td>
            <td>required</td>
            <td>body</td>
            <td>PEM-encoded private key of the SSL key pair.</td>
          </tr>
          <tr>
            <td>tags</td>
            <td>optional</td>
            <td>body</td>
            <td>An optional set of strings associated with the Certificate, for grouping and filtering.</td>
          </tr>
          <tr>
            <td>snis</td>
            <td>optional</td>
            <td>body</td>
            <td>An array of zero or more hostnames to associate with this certificate as SNIs. This is a sugar parameter that will, under the hood, create an SNI object and associate it with this certificate for your convenience. To set this attribute this certificate must have a valid private key associated with it.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"cert\": \"-----BEGIN CERTIFICATE-----...\",\n   
                \"key\": \"-----BEGIN RSA PRIVATE KEY-----...\",\n    \"tags\":
                [\n        \"user-level\",\n        \"low-priority\"\n    ]\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: certificateId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier of the Certificate to update.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Certificate Object > Delete Certificate
      summary: Delete Certificate
      description: >-
        # Delete Certificate
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-certificate-1)


        # Path parameters

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>certificate id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Certificate to delete</td>
          </tr>
        </table>
      parameters:
        - name: certificateId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier of the Certificate to delete
      responses:
        '404':
          description: Not Found
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 15:49:31 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '27'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '2'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "message": "SNI not found"
                }
  /ca_certificates:
    post:
      tags:
        - CA Certificate Object > Add CA Certificate
      summary: Create CA Certificate
      description: >-
        # Create CA Certificate
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-ca-certificate)


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>cert</td>
            <td>required</td>
            <td>body</td>
            <td>PEM-encoded public certificate of the CA.</td>
          </tr>
          <tr>
            <td>tags</td>
            <td>optional</td>
            <td>body</td>
            <td>An optional set of strings associated with the Certificate, for grouping and filtering.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"cert\": \"-----BEGIN CERTIFICATE----------END
                CERTIFICATE-----\",\n    \"tags\": [\n       
                \"user-level\",\n        \"low-priority\"\n    ]\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 16:02:47 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '315'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '0'
          content:
            text/plain:
              schema:
                type: string
              example: "{\r\n    \"id\": \"04fbeacf-a9f1-4a5d-ae4a-b0407445db3f\",\r\n    \"created_at\": 1422386534,\r\n    \"cert\": \"-----BEGIN CERTIFICATE-----...\",\r\n    \"tags\": [\"user-level\", \"low-priority\"]\r\n}"
        '400':
          description: Bad Request
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 16:00:21 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '315'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '0'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "message": "schema violation (cert: invalid certificate: x509.new: pem/pem_lib.c:812:error:0908F070:PEM routines:get_header_and_data:short header)",
                    "name": "schema violation",
                    "fields": {
                        "cert": "invalid certificate: x509.new: pem/pem_lib.c:812:error:0908F070:PEM routines:get_header_and_data:short header"
                    },
                    "code": 2
                }
    get:
      tags:
        - CA Certificate Object > List CA Certificates
      summary: List All CA Certificates
      description: >-
        # List All CA Certificates
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-all-ca-certificates)
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 15:53:48 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '23'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '3'
          content:
            text/plain:
              schema:
                type: string
              example: "{\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"43429efd-b3a5-4048-94cb-5cc4029909bb\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"cert\": \"-----BEGIN CERTIFICATE-----...\",\n\t\t\t\"tags\": [\n\t\t\t\t\"user-level\",\n\t\t\t\t\"low-priority\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"d26761d5-83a4-4f24-ac6c-cff276f2b79c\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"cert\": \"-----BEGIN CERTIFICATE-----...\",\n\t\t\t\"tags\": [\n\t\t\t\t\"admin\",\n\t\t\t\t\"high-priority\",\n\t\t\t\t\"critical\"\n\t\t\t]\n\t\t}\n\t],\n\t\"next\": \"http://localhost:8001/ca_certificates?offset=6378122c-a0a1-438d-a5c6-efabae9fb969\"\n}"
  /ca_certificates/{ca_certificateId}:
    get:
      tags:
        - CA Certificate Object > Retrieve CA Certificate
      summary: Retrieve CA Certificate
      description: >-
        # Retrieve CA Certificate
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-ca-certificate-1)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>ca_certificate id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the CA Certificate to retrieve.</td>
          </tr>
        </table>
      parameters:
        - name: ca_certificateId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 15:17:18 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '23'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '1'
          content:
            text/plain:
              schema:
                type: string
              examples:
                example-0:
                  summary: Retrieve Certificate
                  value: "{\r\n    \"id\": \"7fca84d6-7d37-4a74-a7b0-93e576089a41\",\r\n    \"created_at\": 1422386534,\r\n    \"cert\": \"-----BEGIN CERTIFICATE-----...\",\r\n    \"key\": \"-----BEGIN RSA PRIVATE KEY-----...\",\r\n    \"tags\": [\"user-level\", \"low-priority\"]\r\n}"
                example-1:
                  summary: Retrieve CA Certificate - 200
                  value: |-
                    {
                     "id": "04fbeacf-a9f1-4a5d-ae4a-b0407445db3f",
                     "created_at": 1422386534,
                     "cert": "-----BEGIN CERTIFICATE-----...",
                     "tags": [
                      "user-level",
                      "low-priority"
                     ],
                     "key": "incididunt Lorem elit"
                    }
        '400':
          description: Bad Request
          headers:
            Server:
              schema:
                type: string
                example: openresty
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 16:07:38 GMT
            Content-Type:
              schema:
                type: string
                example: text/html; charset=UTF-8
            Content-Length:
              schema:
                type: integer
                example: '122'
            Connection:
              schema:
                type: string
                example: close
          content:
            text/plain:
              schema:
                type: string
              example: |-
                <html>
                    <head>
                        <title>400 Bad Request</title>
                    </head>
                    <body>
                        <center>
                            <h1>400 Bad Request</h1>
                        </center>
                    </body>
                </html>
    patch:
      tags:
        - CA Certificate Object > Update CA Certificate
      summary: Update CA Certificate
      description: >-
        # Update CA Certificate
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-ca-certificate-1)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>ca_certificate id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the CA Certificate to update.</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>cert</td>
            <td>required</td>
            <td>body</td>
            <td>PEM-encoded public certificate of the CA.</td>
          </tr>
          <tr>
            <td>tags</td>
            <td>optional</td>
            <td>body</td>
            <td>An optional set of strings associated with the Certificate, for grouping and filtering.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"cert\": \"-----BEGIN CERTIFICATE----------END
                CERTIFICATE-----\",\n    \"tags\": [\n       
                \"user-level\",\n        \"low-priority\"\n    ]\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: ca_certificateId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - CA Certificate Object > Update Or Create CA Certificate
      summary: Create Or Update CA Certificate
      description: >-
        # Create Or Update CA Certificate
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-ca-certificate)

        * Inserts (or replaces) the CA Certificate under the requested resource
        with the definition specified in the body. The CA Certificate will be
        identified via the name or id attribute.

        * When the name or id attribute has the structure of a UUID, the CA
        Certificate being inserted/replaced will be identified by its id.
        Otherwise it will be identified by its name.

        * When creating a new CA Certificate without specifying id (neither in
        the URL nor in the body), then it will be auto-generated.

        * Notice that specifying a name in the URL and a different one in the
        request body is not allowed.


        # Path parameters

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>ca certificate id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the CA Certificate to create or update.</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>cert</td>
            <td>required</td>
            <td>body</td>
            <td>PEM-encoded public certificate of the CA.</td>
          </tr>
          <tr>
            <td>tags</td>
            <td>optional</td>
            <td>body</td>
            <td>An optional set of strings associated with the Certificate, for grouping and filtering.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"cert\": \"-----BEGIN CERTIFICATE-----...\",\n   
                \"tags\": [\n        \"user-level\",\n       
                \"low-priority\"\n    ]\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: ca_certificateId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier of the CA Certificate to create or update.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /certificates/{ca_certificateId}:
    delete:
      tags:
        - CA Certificate Object > Delete CA Certificate
      summary: Delete Certificate
      description: >-
        # Delete Certificate
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-certificate-1)


        # Path parameters

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>certificate id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Certificate to delete</td>
          </tr>
        </table>
      parameters:
        - name: ca_certificateId
          in: path
          schema:
            type: string
          required: true
      responses:
        '404':
          description: Not Found
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 15:49:31 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '27'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '2'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "message": "SNI not found"
                }
  /snis:
    post:
      tags:
        - SNI Object > Add SNI
      summary: Create SNI
      description: >-
        # Create SNI
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-sni)

        * An SNI object represents a many-to-one mapping of hostnames to a
        certificate. That is, a certificate object can have many hostnames
        associated with it; when Kong receives an SSL request, it uses the SNI
        field in the Client Hello to lookup the certificate object based on the
        SNI associated with the certificate.

        * SNIs can be both tagged and filtered by tags.


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>name</td>
            <td>required</td>
            <td>body</td>
            <td>The SNI name to associate with the given certificate.</td>
          </tr>
          <tr>
            <td>tags</td>
            <td>optional</td>
            <td>body</td>
            <td>An optional set of strings associated with the SNIs, for grouping and filtering.</td>
          </tr>
          <tr>
            <td>certificate</td>
            <td>required</td>
            <td>body</td>
            <td>The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object. With form-encoded, the notation is certificate.id=<certificate id>. With JSON, use “"certificate":{"id":"<certificate id>"}.</td>
          </tr>
        </table>
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: my-sni
                tags:
                  - user-level
                  - low-priority
                certificate:
                  id: a2e013e8-7623-4494-a347-6d29108ff68b
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 17:05:06 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '23'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '0'
          content:
            text/plain:
              schema:
                type: string
              example: "{\r\n    \"id\": \"91020192-062d-416f-a275-9addeeaffaf2\",\r\n    \"name\": \"my-sni\",\r\n    \"created_at\": 1422386534,\r\n    \"tags\": [\"user-level\", \"low-priority\"],\r\n    \"certificate\": {\"id\":\"a2e013e8-7623-4494-a347-6d29108ff68b\"}\r\n}\r\n"
    get:
      tags:
        - SNI Object > List SNIs
      summary: List All SNIs
      description: >-
        # List All SNIs
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-all-snis)

        * An SNI object represents a many-to-one mapping of hostnames to a
        certificate. That is, a certificate object can have many hostnames
        associated with it; when Kong receives an SSL request, it uses the SNI
        field in the Client Hello to lookup the certificate object based on the
        SNI associated with the certificate.

        * SNIs can be both tagged and filtered by tags.
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 17:15:59 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '23'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '1'
          content:
            text/plain:
              schema:
                type: string
              example: "{\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"147f5ef0-1ed6-4711-b77f-489262f8bff7\",\n\t\t\t\"name\": \"my-sni\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"tags\": [\n\t\t\t\t\"user-level\",\n\t\t\t\t\"low-priority\"\n\t\t\t],\n\t\t\t\"certificate\": {\n\t\t\t\t\"id\": \"a3ad71a8-6685-4b03-a101-980a953544f6\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"b87eb55d-69a1-41d2-8653-8d706eecefc0\",\n\t\t\t\"name\": \"my-sni\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"tags\": [\n\t\t\t\t\"admin\",\n\t\t\t\t\"high-priority\",\n\t\t\t\t\"critical\"\n\t\t\t],\n\t\t\t\"certificate\": {\n\t\t\t\t\"id\": \"4e8d95d4-40f2-4818-adcb-30e00c349618\"\n\t\t\t}\n\t\t}\n\t],\n\t\"next\": \"http://localhost:8001/snis?offset=6378122c-a0a1-438d-a5c6-efabae9fb969\"\n}"
  /certificates/{certificateNameOrId}/snis:
    post:
      tags:
        - SNI Object > Add SNI
      summary: Create SNI Associated to a Specific Certificate
      description: >-
        # Create SNI Associated to a Specific Certificate
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-sni-associated-to-a-specific-certificate)

        * An SNI object represents a many-to-one mapping of hostnames to a
        certificate. That is, a certificate object can have many hostnames
        associated with it; when Kong receives an SSL request, it uses the SNI
        field in the Client Hello to lookup the certificate object based on the
        SNI associated with the certificate.

        * SNIs can be both tagged and filtered by tags.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>certificate name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name attribute of the Certificate that should be associated to the newly-created SNI.</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>name</td>
            <td>required</td>
            <td>body</td>
            <td>The SNI name to associate with the given certificate.</td>
          </tr>
          <tr>
            <td>tags</td>
            <td>optional</td>
            <td>body</td>
            <td>An optional set of strings associated with the SNIs, for grouping and filtering.</td>
          </tr>
          <tr>
            <td>certificate</td>
            <td>required</td>
            <td>body</td>
            <td>The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object. With form-encoded, the notation is certificate.id=<certificate id>. With JSON, use “"certificate":{"id":"<certificate id>"}.</td>
          </tr>
        </table>
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: my-sni
                tags:
                  - user-level
                  - low-priority
                certificate:
                  id: a2e013e8-7623-4494-a347-6d29108ff68b
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: certificateNameOrId
          in: path
          schema:
            type: string
          required: true
          description: >-
            The unique identifier or the name attribute of the Certificate that
            should be associated to the newly-created SNI.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - SNI Object > List SNIs
      summary: List SNIs Associated to a Specific Certificate
      description: >-
        # List SNIs Associated to a Specific Certificate
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-snis-associated-to-a-specific-certificate)

        * An SNI object represents a many-to-one mapping of hostnames to a
        certificate. That is, a certificate object can have many hostnames
        associated with it; when Kong receives an SSL request, it uses the SNI
        field in the Client Hello to lookup the certificate object based on the
        SNI associated with the certificate.

        * SNIs can be both tagged and filtered by tags.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>certificate name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name attribute of the Certificate whose SNIs are to be retrieved. When using this endpoint, only SNIs associated to the specified Certificate will be listed.</td>
          </tr>
        </table>
      parameters:
        - name: certificateNameOrId
          in: path
          schema:
            type: string
          required: true
          description: >-
            The unique identifier or the name attribute of the Certificate whose
            SNIs are to be retrieved. When using this endpoint, only SNIs
            associated to the specified Certificate will be listed.
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 17:15:59 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '23'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '1'
          content:
            text/plain:
              schema:
                type: string
              example: "{\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"147f5ef0-1ed6-4711-b77f-489262f8bff7\",\n\t\t\t\"name\": \"my-sni\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"tags\": [\n\t\t\t\t\"user-level\",\n\t\t\t\t\"low-priority\"\n\t\t\t],\n\t\t\t\"certificate\": {\n\t\t\t\t\"id\": \"a3ad71a8-6685-4b03-a101-980a953544f6\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"b87eb55d-69a1-41d2-8653-8d706eecefc0\",\n\t\t\t\"name\": \"my-sni\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"tags\": [\n\t\t\t\t\"admin\",\n\t\t\t\t\"high-priority\",\n\t\t\t\t\"critical\"\n\t\t\t],\n\t\t\t\"certificate\": {\n\t\t\t\t\"id\": \"4e8d95d4-40f2-4818-adcb-30e00c349618\"\n\t\t\t}\n\t\t}\n\t],\n\t\"next\": \"http://localhost:8001/snis?offset=6378122c-a0a1-438d-a5c6-efabae9fb969\"\n}"
  /snis/{sniNameOrId}:
    get:
      tags:
        - SNI Object > Retrieve SNI
      summary: Retrieve SNI
      description: >-
        # Retrieve SNI
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-all-snis)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>sni name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the SNI to retrieve</td>
          </tr>
        </table>
      parameters:
        - name: sniNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the SNI to retrieve
          example: my-sni
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 17:25:48 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '23'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '1'
          content:
            text/plain:
              schema:
                type: string
              example: "{\r\n    \"id\": \"91020192-062d-416f-a275-9addeeaffaf2\",\r\n    \"name\": \"my-sni\",\r\n    \"created_at\": 1422386534,\r\n    \"tags\": [\"user-level\", \"low-priority\"],\r\n    \"certificate\": {\"id\":\"a2e013e8-7623-4494-a347-6d29108ff68b\"}\r\n}"
    patch:
      tags:
        - SNI Object > Update SNI
      summary: Update  SNI
      description: >-
        # Update SNI
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-sni-1)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>sni name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the SNI to update</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>name</td>
            <td>required</td>
            <td>body</td>
            <td>The SNI name to associate with the given certificate.</td>
          </tr>
          <tr>
            <td>tags</td>
            <td>optional</td>
            <td>body</td>
            <td>An optional set of strings associated with the SNIs, for grouping and filtering.</td>
          </tr>
          <tr>
            <td>certificate</td>
            <td>required</td>
            <td>body</td>
            <td>The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object. With form-encoded, the notation is certificate.id=<certificate id>. With JSON, use “"certificate":{"id":"<certificate id>"}.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"name\": \"my-sni\",\n    \"tags\": [\n       
                \"user-level\",\n        \"low-priority\"\n    ],\n   
                \"certificate\": {\n        \"id\":
                \"a2e013e8-7623-4494-a347-6d29108ff68b\"\n    }\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: sniNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the SNI to update
          example: my-sni
      responses:
        '404':
          description: Not Found
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 18:34:09 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '119'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '2'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "message": "could not find the entity with '{name=\"my-sni\"}'",
                    "name": "not found",
                    "fields": {
                        "name": "my-sni"
                    },
                    "code": 6
                }
    put:
      tags:
        - SNI Object > Update Or Create SNI
      summary: Create Or Update SNI
      description: >-
        # Create Or Update SNI
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-sni)

        * Inserts (or replaces) the SNI under the requested resource with the
        definition specified in the body. The SNI will be identified via the
        name or id attribute.

        * When the name or id attribute has the structure of a UUID, the SNI
        being inserted/replaced will be identified by its id. Otherwise it will
        be identified by its name.

        * When creating a new SNI without specifying id (neither in the URL nor
        in the body), then it will be auto-generated.

        * Notice that specifying a name in the URL and a different one in the
        request body is not allowed.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>sni name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the SNI to create or update</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>name</td>
            <td>required</td>
            <td>body</td>
            <td>The SNI name to associate with the given certificate.</td>
          </tr>
          <tr>
            <td>tags</td>
            <td>optional</td>
            <td>body</td>
            <td>An optional set of strings associated with the SNIs, for grouping and filtering.</td>
          </tr>
          <tr>
            <td>certificate</td>
            <td>required</td>
            <td>body</td>
            <td>The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object. With form-encoded, the notation is certificate.id=<certificate id>. With JSON, use “"certificate":{"id":"<certificate id>"}.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"name\": \"my-sni\",\n    \"tags\": [\n       
                \"user-level\",\n        \"low-priority\"\n    ],\n   
                \"certificate\": {\n        \"id\":
                \"a2e013e8-7623-4494-a347-6d29108ff68b\"\n    }\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: sniNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the SNI to create or update
          example: my-sni
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - SNI Object > Retrieve SNI Copy
      summary: Delete SNI
      description: >-
        # Delete SNI
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-sni-1)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>sni name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the SNI to delete</td>
          </tr>
        </table>
      parameters:
        - name: sniNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the SNI to retrieve
          example: my-sni
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 17:25:48 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '23'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '1'
          content:
            text/plain:
              schema:
                type: string
              example: "{\r\n    \"id\": \"91020192-062d-416f-a275-9addeeaffaf2\",\r\n    \"name\": \"my-sni\",\r\n    \"created_at\": 1422386534,\r\n    \"tags\": [\"user-level\", \"low-priority\"],\r\n    \"certificate\": {\"id\":\"a2e013e8-7623-4494-a347-6d29108ff68b\"}\r\n}"
  /certificates/{certificateId}/snis/{sniNameOrId}:
    get:
      tags:
        - SNI Object > Retrieve SNI
      summary: Retrieve SNI Associated to a Specific Certificate
      description: >-
        # Retrieve SNI Associated to a Specific Certificate
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-sni-associated-to-a-specific-certificate)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>certificate id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Certificate to retrieve.</td>
          </tr>
          <tr>
            <td>sni name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the SNI to retrieve.</td>
          </tr>
        </table>
      parameters:
        - name: certificateId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier of the Certificate to retrieve
        - name: sniNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the SNI to retrieve
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - SNI Object > Update SNI
      summary: Update SNI Associated to a Specific Certificate
      description: >-
        # Update SNI Associated to a Specific Certificate
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-sni-associated-to-a-specific-certificate)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>certificate id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Certificate to update.</td>
          </tr>
          <tr>
            <td>sni name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the SNI to update.</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>name</td>
            <td>required</td>
            <td>body</td>
            <td>The SNI name to associate with the given certificate.</td>
          </tr>
          <tr>
            <td>tags</td>
            <td>optional</td>
            <td>body</td>
            <td>An optional set of strings associated with the SNIs, for grouping and filtering.</td>
          </tr>
          <tr>
            <td>certificate</td>
            <td>required</td>
            <td>body</td>
            <td>The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object. With form-encoded, the notation is certificate.id=<certificate id>. With JSON, use “"certificate":{"id":"<certificate id>"}.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"name\": \"my-sni\",\n    \"tags\": [\n       
                \"user-level\",\n        \"low-priority\"\n    ],\n   
                \"certificate\": {\n        \"id\":
                \"a2e013e8-7623-4494-a347-6d29108ff68b\"\n    }\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: certificateId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier of the Certificate to update
        - name: sniNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the SNI to update
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - SNI Object > Update Or Create SNI
      summary: Create Or Update SNI Associated to a Specific Certificate
      description: >-
        # Update SNI Associated to a Specific Certificate
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-sni-associated-to-a-specific-certificate)

        * Inserts (or replaces) the SNI under the requested resource with the
        definition specified in the body. The SNI will be identified via the
        name or id attribute.

        * When the name or id attribute has the structure of a UUID, the SNI
        being inserted/replaced will be identified by its id. Otherwise it will
        be identified by its name.

        * When creating a new SNI without specifying id (neither in the URL nor
        in the body), then it will be auto-generated.

        * Notice that specifying a name in the URL and a different one in the
        request body is not allowed.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>certificate id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Certificate to update.</td>
          </tr>
          <tr>
            <td>sni name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the SNI to update.</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>name</td>
            <td>required</td>
            <td>body</td>
            <td>The SNI name to associate with the given certificate.</td>
          </tr>
          <tr>
            <td>tags</td>
            <td>optional</td>
            <td>body</td>
            <td>An optional set of strings associated with the SNIs, for grouping and filtering.</td>
          </tr>
          <tr>
            <td>certificate</td>
            <td>required</td>
            <td>body</td>
            <td>The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object. With form-encoded, the notation is certificate.id=<certificate id>. With JSON, use “"certificate":{"id":"<certificate id>"}.</td>
          </tr>
        </table>
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"name\": \"my-sni\",\n    \"tags\": [\n       
                \"user-level\",\n        \"low-priority\"\n    ],\n   
                \"certificate\": {\n        \"id\":
                \"a2e013e8-7623-4494-a347-6d29108ff68b\"\n    }\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: certificateId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier of the Certificate to update
        - name: sniNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the SNI to update
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - SNI Object > Retrieve SNI Copy
      summary: Delete SNI Associated to a Specific Certificate
      description: >-
        # Delete SNI Associated to a Specific Certificate
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-sni-associated-to-a-specific-certificate)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>certificate id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the Certificate to delete.</td>
          </tr>
          <tr>
            <td>sni name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the SNI to delete.</td>
          </tr>
        </table>
      parameters:
        - name: certificateId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier of the Certificate to delete
        - name: sniNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the SNI to delete
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /upstreams:
    post:
      tags:
        - Upstream Object > Add Upstream
      summary: Create Upstream
      description: >-
        # Create Upstream
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-upstream)

        * The upstream object represents a virtual hostname and can be used to
        loadbalance incoming requests over multiple services (targets). So for
        example an upstream named service.v1.xyz for a Service object whose host
        is service.v1.xyz. Requests for this Service would be proxied to the
        targets defined within the upstream.


        * An upstream also includes a health checker, which is able to enable
        and disable targets based on their ability or inability to serve
        requests. The configuration for the health checker is stored in the
        upstream object, and applies to all of its targets.


        * Upstreams can be both tagged and filtered by tags.


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>name</td>
            <td>required</td>
            <td>body</td>
            <td>This is a hostname, which must be equal to the host of a Service.</td>
          </tr>
          <tr>
            <td>algorithm</td>
            <td>optional</td>
            <td>body</td>
            <td>Which load balancing algorithm to use. Accepted values are: "consistent-hashing", "least-connections", "round-robin". Defaults to "round-robin".</td>
          </tr>
          <tr>
            <td>hash_on</td>
            <td>optional</td>
            <td>body</td>
            <td>What to use as hashing input. Using none results in a weighted-round-robin scheme with no hashing. Accepted values are: "none", "consumer", "ip", "header", "cookie". Defaults to "none".</td>
          </tr>
          <tr>
            <td>hash_fallback</td>
            <td>optional</td>
            <td>body</td>
            <td>What to use as hashing input if the primary hash_on does not return a hash (eg. header is missing, or no consumer identified). Not available if hash_on is set to cookie. Accepted values are: "none", "consumer", "ip", "header", "cookie". Defaults to "none".</td>
          </tr>
          <tr>
            <td>hash_on_header</td>
            <td>semi-optional</td>
            <td>body</td>
            <td>The header name to take the value from as hash input. Only required when hash_on is set to header.</td>
          </tr>
          <tr>
            <td>hash_fallback_header</td>
            <td>semi-optional</td>
            <td>body</td>
            <td>The header name to take the value from as hash input. Only required when hash_fallback is set to header.</td>
          </tr>
          <tr>
            <td>hash_on_cookie</td>
            <td>semi-optional</td>
            <td>body</td>
            <td>The cookie name to take the value from as hash input. Only required when hash_on or hash_fallback is set to cookie. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.</td>
          </tr>
          <tr>
            <td>hash_on_cookie_path</td>
            <td>semi-optional</td>
            <td>body</td>
            <td>The cookie path to set in the response headers. Only required when hash_on or hash_fallback is set to cookie. Defaults to "/".</td>
          </tr>
          <tr>
            <td>slots</td>
            <td>optional</td>
            <td>body</td>
            <td>The number of slots in the loadbalancer algorithm (10-65536). Defaults to 10000.</td>
          </tr>
          <tr>
            <td>healthchecks.active.https_verify_certificate</td>
            <td>optional</td>
            <td>body</td>
            <td>Whether to check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to true.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.http_statuses</td>
            <td>optional</td>
            <td>body</td>
            <td>An array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. Defaults to [429, 404, 500, 501, 502, 503, 504, 505]. With form-encoded, the notation is http_statuses[]=429&http_statuses[]=404. With JSON, use an Array.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.tcp_failures</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of TCP failures in active probes to consider a target unhealthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.timeouts</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of timeouts in active probes to consider a target unhealthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.http_failures</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of HTTP failures in active probes (as defined by healthchecks.active.unhealthy.http_statuses) to consider a target unhealthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.interval</td>
            <td>optional</td>
            <td>body</td>
            <td>Interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.http_path</td>
            <td>optional</td>
            <td>body</td>
            <td>Path to use in GET HTTP request to run as a probe on active health checks. Defaults to "/".</td>
          </tr>
          <tr>
            <td>healthchecks.active.timeout</td>
            <td>optional</td>
            <td>body</td>
            <td>Socket timeout for active health checks (in seconds). Defaults to 1.</td>
          </tr>
          <tr>
            <td>healthchecks.active.healthy.http_statuses</td>
            <td>optional</td>
            <td>body</td>
            <td>An array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. Defaults to [200, 302]. With form-encoded, the notation is http_statuses[]=200&http_statuses[]=302. With JSON, use an Array.</td>
          </tr>
          <tr>
            <td>healthchecks.active.healthy.interval</td>
            <td>optional</td>
            <td>body</td>
            <td>Interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.healthy.successes</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of successes in active probes (as defined by healthchecks.active.healthy.http_statuses) to consider a target healthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.https_sni</td>
            <td>optional</td>
            <td>body</td>
            <td>The hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target host’s certificate can be verified with the proper SNI.</td>
          </tr>
          <tr>
            <td>healthchecks.active.concurrency</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of targets to check concurrently in active health checks. Defaults to 10.</td>
          </tr>
          <tr>
            <td>healthchecks.active.type</td>
            <td>optional</td>
            <td>body</td>
            <td>Whether to perform active health checks using HTTP or HTTPS, or just attempt a TCP connection. Accepted values are: "tcp", "http", "https", "grpc", "grpcs". Defaults to "http".</td>
          </tr>
          <tr>
            <td>healthchecks.passive.unhealthy.http_failures</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of HTTP failures in proxied traffic (as defined by healthchecks.passive.unhealthy.http_statuses) to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.unhealthy.http_statuses</td>
            <td>optional</td>
            <td>body</td>
            <td>An array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. Defaults to [429, 500, 503]. With form-encoded, the notation is http_statuses[]=429&http_statuses[]=500. With JSON, use an Array.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.unhealthy.tcp_failures</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of TCP failures in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.unhealthy.timeouts</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.type</td>
            <td>optional</td>
            <td>body</td>
            <td>Whether to perform passive health checks interpreting HTTP/HTTPS statuses, or just check for TCP connection success. In passive checks, http and https options are equivalent. Accepted values are: "tcp", "http", "https", "grpc", "grpcs". Defaults to "http".</td>
          </tr>
          <tr>
            <td>healthchecks.passive.healthy.successes</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of successes in proxied traffic (as defined by healthchecks.passive.healthy.http_statuses) to consider a target healthy, as observed by passive health checks. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.healthy.http_statuses</td>
            <td>optional</td>
            <td>body</td>
            <td>An array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks. Defaults to [200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]. With form-encoded, the notation is http_statuses[]=200&http_statuses[]=201. With JSON, use an Array.</td>
          </tr>
          <tr>
            <td>healthchecks.threshold</td>
            <td>optional</td>
            <td>body</td>
            <td>The minimum percentage of the upstream’s targets’ weight that must be available for the whole upstream to be considered healthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>tags</td>
            <td>optional</td>
            <td>body</td>
            <td>An optional set of strings associated with the Upstream, for grouping and filtering.</td>
          </tr>
          <tr>
            <td>host_header</td>
            <td>optional</td>
            <td>body</td>
            <td>The hostname to be used as Host header when proxying requests through Kong.</td>
          </tr>
        </table>
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                created_at: 1584044267
                hash_on: none
                id: f8d38987-1eb6-4cb2-a7c8-6b11a17de911
                algorithm: round-robin
                name: my-upstream
                tags:
                  - user-level
                  - low-priority
                hash_fallback_header: null
                hash_fallback: none
                hash_on_cookie: null
                host_header: example.com
                hash_on_cookie_path: /
                healthchecks:
                  threshold: 0
                  active:
                    unhealthy:
                      http_statuses:
                        - 429
                        - 404
                        - 500
                        - 501
                        - 502
                        - 503
                        - 504
                        - 505
                      tcp_failures: 0
                      timeouts: 0
                      http_failures: 0
                      interval: 0
                    type: http
                    http_path: /
                    timeout: 1
                    healthy:
                      successes: 0
                      interval: 0
                      http_statuses:
                        - 200
                        - 302
                    https_sni: example.com
                    https_verify_certificate: true
                    concurrency: 10
                  passive:
                    unhealthy:
                      http_failures: 0
                      http_statuses:
                        - 429
                        - 500
                        - 503
                      tcp_failures: 0
                      timeouts: 0
                    healthy:
                      http_statuses:
                        - 200
                        - 201
                        - 202
                        - 203
                        - 204
                        - 205
                        - 206
                        - 207
                        - 208
                        - 226
                        - 300
                        - 301
                        - 302
                        - 303
                        - 304
                        - 305
                        - 306
                        - 307
                        - 308
                      successes: 0
                    type: http
                hash_on_header: null
                slots: 10000
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 20:17:47 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '922'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '32'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "created_at": 1584044267,
                    "hash_on": "none",
                    "id": "f8d38987-1eb6-4cb2-a7c8-6b11a17de911",
                    "algorithm": "round-robin",
                    "name": "my-upstream",
                    "tags": [
                        "user-level",
                        "low-priority"
                    ],
                    "hash_fallback_header": null,
                    "hash_fallback": "none",
                    "hash_on_cookie": null,
                    "host_header": "example.com",
                    "hash_on_cookie_path": "/",
                    "healthchecks": {
                        "threshold": 0,
                        "active": {
                            "unhealthy": {
                                "http_statuses": [
                                    429,
                                    404,
                                    500,
                                    501,
                                    502,
                                    503,
                                    504,
                                    505
                                ],
                                "tcp_failures": 0,
                                "timeouts": 0,
                                "http_failures": 0,
                                "interval": 0
                            },
                            "type": "http",
                            "http_path": "/",
                            "timeout": 1,
                            "healthy": {
                                "successes": 0,
                                "interval": 0,
                                "http_statuses": [
                                    200,
                                    302
                                ]
                            },
                            "https_sni": "example.com",
                            "https_verify_certificate": true,
                            "concurrency": 10
                        },
                        "passive": {
                            "unhealthy": {
                                "http_failures": 0,
                                "http_statuses": [
                                    429,
                                    500,
                                    503
                                ],
                                "tcp_failures": 0,
                                "timeouts": 0
                            },
                            "healthy": {
                                "http_statuses": [
                                    200,
                                    201,
                                    202,
                                    203,
                                    204,
                                    205,
                                    206,
                                    207,
                                    208,
                                    226,
                                    300,
                                    301,
                                    302,
                                    303,
                                    304,
                                    305,
                                    306,
                                    307,
                                    308
                                ],
                                "successes": 0
                            },
                            "type": "http"
                        }
                    },
                    "hash_on_header": null,
                    "slots": 10000
                }
    get:
      tags:
        - Upstream Object > List All Upstreams
      summary: List All Upstreams
      description: >-
        # List All Upstreams
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-all-upstreams)
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 20:21:55 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '945'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '1'
          content:
            text/plain:
              schema:
                type: string
              example: "{\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"ea29aaa3-3b2d-488c-b90c-56df8e0dd8c6\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"name\": \"my-upstream\",\n\t\t\t\"algorithm\": \"round-robin\",\n\t\t\t\"hash_on\": \"none\",\n\t\t\t\"hash_fallback\": \"none\",\n\t\t\t\"hash_on_cookie_path\": \"/\",\n\t\t\t\"slots\": 10000,\n\t\t\t\"healthchecks\": {\n\t\t\t\t\"active\": {\n\t\t\t\t\t\"https_verify_certificate\": true,\n\t\t\t\t\t\"unhealthy\": {\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t429,\n\t\t\t\t\t\t\t404,\n\t\t\t\t\t\t\t500,\n\t\t\t\t\t\t\t501,\n\t\t\t\t\t\t\t502,\n\t\t\t\t\t\t\t503,\n\t\t\t\t\t\t\t504,\n\t\t\t\t\t\t\t505\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"tcp_failures\": 0,\n\t\t\t\t\t\t\"timeouts\": 0,\n\t\t\t\t\t\t\"http_failures\": 0,\n\t\t\t\t\t\t\"interval\": 0\n\t\t\t\t\t},\n\t\t\t\t\t\"http_path\": \"/\",\n\t\t\t\t\t\"timeout\": 1,\n\t\t\t\t\t\"healthy\": {\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t200,\n\t\t\t\t\t\t\t302\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"interval\": 0,\n\t\t\t\t\t\t\"successes\": 0\n\t\t\t\t\t},\n\t\t\t\t\t\"https_sni\": \"example.com\",\n\t\t\t\t\t\"concurrency\": 10,\n\t\t\t\t\t\"type\": \"http\"\n\t\t\t\t},\n\t\t\t\t\"passive\": {\n\t\t\t\t\t\"unhealthy\": {\n\t\t\t\t\t\t\"http_failures\": 0,\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t429,\n\t\t\t\t\t\t\t500,\n\t\t\t\t\t\t\t503\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"tcp_failures\": 0,\n\t\t\t\t\t\t\"timeouts\": 0\n\t\t\t\t\t},\n\t\t\t\t\t\"type\": \"http\",\n\t\t\t\t\t\"healthy\": {\n\t\t\t\t\t\t\"successes\": 0,\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t200,\n\t\t\t\t\t\t\t201,\n\t\t\t\t\t\t\t202,\n\t\t\t\t\t\t\t203,\n\t\t\t\t\t\t\t204,\n\t\t\t\t\t\t\t205,\n\t\t\t\t\t\t\t206,\n\t\t\t\t\t\t\t207,\n\t\t\t\t\t\t\t208,\n\t\t\t\t\t\t\t226,\n\t\t\t\t\t\t\t300,\n\t\t\t\t\t\t\t301,\n\t\t\t\t\t\t\t302,\n\t\t\t\t\t\t\t303,\n\t\t\t\t\t\t\t304,\n\t\t\t\t\t\t\t305,\n\t\t\t\t\t\t\t306,\n\t\t\t\t\t\t\t307,\n\t\t\t\t\t\t\t308\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"threshold\": 0\n\t\t\t},\n\t\t\t\"tags\": [\n\t\t\t\t\"user-level\",\n\t\t\t\t\"low-priority\"\n\t\t\t],\n\t\t\t\"host_header\": \"example.com\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"4fe14415-73d5-4f00-9fbc-c72a0fccfcb2\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"name\": \"my-upstream\",\n\t\t\t\"algorithm\": \"round-robin\",\n\t\t\t\"hash_on\": \"none\",\n\t\t\t\"hash_fallback\": \"none\",\n\t\t\t\"hash_on_cookie_path\": \"/\",\n\t\t\t\"slots\": 10000,\n\t\t\t\"healthchecks\": {\n\t\t\t\t\"active\": {\n\t\t\t\t\t\"https_verify_certificate\": true,\n\t\t\t\t\t\"unhealthy\": {\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t429,\n\t\t\t\t\t\t\t404,\n\t\t\t\t\t\t\t500,\n\t\t\t\t\t\t\t501,\n\t\t\t\t\t\t\t502,\n\t\t\t\t\t\t\t503,\n\t\t\t\t\t\t\t504,\n\t\t\t\t\t\t\t505\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"tcp_failures\": 0,\n\t\t\t\t\t\t\"timeouts\": 0,\n\t\t\t\t\t\t\"http_failures\": 0,\n\t\t\t\t\t\t\"interval\": 0\n\t\t\t\t\t},\n\t\t\t\t\t\"http_path\": \"/\",\n\t\t\t\t\t\"timeout\": 1,\n\t\t\t\t\t\"healthy\": {\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t200,\n\t\t\t\t\t\t\t302\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"interval\": 0,\n\t\t\t\t\t\t\"successes\": 0\n\t\t\t\t\t},\n\t\t\t\t\t\"https_sni\": \"example.com\",\n\t\t\t\t\t\"concurrency\": 10,\n\t\t\t\t\t\"type\": \"http\"\n\t\t\t\t},\n\t\t\t\t\"passive\": {\n\t\t\t\t\t\"unhealthy\": {\n\t\t\t\t\t\t\"http_failures\": 0,\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t429,\n\t\t\t\t\t\t\t500,\n\t\t\t\t\t\t\t503\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"tcp_failures\": 0,\n\t\t\t\t\t\t\"timeouts\": 0\n\t\t\t\t\t},\n\t\t\t\t\t\"type\": \"http\",\n\t\t\t\t\t\"healthy\": {\n\t\t\t\t\t\t\"successes\": 0,\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t200,\n\t\t\t\t\t\t\t201,\n\t\t\t\t\t\t\t202,\n\t\t\t\t\t\t\t203,\n\t\t\t\t\t\t\t204,\n\t\t\t\t\t\t\t205,\n\t\t\t\t\t\t\t206,\n\t\t\t\t\t\t\t207,\n\t\t\t\t\t\t\t208,\n\t\t\t\t\t\t\t226,\n\t\t\t\t\t\t\t300,\n\t\t\t\t\t\t\t301,\n\t\t\t\t\t\t\t302,\n\t\t\t\t\t\t\t303,\n\t\t\t\t\t\t\t304,\n\t\t\t\t\t\t\t305,\n\t\t\t\t\t\t\t306,\n\t\t\t\t\t\t\t307,\n\t\t\t\t\t\t\t308\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"threshold\": 0\n\t\t\t},\n\t\t\t\"tags\": [\n\t\t\t\t\"admin\",\n\t\t\t\t\"high-priority\",\n\t\t\t\t\"critical\"\n\t\t\t],\n\t\t\t\"host_header\": \"example.com\"\n\t\t}\n\t],\n\t\"next\": \"http://localhost:8001/upstreams?offset=6378122c-a0a1-438d-a5c6-efabae9fb969\"\n}"
  /upstreams/{upstreamNameOrId}:
    get:
      tags:
        - Upstream Object > Retrieve Upstream
      summary: Retrieve Upstream
      description: >-
        # Retrieve Upstream
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-upstream-1)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>upstream name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Upstream to retrieve.</td>
          </tr>
        </table>
      parameters:
        - name: upstreamNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the Upstream to retrieve.
          example: my-upstream
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 20:39:05 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '922'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '1'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "created_at": 1584044267,
                    "hash_on": "none",
                    "id": "f8d38987-1eb6-4cb2-a7c8-6b11a17de911",
                    "algorithm": "round-robin",
                    "name": "my-upstream",
                    "tags": [
                        "user-level",
                        "low-priority"
                    ],
                    "hash_fallback_header": null,
                    "hash_fallback": "none",
                    "hash_on_cookie": null,
                    "host_header": "example.com",
                    "hash_on_cookie_path": "/",
                    "healthchecks": {
                        "threshold": 0,
                        "active": {
                            "unhealthy": {
                                "http_statuses": [
                                    429,
                                    404,
                                    500,
                                    501,
                                    502,
                                    503,
                                    504,
                                    505
                                ],
                                "tcp_failures": 0,
                                "timeouts": 0,
                                "http_failures": 0,
                                "interval": 0
                            },
                            "type": "http",
                            "http_path": "/",
                            "timeout": 1,
                            "healthy": {
                                "successes": 0,
                                "interval": 0,
                                "http_statuses": [
                                    200,
                                    302
                                ]
                            },
                            "https_sni": "example.com",
                            "https_verify_certificate": true,
                            "concurrency": 10
                        },
                        "passive": {
                            "unhealthy": {
                                "http_failures": 0,
                                "http_statuses": [
                                    429,
                                    500,
                                    503
                                ],
                                "tcp_failures": 0,
                                "timeouts": 0
                            },
                            "healthy": {
                                "http_statuses": [
                                    200,
                                    201,
                                    202,
                                    203,
                                    204,
                                    205,
                                    206,
                                    207,
                                    208,
                                    226,
                                    300,
                                    301,
                                    302,
                                    303,
                                    304,
                                    305,
                                    306,
                                    307,
                                    308
                                ],
                                "successes": 0
                            },
                            "type": "http"
                        }
                    },
                    "hash_on_header": null,
                    "slots": 10000
                }
    patch:
      tags:
        - Upstream Object > Update Upstream
      summary: Update Upstream
      description: >-
        # Update Upstream
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-upstream-1)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>upstream name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Upstream to update.</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>name</td>
            <td>required</td>
            <td>body</td>
            <td>This is a hostname, which must be equal to the host of a Service.</td>
          </tr>
          <tr>
            <td>algorithm</td>
            <td>optional</td>
            <td>body</td>
            <td>Which load balancing algorithm to use. Accepted values are: "consistent-hashing", "least-connections", "round-robin". Defaults to "round-robin".</td>
          </tr>
          <tr>
            <td>hash_on</td>
            <td>optional</td>
            <td>body</td>
            <td>What to use as hashing input. Using none results in a weighted-round-robin scheme with no hashing. Accepted values are: "none", "consumer", "ip", "header", "cookie". Defaults to "none".</td>
          </tr>
          <tr>
            <td>hash_fallback</td>
            <td>optional</td>
            <td>body</td>
            <td>What to use as hashing input if the primary hash_on does not return a hash (eg. header is missing, or no consumer identified). Not available if hash_on is set to cookie. Accepted values are: "none", "consumer", "ip", "header", "cookie". Defaults to "none".</td>
          </tr>
          <tr>
            <td>hash_on_header</td>
            <td>semi-optional</td>
            <td>body</td>
            <td>The header name to take the value from as hash input. Only required when hash_on is set to header.</td>
          </tr>
          <tr>
            <td>hash_fallback_header</td>
            <td>semi-optional</td>
            <td>body</td>
            <td>The header name to take the value from as hash input. Only required when hash_fallback is set to header.</td>
          </tr>
          <tr>
            <td>hash_on_cookie</td>
            <td>semi-optional</td>
            <td>body</td>
            <td>The cookie name to take the value from as hash input. Only required when hash_on or hash_fallback is set to cookie. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.</td>
          </tr>
          <tr>
            <td>hash_on_cookie_path</td>
            <td>semi-optional</td>
            <td>body</td>
            <td>The cookie path to set in the response headers. Only required when hash_on or hash_fallback is set to cookie. Defaults to "/".</td>
          </tr>
          <tr>
            <td>slots</td>
            <td>optional</td>
            <td>body</td>
            <td>The number of slots in the loadbalancer algorithm (10-65536). Defaults to 10000.</td>
          </tr>
          <tr>
            <td>healthchecks.active.https_verify_certificate</td>
            <td>optional</td>
            <td>body</td>
            <td>Whether to check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to true.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.http_statuses</td>
            <td>optional</td>
            <td>body</td>
            <td>An array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. Defaults to [429, 404, 500, 501, 502, 503, 504, 505]. With form-encoded, the notation is http_statuses[]=429&http_statuses[]=404. With JSON, use an Array.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.tcp_failures</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of TCP failures in active probes to consider a target unhealthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.timeouts</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of timeouts in active probes to consider a target unhealthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.http_failures</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of HTTP failures in active probes (as defined by healthchecks.active.unhealthy.http_statuses) to consider a target unhealthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.interval</td>
            <td>optional</td>
            <td>body</td>
            <td>Interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.http_path</td>
            <td>optional</td>
            <td>body</td>
            <td>Path to use in GET HTTP request to run as a probe on active health checks. Defaults to "/".</td>
          </tr>
          <tr>
            <td>healthchecks.active.timeout</td>
            <td>optional</td>
            <td>body</td>
            <td>Socket timeout for active health checks (in seconds). Defaults to 1.</td>
          </tr>
          <tr>
            <td>healthchecks.active.healthy.http_statuses</td>
            <td>optional</td>
            <td>body</td>
            <td>An array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. Defaults to [200, 302]. With form-encoded, the notation is http_statuses[]=200&http_statuses[]=302. With JSON, use an Array.</td>
          </tr>
          <tr>
            <td>healthchecks.active.healthy.interval</td>
            <td>optional</td>
            <td>body</td>
            <td>Interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.healthy.successes</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of successes in active probes (as defined by healthchecks.active.healthy.http_statuses) to consider a target healthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.https_sni</td>
            <td>optional</td>
            <td>body</td>
            <td>The hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target host’s certificate can be verified with the proper SNI.</td>
          </tr>
          <tr>
            <td>healthchecks.active.concurrency</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of targets to check concurrently in active health checks. Defaults to 10.</td>
          </tr>
          <tr>
            <td>healthchecks.active.type</td>
            <td>optional</td>
            <td>body</td>
            <td>Whether to perform active health checks using HTTP or HTTPS, or just attempt a TCP connection. Accepted values are: "tcp", "http", "https", "grpc", "grpcs". Defaults to "http".</td>
          </tr>
          <tr>
            <td>healthchecks.passive.unhealthy.http_failures</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of HTTP failures in proxied traffic (as defined by healthchecks.passive.unhealthy.http_statuses) to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.unhealthy.http_statuses</td>
            <td>optional</td>
            <td>body</td>
            <td>An array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. Defaults to [429, 500, 503]. With form-encoded, the notation is http_statuses[]=429&http_statuses[]=500. With JSON, use an Array.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.unhealthy.tcp_failures</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of TCP failures in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.unhealthy.timeouts</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.type</td>
            <td>optional</td>
            <td>body</td>
            <td>Whether to perform passive health checks interpreting HTTP/HTTPS statuses, or just check for TCP connection success. In passive checks, http and https options are equivalent. Accepted values are: "tcp", "http", "https", "grpc", "grpcs". Defaults to "http".</td>
          </tr>
          <tr>
            <td>healthchecks.passive.healthy.successes</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of successes in proxied traffic (as defined by healthchecks.passive.healthy.http_statuses) to consider a target healthy, as observed by passive health checks. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.healthy.http_statuses</td>
            <td>optional</td>
            <td>body</td>
            <td>An array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks. Defaults to [200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]. With form-encoded, the notation is http_statuses[]=200&http_statuses[]=201. With JSON, use an Array.</td>
          </tr>
          <tr>
            <td>healthchecks.threshold</td>
            <td>optional</td>
            <td>body</td>
            <td>The minimum percentage of the upstream’s targets’ weight that must be available for the whole upstream to be considered healthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>tags</td>
            <td>optional</td>
            <td>body</td>
            <td>An optional set of strings associated with the Upstream, for grouping and filtering.</td>
          </tr>
          <tr>
            <td>host_header</td>
            <td>optional</td>
            <td>body</td>
            <td>The hostname to be used as Host header when proxying requests through Kong.</td>
          </tr>
        </table>
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                hash_on: none
                algorithm: round-robin
                name: my-upstream
                tags:
                  - user-level
                  - low-priority
                hash_fallback_header: null
                hash_fallback: none
                hash_on_cookie: null
                host_header: example.com
                hash_on_cookie_path: /
                healthchecks:
                  threshold: 0
                  active:
                    unhealthy:
                      http_statuses:
                        - 429
                        - 404
                        - 500
                        - 501
                        - 502
                        - 503
                        - 504
                        - 505
                      tcp_failures: 0
                      timeouts: 0
                      http_failures: 0
                      interval: 0
                    type: http
                    http_path: /
                    timeout: 1
                    healthy:
                      successes: 0
                      interval: 0
                      http_statuses:
                        - 200
                        - 302
                    https_sni: example.com
                    https_verify_certificate: true
                    concurrency: 10
                  passive:
                    unhealthy:
                      http_failures: 0
                      http_statuses:
                        - 429
                        - 500
                        - 503
                      tcp_failures: 0
                      timeouts: 0
                    healthy:
                      http_statuses:
                        - 200
                        - 201
                        - 202
                        - 203
                        - 204
                        - 205
                        - 206
                        - 207
                        - 208
                        - 226
                        - 300
                        - 301
                        - 302
                        - 303
                        - 304
                        - 305
                        - 306
                        - 307
                        - 308
                      successes: 0
                    type: http
                hash_on_header: null
                slots: 10000
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: upstreamNameOrId
          in: path
          schema:
            type: string
          required: true
          example: my-upstream
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 20:47:32 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '922'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '21'
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "created_at": 1584044267,
                    "hash_on": "none",
                    "id": "f8d38987-1eb6-4cb2-a7c8-6b11a17de911",
                    "algorithm": "round-robin",
                    "name": "my-upstream",
                    "tags": [
                        "user-level",
                        "low-priority"
                    ],
                    "hash_fallback_header": null,
                    "hash_fallback": "none",
                    "hash_on_cookie": null,
                    "host_header": "example.com",
                    "hash_on_cookie_path": "/",
                    "healthchecks": {
                        "threshold": 0,
                        "active": {
                            "unhealthy": {
                                "http_statuses": [
                                    429,
                                    404,
                                    500,
                                    501,
                                    502,
                                    503,
                                    504,
                                    505
                                ],
                                "tcp_failures": 0,
                                "timeouts": 0,
                                "http_failures": 0,
                                "interval": 0
                            },
                            "type": "http",
                            "http_path": "/",
                            "timeout": 1,
                            "healthy": {
                                "successes": 0,
                                "interval": 0,
                                "http_statuses": [
                                    200,
                                    302
                                ]
                            },
                            "https_sni": "example.com",
                            "https_verify_certificate": true,
                            "concurrency": 10
                        },
                        "passive": {
                            "unhealthy": {
                                "http_failures": 0,
                                "http_statuses": [
                                    429,
                                    500,
                                    503
                                ],
                                "tcp_failures": 0,
                                "timeouts": 0
                            },
                            "healthy": {
                                "http_statuses": [
                                    200,
                                    201,
                                    202,
                                    203,
                                    204,
                                    205,
                                    206,
                                    207,
                                    208,
                                    226,
                                    300,
                                    301,
                                    302,
                                    303,
                                    304,
                                    305,
                                    306,
                                    307,
                                    308
                                ],
                                "successes": 0
                            },
                            "type": "http"
                        }
                    },
                    "hash_on_header": null,
                    "slots": 10000
                }
    put:
      tags:
        - Upstream Object > Update Or Create Upstream
      summary: Create Or Update Upstream
      description: >-
        # Create Or Update Upstream
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-upstream)

        * Inserts (or replaces) the Upstream under the requested resource with
        the definition specified in the body. The Upstream will be identified
        via the name or id attribute.


        * When the name or id attribute has the structure of a UUID, the
        Upstream being inserted/replaced will be identified by its id. Otherwise
        it will be identified by its name.


        * When creating a new Upstream without specifying id (neither in the URL
        nor in the body), then it will be auto-generated.


        * Notice that specifying a name in the URL and a different one in the
        request body is not allowed.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>upstream name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Upstream to create or update.</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>name</td>
            <td>required</td>
            <td>body</td>
            <td>This is a hostname, which must be equal to the host of a Service.</td>
          </tr>
          <tr>
            <td>algorithm</td>
            <td>optional</td>
            <td>body</td>
            <td>Which load balancing algorithm to use. Accepted values are: "consistent-hashing", "least-connections", "round-robin". Defaults to "round-robin".</td>
          </tr>
          <tr>
            <td>hash_on</td>
            <td>optional</td>
            <td>body</td>
            <td>What to use as hashing input. Using none results in a weighted-round-robin scheme with no hashing. Accepted values are: "none", "consumer", "ip", "header", "cookie". Defaults to "none".</td>
          </tr>
          <tr>
            <td>hash_fallback</td>
            <td>optional</td>
            <td>body</td>
            <td>What to use as hashing input if the primary hash_on does not return a hash (eg. header is missing, or no consumer identified). Not available if hash_on is set to cookie. Accepted values are: "none", "consumer", "ip", "header", "cookie". Defaults to "none".</td>
          </tr>
          <tr>
            <td>hash_on_header</td>
            <td>semi-optional</td>
            <td>body</td>
            <td>The header name to take the value from as hash input. Only required when hash_on is set to header.</td>
          </tr>
          <tr>
            <td>hash_fallback_header</td>
            <td>semi-optional</td>
            <td>body</td>
            <td>The header name to take the value from as hash input. Only required when hash_fallback is set to header.</td>
          </tr>
          <tr>
            <td>hash_on_cookie</td>
            <td>semi-optional</td>
            <td>body</td>
            <td>The cookie name to take the value from as hash input. Only required when hash_on or hash_fallback is set to cookie. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.</td>
          </tr>
          <tr>
            <td>hash_on_cookie_path</td>
            <td>semi-optional</td>
            <td>body</td>
            <td>The cookie path to set in the response headers. Only required when hash_on or hash_fallback is set to cookie. Defaults to "/".</td>
          </tr>
          <tr>
            <td>slots</td>
            <td>optional</td>
            <td>body</td>
            <td>The number of slots in the loadbalancer algorithm (10-65536). Defaults to 10000.</td>
          </tr>
          <tr>
            <td>healthchecks.active.https_verify_certificate</td>
            <td>optional</td>
            <td>body</td>
            <td>Whether to check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to true.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.http_statuses</td>
            <td>optional</td>
            <td>body</td>
            <td>An array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. Defaults to [429, 404, 500, 501, 502, 503, 504, 505]. With form-encoded, the notation is http_statuses[]=429&http_statuses[]=404. With JSON, use an Array.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.tcp_failures</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of TCP failures in active probes to consider a target unhealthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.timeouts</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of timeouts in active probes to consider a target unhealthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.http_failures</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of HTTP failures in active probes (as defined by healthchecks.active.unhealthy.http_statuses) to consider a target unhealthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.interval</td>
            <td>optional</td>
            <td>body</td>
            <td>Interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.http_path</td>
            <td>optional</td>
            <td>body</td>
            <td>Path to use in GET HTTP request to run as a probe on active health checks. Defaults to "/".</td>
          </tr>
          <tr>
            <td>healthchecks.active.timeout</td>
            <td>optional</td>
            <td>body</td>
            <td>Socket timeout for active health checks (in seconds). Defaults to 1.</td>
          </tr>
          <tr>
            <td>healthchecks.active.healthy.http_statuses</td>
            <td>optional</td>
            <td>body</td>
            <td>An array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. Defaults to [200, 302]. With form-encoded, the notation is http_statuses[]=200&http_statuses[]=302. With JSON, use an Array.</td>
          </tr>
          <tr>
            <td>healthchecks.active.healthy.interval</td>
            <td>optional</td>
            <td>body</td>
            <td>Interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.healthy.successes</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of successes in active probes (as defined by healthchecks.active.healthy.http_statuses) to consider a target healthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.https_sni</td>
            <td>optional</td>
            <td>body</td>
            <td>The hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target host’s certificate can be verified with the proper SNI.</td>
          </tr>
          <tr>
            <td>healthchecks.active.concurrency</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of targets to check concurrently in active health checks. Defaults to 10.</td>
          </tr>
          <tr>
            <td>healthchecks.active.type</td>
            <td>optional</td>
            <td>body</td>
            <td>Whether to perform active health checks using HTTP or HTTPS, or just attempt a TCP connection. Accepted values are: "tcp", "http", "https", "grpc", "grpcs". Defaults to "http".</td>
          </tr>
          <tr>
            <td>healthchecks.passive.unhealthy.http_failures</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of HTTP failures in proxied traffic (as defined by healthchecks.passive.unhealthy.http_statuses) to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.unhealthy.http_statuses</td>
            <td>optional</td>
            <td>body</td>
            <td>An array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. Defaults to [429, 500, 503]. With form-encoded, the notation is http_statuses[]=429&http_statuses[]=500. With JSON, use an Array.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.unhealthy.tcp_failures</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of TCP failures in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.unhealthy.timeouts</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.type</td>
            <td>optional</td>
            <td>body</td>
            <td>Whether to perform passive health checks interpreting HTTP/HTTPS statuses, or just check for TCP connection success. In passive checks, http and https options are equivalent. Accepted values are: "tcp", "http", "https", "grpc", "grpcs". Defaults to "http".</td>
          </tr>
          <tr>
            <td>healthchecks.passive.healthy.successes</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of successes in proxied traffic (as defined by healthchecks.passive.healthy.http_statuses) to consider a target healthy, as observed by passive health checks. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.healthy.http_statuses</td>
            <td>optional</td>
            <td>body</td>
            <td>An array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks. Defaults to [200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]. With form-encoded, the notation is http_statuses[]=200&http_statuses[]=201. With JSON, use an Array.</td>
          </tr>
          <tr>
            <td>healthchecks.threshold</td>
            <td>optional</td>
            <td>body</td>
            <td>The minimum percentage of the upstream’s targets’ weight that must be available for the whole upstream to be considered healthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>tags</td>
            <td>optional</td>
            <td>body</td>
            <td>An optional set of strings associated with the Upstream, for grouping and filtering.</td>
          </tr>
          <tr>
            <td>host_header</td>
            <td>optional</td>
            <td>body</td>
            <td>The hostname to be used as Host header when proxying requests through Kong.</td>
          </tr>
        </table>
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                hash_on: none
                algorithm: round-robin
                name: my-upstream
                tags:
                  - user-level
                  - low-priority
                hash_fallback_header: null
                hash_fallback: none
                hash_on_cookie: null
                host_header: example.com
                hash_on_cookie_path: /
                healthchecks:
                  threshold: 0
                  active:
                    unhealthy:
                      http_statuses:
                        - 429
                        - 404
                        - 500
                        - 501
                        - 502
                        - 503
                        - 504
                        - 505
                      tcp_failures: 0
                      timeouts: 0
                      http_failures: 0
                      interval: 0
                    type: http
                    http_path: /
                    timeout: 1
                    healthy:
                      successes: 0
                      interval: 0
                      http_statuses:
                        - 200
                        - 302
                    https_sni: example.com
                    https_verify_certificate: true
                    concurrency: 10
                  passive:
                    unhealthy:
                      http_failures: 0
                      http_statuses:
                        - 429
                        - 500
                        - 503
                      tcp_failures: 0
                      timeouts: 0
                    healthy:
                      http_statuses:
                        - 200
                        - 201
                        - 202
                        - 203
                        - 204
                        - 205
                        - 206
                        - 207
                        - 208
                        - 226
                        - 300
                        - 301
                        - 302
                        - 303
                        - 304
                        - 305
                        - 306
                        - 307
                        - 308
                      successes: 0
                    type: http
                hash_on_header: null
                slots: 10000
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: upstreamNameOrId
          in: path
          schema:
            type: string
          required: true
          example: my-upstream
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Upstream Object > Delete Upstream
      summary: Delete Upstream
      description: >-
        # Delete Upstream
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-upstream-1)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>upstream name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the Upstream to delete.</td>
          </tr>
        </table>
      parameters:
        - name: upstreamNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the Upstream to retrieve.
          example: my-upstream
      responses:
        '204':
          description: No Content
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 21:14:03 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '27'
          content:
            text/plain:
              schema:
                type: string
              example: null
  /targets/{targetHost:portOrId}/upstream:
    get:
      tags:
        - Upstream Object > Retrieve Upstream
      summary: Retrieve Upstream Associated to a Specific Target
      description: >-
        # Retrieve Upstream Associated to a Specific Target
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#retrieve-upstream-associated-to-a-specific-target)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>target host:port or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the host:port of the Target associated to the Upstream to be retrieved.</td>
          </tr>
        </table>
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - Upstream Object > Update Upstream
      summary: Update Upstream Associated to a Specific Target
      description: >-
        # Update Upstream Associated to a Specific Target
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#update-upstream-associated-to-a-specific-target)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>target host:port or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the host:port of the Target associated to the Upstream to be updated.</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>name</td>
            <td>required</td>
            <td>body</td>
            <td>This is a hostname, which must be equal to the host of a Service.</td>
          </tr>
          <tr>
            <td>algorithm</td>
            <td>optional</td>
            <td>body</td>
            <td>Which load balancing algorithm to use. Accepted values are: "consistent-hashing", "least-connections", "round-robin". Defaults to "round-robin".</td>
          </tr>
          <tr>
            <td>hash_on</td>
            <td>optional</td>
            <td>body</td>
            <td>What to use as hashing input. Using none results in a weighted-round-robin scheme with no hashing. Accepted values are: "none", "consumer", "ip", "header", "cookie". Defaults to "none".</td>
          </tr>
          <tr>
            <td>hash_fallback</td>
            <td>optional</td>
            <td>body</td>
            <td>What to use as hashing input if the primary hash_on does not return a hash (eg. header is missing, or no consumer identified). Not available if hash_on is set to cookie. Accepted values are: "none", "consumer", "ip", "header", "cookie". Defaults to "none".</td>
          </tr>
          <tr>
            <td>hash_on_header</td>
            <td>semi-optional</td>
            <td>body</td>
            <td>The header name to take the value from as hash input. Only required when hash_on is set to header.</td>
          </tr>
          <tr>
            <td>hash_fallback_header</td>
            <td>semi-optional</td>
            <td>body</td>
            <td>The header name to take the value from as hash input. Only required when hash_fallback is set to header.</td>
          </tr>
          <tr>
            <td>hash_on_cookie</td>
            <td>semi-optional</td>
            <td>body</td>
            <td>The cookie name to take the value from as hash input. Only required when hash_on or hash_fallback is set to cookie. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.</td>
          </tr>
          <tr>
            <td>hash_on_cookie_path</td>
            <td>semi-optional</td>
            <td>body</td>
            <td>The cookie path to set in the response headers. Only required when hash_on or hash_fallback is set to cookie. Defaults to "/".</td>
          </tr>
          <tr>
            <td>slots</td>
            <td>optional</td>
            <td>body</td>
            <td>The number of slots in the loadbalancer algorithm (10-65536). Defaults to 10000.</td>
          </tr>
          <tr>
            <td>healthchecks.active.https_verify_certificate</td>
            <td>optional</td>
            <td>body</td>
            <td>Whether to check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to true.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.http_statuses</td>
            <td>optional</td>
            <td>body</td>
            <td>An array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. Defaults to [429, 404, 500, 501, 502, 503, 504, 505]. With form-encoded, the notation is http_statuses[]=429&http_statuses[]=404. With JSON, use an Array.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.tcp_failures</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of TCP failures in active probes to consider a target unhealthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.timeouts</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of timeouts in active probes to consider a target unhealthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.http_failures</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of HTTP failures in active probes (as defined by healthchecks.active.unhealthy.http_statuses) to consider a target unhealthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.interval</td>
            <td>optional</td>
            <td>body</td>
            <td>Interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.http_path</td>
            <td>optional</td>
            <td>body</td>
            <td>Path to use in GET HTTP request to run as a probe on active health checks. Defaults to "/".</td>
          </tr>
          <tr>
            <td>healthchecks.active.timeout</td>
            <td>optional</td>
            <td>body</td>
            <td>Socket timeout for active health checks (in seconds). Defaults to 1.</td>
          </tr>
          <tr>
            <td>healthchecks.active.healthy.http_statuses</td>
            <td>optional</td>
            <td>body</td>
            <td>An array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. Defaults to [200, 302]. With form-encoded, the notation is http_statuses[]=200&http_statuses[]=302. With JSON, use an Array.</td>
          </tr>
          <tr>
            <td>healthchecks.active.healthy.interval</td>
            <td>optional</td>
            <td>body</td>
            <td>Interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.healthy.successes</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of successes in active probes (as defined by healthchecks.active.healthy.http_statuses) to consider a target healthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.https_sni</td>
            <td>optional</td>
            <td>body</td>
            <td>The hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target host’s certificate can be verified with the proper SNI.</td>
          </tr>
          <tr>
            <td>healthchecks.active.concurrency</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of targets to check concurrently in active health checks. Defaults to 10.</td>
          </tr>
          <tr>
            <td>healthchecks.active.type</td>
            <td>optional</td>
            <td>body</td>
            <td>Whether to perform active health checks using HTTP or HTTPS, or just attempt a TCP connection. Accepted values are: "tcp", "http", "https", "grpc", "grpcs". Defaults to "http".</td>
          </tr>
          <tr>
            <td>healthchecks.passive.unhealthy.http_failures</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of HTTP failures in proxied traffic (as defined by healthchecks.passive.unhealthy.http_statuses) to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.unhealthy.http_statuses</td>
            <td>optional</td>
            <td>body</td>
            <td>An array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. Defaults to [429, 500, 503]. With form-encoded, the notation is http_statuses[]=429&http_statuses[]=500. With JSON, use an Array.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.unhealthy.tcp_failures</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of TCP failures in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.unhealthy.timeouts</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.type</td>
            <td>optional</td>
            <td>body</td>
            <td>Whether to perform passive health checks interpreting HTTP/HTTPS statuses, or just check for TCP connection success. In passive checks, http and https options are equivalent. Accepted values are: "tcp", "http", "https", "grpc", "grpcs". Defaults to "http".</td>
          </tr>
          <tr>
            <td>healthchecks.passive.healthy.successes</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of successes in proxied traffic (as defined by healthchecks.passive.healthy.http_statuses) to consider a target healthy, as observed by passive health checks. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.healthy.http_statuses</td>
            <td>optional</td>
            <td>body</td>
            <td>An array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks. Defaults to [200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]. With form-encoded, the notation is http_statuses[]=200&http_statuses[]=201. With JSON, use an Array.</td>
          </tr>
          <tr>
            <td>healthchecks.threshold</td>
            <td>optional</td>
            <td>body</td>
            <td>The minimum percentage of the upstream’s targets’ weight that must be available for the whole upstream to be considered healthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>tags</td>
            <td>optional</td>
            <td>body</td>
            <td>An optional set of strings associated with the Upstream, for grouping and filtering.</td>
          </tr>
          <tr>
            <td>host_header</td>
            <td>optional</td>
            <td>body</td>
            <td>The hostname to be used as Host header when proxying requests through Kong.</td>
          </tr>
        </table>
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                hash_on: none
                algorithm: round-robin
                name: my-upstream
                tags:
                  - user-level
                  - low-priority
                hash_fallback_header: null
                hash_fallback: none
                hash_on_cookie: null
                host_header: example.com
                hash_on_cookie_path: /
                healthchecks:
                  threshold: 0
                  active:
                    unhealthy:
                      http_statuses:
                        - 429
                        - 404
                        - 500
                        - 501
                        - 502
                        - 503
                        - 504
                        - 505
                      tcp_failures: 0
                      timeouts: 0
                      http_failures: 0
                      interval: 0
                    type: http
                    http_path: /
                    timeout: 1
                    healthy:
                      successes: 0
                      interval: 0
                      http_statuses:
                        - 200
                        - 302
                    https_sni: example.com
                    https_verify_certificate: true
                    concurrency: 10
                  passive:
                    unhealthy:
                      http_failures: 0
                      http_statuses:
                        - 429
                        - 500
                        - 503
                      tcp_failures: 0
                      timeouts: 0
                    healthy:
                      http_statuses:
                        - 200
                        - 201
                        - 202
                        - 203
                        - 204
                        - 205
                        - 206
                        - 207
                        - 208
                        - 226
                        - 300
                        - 301
                        - 302
                        - 303
                        - 304
                        - 305
                        - 306
                        - 307
                        - 308
                      successes: 0
                    type: http
                hash_on_header: null
                slots: 10000
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Upstream Object > Update Or Create Upstream
      summary: Create Or Update Upstream Associated to a Specific Target
      description: >-
        # Create Or Update Upstream Associated to a Specific Target
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-or-update-upstream-associated-to-a-specific-target)


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>target host:port or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the host:port of the Target associated to the Upstream to be created or updated.</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>name</td>
            <td>required</td>
            <td>body</td>
            <td>This is a hostname, which must be equal to the host of a Service.</td>
          </tr>
          <tr>
            <td>algorithm</td>
            <td>optional</td>
            <td>body</td>
            <td>Which load balancing algorithm to use. Accepted values are: "consistent-hashing", "least-connections", "round-robin". Defaults to "round-robin".</td>
          </tr>
          <tr>
            <td>hash_on</td>
            <td>optional</td>
            <td>body</td>
            <td>What to use as hashing input. Using none results in a weighted-round-robin scheme with no hashing. Accepted values are: "none", "consumer", "ip", "header", "cookie". Defaults to "none".</td>
          </tr>
          <tr>
            <td>hash_fallback</td>
            <td>optional</td>
            <td>body</td>
            <td>What to use as hashing input if the primary hash_on does not return a hash (eg. header is missing, or no consumer identified). Not available if hash_on is set to cookie. Accepted values are: "none", "consumer", "ip", "header", "cookie". Defaults to "none".</td>
          </tr>
          <tr>
            <td>hash_on_header</td>
            <td>semi-optional</td>
            <td>body</td>
            <td>The header name to take the value from as hash input. Only required when hash_on is set to header.</td>
          </tr>
          <tr>
            <td>hash_fallback_header</td>
            <td>semi-optional</td>
            <td>body</td>
            <td>The header name to take the value from as hash input. Only required when hash_fallback is set to header.</td>
          </tr>
          <tr>
            <td>hash_on_cookie</td>
            <td>semi-optional</td>
            <td>body</td>
            <td>The cookie name to take the value from as hash input. Only required when hash_on or hash_fallback is set to cookie. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.</td>
          </tr>
          <tr>
            <td>hash_on_cookie_path</td>
            <td>semi-optional</td>
            <td>body</td>
            <td>The cookie path to set in the response headers. Only required when hash_on or hash_fallback is set to cookie. Defaults to "/".</td>
          </tr>
          <tr>
            <td>slots</td>
            <td>optional</td>
            <td>body</td>
            <td>The number of slots in the loadbalancer algorithm (10-65536). Defaults to 10000.</td>
          </tr>
          <tr>
            <td>healthchecks.active.https_verify_certificate</td>
            <td>optional</td>
            <td>body</td>
            <td>Whether to check the validity of the SSL certificate of the remote host when performing active health checks using HTTPS. Defaults to true.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.http_statuses</td>
            <td>optional</td>
            <td>body</td>
            <td>An array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. Defaults to [429, 404, 500, 501, 502, 503, 504, 505]. With form-encoded, the notation is http_statuses[]=429&http_statuses[]=404. With JSON, use an Array.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.tcp_failures</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of TCP failures in active probes to consider a target unhealthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.timeouts</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of timeouts in active probes to consider a target unhealthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.http_failures</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of HTTP failures in active probes (as defined by healthchecks.active.unhealthy.http_statuses) to consider a target unhealthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.unhealthy.interval</td>
            <td>optional</td>
            <td>body</td>
            <td>Interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.http_path</td>
            <td>optional</td>
            <td>body</td>
            <td>Path to use in GET HTTP request to run as a probe on active health checks. Defaults to "/".</td>
          </tr>
          <tr>
            <td>healthchecks.active.timeout</td>
            <td>optional</td>
            <td>body</td>
            <td>Socket timeout for active health checks (in seconds). Defaults to 1.</td>
          </tr>
          <tr>
            <td>healthchecks.active.healthy.http_statuses</td>
            <td>optional</td>
            <td>body</td>
            <td>An array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. Defaults to [200, 302]. With form-encoded, the notation is http_statuses[]=200&http_statuses[]=302. With JSON, use an Array.</td>
          </tr>
          <tr>
            <td>healthchecks.active.healthy.interval</td>
            <td>optional</td>
            <td>body</td>
            <td>Interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.healthy.successes</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of successes in active probes (as defined by healthchecks.active.healthy.http_statuses) to consider a target healthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.active.https_sni</td>
            <td>optional</td>
            <td>body</td>
            <td>The hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target host’s certificate can be verified with the proper SNI.</td>
          </tr>
          <tr>
            <td>healthchecks.active.concurrency</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of targets to check concurrently in active health checks. Defaults to 10.</td>
          </tr>
          <tr>
            <td>healthchecks.active.type</td>
            <td>optional</td>
            <td>body</td>
            <td>Whether to perform active health checks using HTTP or HTTPS, or just attempt a TCP connection. Accepted values are: "tcp", "http", "https", "grpc", "grpcs". Defaults to "http".</td>
          </tr>
          <tr>
            <td>healthchecks.passive.unhealthy.http_failures</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of HTTP failures in proxied traffic (as defined by healthchecks.passive.unhealthy.http_statuses) to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.unhealthy.http_statuses</td>
            <td>optional</td>
            <td>body</td>
            <td>An array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. Defaults to [429, 500, 503]. With form-encoded, the notation is http_statuses[]=429&http_statuses[]=500. With JSON, use an Array.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.unhealthy.tcp_failures</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of TCP failures in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.unhealthy.timeouts</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.type</td>
            <td>optional</td>
            <td>body</td>
            <td>Whether to perform passive health checks interpreting HTTP/HTTPS statuses, or just check for TCP connection success. In passive checks, http and https options are equivalent. Accepted values are: "tcp", "http", "https", "grpc", "grpcs". Defaults to "http".</td>
          </tr>
          <tr>
            <td>healthchecks.passive.healthy.successes</td>
            <td>optional</td>
            <td>body</td>
            <td>Number of successes in proxied traffic (as defined by healthchecks.passive.healthy.http_statuses) to consider a target healthy, as observed by passive health checks. Defaults to 0.</td>
          </tr>
          <tr>
            <td>healthchecks.passive.healthy.http_statuses</td>
            <td>optional</td>
            <td>body</td>
            <td>An array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks. Defaults to [200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]. With form-encoded, the notation is http_statuses[]=200&http_statuses[]=201. With JSON, use an Array.</td>
          </tr>
          <tr>
            <td>healthchecks.threshold</td>
            <td>optional</td>
            <td>body</td>
            <td>The minimum percentage of the upstream’s targets’ weight that must be available for the whole upstream to be considered healthy. Defaults to 0.</td>
          </tr>
          <tr>
            <td>tags</td>
            <td>optional</td>
            <td>body</td>
            <td>An optional set of strings associated with the Upstream, for grouping and filtering.</td>
          </tr>
          <tr>
            <td>host_header</td>
            <td>optional</td>
            <td>body</td>
            <td>The hostname to be used as Host header when proxying requests through Kong.</td>
          </tr>
        </table>
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                hash_on: none
                algorithm: round-robin
                name: my-upstream
                tags:
                  - user-level
                  - low-priority
                hash_fallback_header: null
                hash_fallback: none
                hash_on_cookie: null
                host_header: example.com
                hash_on_cookie_path: /
                healthchecks:
                  threshold: 0
                  active:
                    unhealthy:
                      http_statuses:
                        - 429
                        - 404
                        - 500
                        - 501
                        - 502
                        - 503
                        - 504
                        - 505
                      tcp_failures: 0
                      timeouts: 0
                      http_failures: 0
                      interval: 0
                    type: http
                    http_path: /
                    timeout: 1
                    healthy:
                      successes: 0
                      interval: 0
                      http_statuses:
                        - 200
                        - 302
                    https_sni: example.com
                    https_verify_certificate: true
                    concurrency: 10
                  passive:
                    unhealthy:
                      http_failures: 0
                      http_statuses:
                        - 429
                        - 500
                        - 503
                      tcp_failures: 0
                      timeouts: 0
                    healthy:
                      http_statuses:
                        - 200
                        - 201
                        - 202
                        - 203
                        - 204
                        - 205
                        - 206
                        - 207
                        - 208
                        - 226
                        - 300
                        - 301
                        - 302
                        - 303
                        - 304
                        - 305
                        - 306
                        - 307
                        - 308
                      successes: 0
                    type: http
                hash_on_header: null
                slots: 10000
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Upstream Object > Delete Upstream
      summary: Delete Upstream Associated to a Specific Target
      description: >-
        # Delete Upstream Associated to a Specific Target
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-upstream-associated-to-a-specific-target)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>target host:port or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the host:port of the Target associated to the Upstream to be delete.</td>
          </tr>
        </table>
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /upstreams/{nameOrId}/health:
    get:
      tags:
        - Upstream Object > Show Upstream Health for Node
      summary: List All Upstreams
      description: "# List All Upstreams [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-all-upstreams)\n* Displays the health status for all Targets of a given Upstream, or for the whole Upstream, according to the perspective of a specific Kong node. Note that, being node-specific information, making this same request to different nodes of the Kong cluster may produce different results. For example, one specific node of the Kong cluster may be experiencing network issues, causing it to fail to connect to some Targets: these Targets will be marked as unhealthy by that node (directing traffic from this node to other Targets that it can successfully reach), but healthy to all others Kong nodes (which have no problems using that Target).\n\n* The data field of the response contains an array of Target objects. The health for each Target is returned in its health field:\n\n\t* If a Target fails to be activated in the balancer due to DNS issues, its status displays as DNS_ERROR.\n\t* When health checks are not enabled in the Upstream configuration, the health status for active Targets is displayed as HEALTHCHECKS_OFF.\n\t* When health checks are enabled and the Target is determined to be healthy, either automatically or manually, its status is displayed as HEALTHY. This means that this Target is currently included in this Upstream’s load balancer execution.\n\n* When a Target has been disabled by either active or passive health checks (circuit breakers) or manually, its status is displayed as UNHEALTHY. The load balancer is not directing any traffic to this Target via this Upstream.\nWhen the request query parameter balancer_health is set to 1, the data field of the response refers to the whole Upstream, and its health attribute is defined by the state of all of Upstream’s Targets, according to the field [health checker’s threshold][healthchecks.threshold].\n\n<table style=\"width:50%\">\n  <tr>\n    <th>Attributes</th>\n    <th>Mandatory</th>\n    <th>Type</th>\n    <th>Description</th> \n  </tr>\n  <tr>\n    <td>name or id</td>\n    <td>required</td>\n    <td>path</td>\n    <td>The unique identifier or the name of the Upstream for which to display Target health.</td>\n  </tr>\n  <tr>\n    <td>balancer_health</td>\n    <td>optional</td>\n    <td>query</td>\n    <td>If set to 1, Kong will return the health status of the whole Upstream.</td>\n  </tr>\n</table>"
      parameters:
        - name: balancer_health
          in: query
          schema:
            type: integer
          description: >-
            If set to 1, Kong will return the health status of the whole
            Upstream.
          example: '1'
        - name: nameOrId
          in: path
          schema:
            type: string
          required: true
          description: >-
            The unique identifier or the name of the Upstream for which to
            display Target health.
          example: my-upstream
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 20:21:55 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '945'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '1'
          content:
            text/plain:
              schema:
                type: string
              examples:
                example-0:
                  summary: List All Upstreams-200
                  value: "{\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"ea29aaa3-3b2d-488c-b90c-56df8e0dd8c6\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"name\": \"my-upstream\",\n\t\t\t\"algorithm\": \"round-robin\",\n\t\t\t\"hash_on\": \"none\",\n\t\t\t\"hash_fallback\": \"none\",\n\t\t\t\"hash_on_cookie_path\": \"/\",\n\t\t\t\"slots\": 10000,\n\t\t\t\"healthchecks\": {\n\t\t\t\t\"active\": {\n\t\t\t\t\t\"https_verify_certificate\": true,\n\t\t\t\t\t\"unhealthy\": {\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t429,\n\t\t\t\t\t\t\t404,\n\t\t\t\t\t\t\t500,\n\t\t\t\t\t\t\t501,\n\t\t\t\t\t\t\t502,\n\t\t\t\t\t\t\t503,\n\t\t\t\t\t\t\t504,\n\t\t\t\t\t\t\t505\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"tcp_failures\": 0,\n\t\t\t\t\t\t\"timeouts\": 0,\n\t\t\t\t\t\t\"http_failures\": 0,\n\t\t\t\t\t\t\"interval\": 0\n\t\t\t\t\t},\n\t\t\t\t\t\"http_path\": \"/\",\n\t\t\t\t\t\"timeout\": 1,\n\t\t\t\t\t\"healthy\": {\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t200,\n\t\t\t\t\t\t\t302\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"interval\": 0,\n\t\t\t\t\t\t\"successes\": 0\n\t\t\t\t\t},\n\t\t\t\t\t\"https_sni\": \"example.com\",\n\t\t\t\t\t\"concurrency\": 10,\n\t\t\t\t\t\"type\": \"http\"\n\t\t\t\t},\n\t\t\t\t\"passive\": {\n\t\t\t\t\t\"unhealthy\": {\n\t\t\t\t\t\t\"http_failures\": 0,\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t429,\n\t\t\t\t\t\t\t500,\n\t\t\t\t\t\t\t503\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"tcp_failures\": 0,\n\t\t\t\t\t\t\"timeouts\": 0\n\t\t\t\t\t},\n\t\t\t\t\t\"type\": \"http\",\n\t\t\t\t\t\"healthy\": {\n\t\t\t\t\t\t\"successes\": 0,\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t200,\n\t\t\t\t\t\t\t201,\n\t\t\t\t\t\t\t202,\n\t\t\t\t\t\t\t203,\n\t\t\t\t\t\t\t204,\n\t\t\t\t\t\t\t205,\n\t\t\t\t\t\t\t206,\n\t\t\t\t\t\t\t207,\n\t\t\t\t\t\t\t208,\n\t\t\t\t\t\t\t226,\n\t\t\t\t\t\t\t300,\n\t\t\t\t\t\t\t301,\n\t\t\t\t\t\t\t302,\n\t\t\t\t\t\t\t303,\n\t\t\t\t\t\t\t304,\n\t\t\t\t\t\t\t305,\n\t\t\t\t\t\t\t306,\n\t\t\t\t\t\t\t307,\n\t\t\t\t\t\t\t308\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"threshold\": 0\n\t\t\t},\n\t\t\t\"tags\": [\n\t\t\t\t\"user-level\",\n\t\t\t\t\"low-priority\"\n\t\t\t],\n\t\t\t\"host_header\": \"example.com\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"4fe14415-73d5-4f00-9fbc-c72a0fccfcb2\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"name\": \"my-upstream\",\n\t\t\t\"algorithm\": \"round-robin\",\n\t\t\t\"hash_on\": \"none\",\n\t\t\t\"hash_fallback\": \"none\",\n\t\t\t\"hash_on_cookie_path\": \"/\",\n\t\t\t\"slots\": 10000,\n\t\t\t\"healthchecks\": {\n\t\t\t\t\"active\": {\n\t\t\t\t\t\"https_verify_certificate\": true,\n\t\t\t\t\t\"unhealthy\": {\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t429,\n\t\t\t\t\t\t\t404,\n\t\t\t\t\t\t\t500,\n\t\t\t\t\t\t\t501,\n\t\t\t\t\t\t\t502,\n\t\t\t\t\t\t\t503,\n\t\t\t\t\t\t\t504,\n\t\t\t\t\t\t\t505\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"tcp_failures\": 0,\n\t\t\t\t\t\t\"timeouts\": 0,\n\t\t\t\t\t\t\"http_failures\": 0,\n\t\t\t\t\t\t\"interval\": 0\n\t\t\t\t\t},\n\t\t\t\t\t\"http_path\": \"/\",\n\t\t\t\t\t\"timeout\": 1,\n\t\t\t\t\t\"healthy\": {\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t200,\n\t\t\t\t\t\t\t302\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"interval\": 0,\n\t\t\t\t\t\t\"successes\": 0\n\t\t\t\t\t},\n\t\t\t\t\t\"https_sni\": \"example.com\",\n\t\t\t\t\t\"concurrency\": 10,\n\t\t\t\t\t\"type\": \"http\"\n\t\t\t\t},\n\t\t\t\t\"passive\": {\n\t\t\t\t\t\"unhealthy\": {\n\t\t\t\t\t\t\"http_failures\": 0,\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t429,\n\t\t\t\t\t\t\t500,\n\t\t\t\t\t\t\t503\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"tcp_failures\": 0,\n\t\t\t\t\t\t\"timeouts\": 0\n\t\t\t\t\t},\n\t\t\t\t\t\"type\": \"http\",\n\t\t\t\t\t\"healthy\": {\n\t\t\t\t\t\t\"successes\": 0,\n\t\t\t\t\t\t\"http_statuses\": [\n\t\t\t\t\t\t\t200,\n\t\t\t\t\t\t\t201,\n\t\t\t\t\t\t\t202,\n\t\t\t\t\t\t\t203,\n\t\t\t\t\t\t\t204,\n\t\t\t\t\t\t\t205,\n\t\t\t\t\t\t\t206,\n\t\t\t\t\t\t\t207,\n\t\t\t\t\t\t\t208,\n\t\t\t\t\t\t\t226,\n\t\t\t\t\t\t\t300,\n\t\t\t\t\t\t\t301,\n\t\t\t\t\t\t\t302,\n\t\t\t\t\t\t\t303,\n\t\t\t\t\t\t\t304,\n\t\t\t\t\t\t\t305,\n\t\t\t\t\t\t\t306,\n\t\t\t\t\t\t\t307,\n\t\t\t\t\t\t\t308\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"threshold\": 0\n\t\t\t},\n\t\t\t\"tags\": [\n\t\t\t\t\"admin\",\n\t\t\t\t\"high-priority\",\n\t\t\t\t\"critical\"\n\t\t\t],\n\t\t\t\"host_header\": \"example.com\"\n\t\t}\n\t],\n\t\"next\": \"http://localhost:8001/upstreams?offset=6378122c-a0a1-438d-a5c6-efabae9fb969\"\n}"
                example-1:
                  summary: List All Upstreams
                  value: |-
                    {
                     "total": 2,
                     "node_id": "cbb297c0-14a9-46bc-ad91-1d0ef9b42df9",
                     "data": [
                      {
                       "created_at": 1485524883980,
                       "id": "18c0ad90-f942-4098-88db-bbee3e43b27f",
                       "health": "HEALTHY",
                       "target": "127.0.0.1:20000",
                       "upstream_id": "07131005-ba30-4204-a29f-0927d53257b4",
                       "weight": 100,
                       "name": "aliqua veniam",
                       "algorithm": "non officia aliquip",
                       "hash_on": "laborum dolore ea pariatur",
                       "hash_fallback": "mollit anim sit",
                       "hash_on_cookie_path": "deserunt cillum",
                       "slots": -93720927,
                       "healthchecks": {
                        "threshold": 0,
                        "active": {
                         "unhealthy": {
                          "http_statuses": [
                           429,
                           404,
                           500,
                           501,
                           502,
                           503,
                           504,
                           505
                          ],
                          "tcp_failures": 0,
                          "timeouts": 0,
                          "http_failures": 0,
                          "interval": 0
                         },
                         "type": "http",
                         "http_path": "/",
                         "timeout": 1,
                         "healthy": {
                          "successes": 0,
                          "interval": 0,
                          "http_statuses": [
                           200,
                           302
                          ]
                         },
                         "https_sni": "example.com",
                         "https_verify_certificate": true,
                         "concurrency": 10
                        },
                        "passive": {
                         "unhealthy": {
                          "http_failures": 0,
                          "http_statuses": [
                           429,
                           500,
                           503
                          ],
                          "tcp_failures": 0,
                          "timeouts": 0
                         },
                         "healthy": {
                          "http_statuses": [
                           200,
                           201,
                           202,
                           203,
                           204,
                           205,
                           206,
                           207,
                           208,
                           226,
                           300,
                           301,
                           302,
                           303,
                           304,
                           305,
                           306,
                           307,
                           308
                          ],
                          "successes": 0
                         },
                         "type": "http"
                        }
                       },
                       "tags": [
                        "culpa ei",
                        "enim"
                       ],
                       "host_header": "labore proident elit irure incididunt"
                      },
                      {
                       "created_at": 1485524914883,
                       "id": "6c6f34eb-e6c3-4c1f-ac58-4060e5bca890",
                       "health": "UNHEALTHY",
                       "target": "127.0.0.1:20002",
                       "upstream_id": "07131005-ba30-4204-a29f-0927d53257b4",
                       "weight": 200,
                       "name": "",
                       "algorithm": "labore aliqua pariatur",
                       "hash_on": "esse ea in id",
                       "hash_fallback": "aliquip",
                       "hash_on_cookie_path": "incididunt eu eiusmod mollit",
                       "slots": -60979601,
                       "healthchecks": {
                        "threshold": 0,
                        "active": {
                         "unhealthy": {
                          "http_statuses": [
                           429,
                           404,
                           500,
                           501,
                           502,
                           503,
                           504,
                           505
                          ],
                          "tcp_failures": 0,
                          "timeouts": 0,
                          "http_failures": 0,
                          "interval": 0
                         },
                         "type": "http",
                         "http_path": "/",
                         "timeout": 1,
                         "healthy": {
                          "successes": 0,
                          "interval": 0,
                          "http_statuses": [
                           200,
                           302
                          ]
                         },
                         "https_sni": "example.com",
                         "https_verify_certificate": true,
                         "concurrency": 10
                        },
                        "passive": {
                         "unhealthy": {
                          "http_failures": 0,
                          "http_statuses": [
                           429,
                           500,
                           503
                          ],
                          "tcp_failures": 0,
                          "timeouts": 0
                         },
                         "healthy": {
                          "http_statuses": [
                           200,
                           201,
                           202,
                           203,
                           204,
                           205,
                           206,
                           207,
                           208,
                           226,
                           300,
                           301,
                           302,
                           303,
                           304,
                           305,
                           306,
                           307,
                           308
                          ],
                          "successes": 0
                         },
                         "type": "http"
                        }
                       },
                       "tags": [
                        "consectetur qui eiusmod"
                       ],
                       "host_header": "reprehenderit ad quis"
                      }
                     ],
                     "next": "aliquip ipsum"
                    }
                example-2:
                  summary: List All Upstreams
                  value: |-
                    {
                     "data": [
                      {
                       "id": "incididunt",
                       "created_at": 3675253,
                       "name": "aliqua veniam",
                       "algorithm": "non officia aliquip",
                       "hash_on": "laborum dolore ea pariatur",
                       "hash_fallback": "mollit anim sit",
                       "hash_on_cookie_path": "deserunt cillum",
                       "slots": -93720927,
                       "healthchecks": {
                        "threshold": 0,
                        "active": {
                         "unhealthy": {
                          "http_statuses": [
                           429,
                           404,
                           500,
                           501,
                           502,
                           503,
                           504,
                           505
                          ],
                          "tcp_failures": 0,
                          "timeouts": 0,
                          "http_failures": 0,
                          "interval": 0
                         },
                         "type": "http",
                         "http_path": "/",
                         "timeout": 1,
                         "healthy": {
                          "successes": 0,
                          "interval": 0,
                          "http_statuses": [
                           200,
                           302
                          ]
                         },
                         "https_sni": "example.com",
                         "https_verify_certificate": true,
                         "concurrency": 10
                        },
                        "passive": {
                         "unhealthy": {
                          "http_failures": 0,
                          "http_statuses": [
                           429,
                           500,
                           503
                          ],
                          "tcp_failures": 0,
                          "timeouts": 0
                         },
                         "healthy": {
                          "http_statuses": [
                           200,
                           201,
                           202,
                           203,
                           204,
                           205,
                           206,
                           207,
                           208,
                           226,
                           300,
                           301,
                           302,
                           303,
                           304,
                           305,
                           306,
                           307,
                           308
                          ],
                          "successes": 0
                         },
                         "type": "http"
                        }
                       },
                       "tags": [
                        "culpa ei",
                        "enim"
                       ],
                       "host_header": "labore proident elit irure incididunt"
                      },
                      {
                       "id": "in minim ipsum dolore",
                       "created_at": 66976784,
                       "name": "",
                       "algorithm": "labore aliqua pariatur",
                       "hash_on": "esse ea in id",
                       "hash_fallback": "aliquip",
                       "hash_on_cookie_path": "incididunt eu eiusmod mollit",
                       "slots": -60979601,
                       "healthchecks": {
                        "threshold": 0,
                        "active": {
                         "unhealthy": {
                          "http_statuses": [
                           429,
                           404,
                           500,
                           501,
                           502,
                           503,
                           504,
                           505
                          ],
                          "tcp_failures": 0,
                          "timeouts": 0,
                          "http_failures": 0,
                          "interval": 0
                         },
                         "type": "http",
                         "http_path": "/",
                         "timeout": 1,
                         "healthy": {
                          "successes": 0,
                          "interval": 0,
                          "http_statuses": [
                           200,
                           302
                          ]
                         },
                         "https_sni": "example.com",
                         "https_verify_certificate": true,
                         "concurrency": 10
                        },
                        "passive": {
                         "unhealthy": {
                          "http_failures": 0,
                          "http_statuses": [
                           429,
                           500,
                           503
                          ],
                          "tcp_failures": 0,
                          "timeouts": 0
                         },
                         "healthy": {
                          "http_statuses": [
                           200,
                           201,
                           202,
                           203,
                           204,
                           205,
                           206,
                           207,
                           208,
                           226,
                           300,
                           301,
                           302,
                           303,
                           304,
                           305,
                           306,
                           307,
                           308
                          ],
                          "successes": 0
                         },
                         "type": "http"
                        }
                       },
                       "tags": [
                        "consectetur qui eiusmod"
                       ],
                       "host_header": "reprehenderit ad quis"
                      },
                      {
                       "id": "fugiat elit non ut",
                       "created_at": -99389103,
                       "name": "Ut adipisicing nisi laborum",
                       "algorithm": "ea",
                       "hash_on": "et sint",
                       "hash_fallback": "commo",
                       "hash_on_cookie_path": "deserunt consectetur c",
                       "slots": 71186640,
                       "healthchecks": {
                        "threshold": 0,
                        "active": {
                         "unhealthy": {
                          "http_statuses": [
                           429,
                           404,
                           500,
                           501,
                           502,
                           503,
                           504,
                           505
                          ],
                          "tcp_failures": 0,
                          "timeouts": 0,
                          "http_failures": 0,
                          "interval": 0
                         },
                         "type": "http",
                         "http_path": "/",
                         "timeout": 1,
                         "healthy": {
                          "successes": 0,
                          "interval": 0,
                          "http_statuses": [
                           200,
                           302
                          ]
                         },
                         "https_sni": "example.com",
                         "https_verify_certificate": true,
                         "concurrency": 10
                        },
                        "passive": {
                         "unhealthy": {
                          "http_failures": 0,
                          "http_statuses": [
                           429,
                           500,
                           503
                          ],
                          "tcp_failures": 0,
                          "timeouts": 0
                         },
                         "healthy": {
                          "http_statuses": [
                           200,
                           201,
                           202,
                           203,
                           204,
                           205,
                           206,
                           207,
                           208,
                           226,
                           300,
                           301,
                           302,
                           303,
                           304,
                           305,
                           306,
                           307,
                           308
                          ],
                          "successes": 0
                         },
                         "type": "http"
                        }
                       },
                       "tags": [
                        "ut ex officia consequat"
                       ],
                       "host_header": "ex elit dolore enim"
                      },
                      {
                       "id": "in Excepteur",
                       "created_at": -58732565,
                       "name": "ipsum",
                       "algorithm": "anim exercitation voluptate",
                       "hash_on": "Lorem velit",
                       "hash_fallback": "pariatur do",
                       "hash_on_cookie_path": "est consequat nisi",
                       "slots": 93978358,
                       "healthchecks": {
                        "threshold": 0,
                        "active": {
                         "unhealthy": {
                          "http_statuses": [
                           429,
                           404,
                           500,
                           501,
                           502,
                           503,
                           504,
                           505
                          ],
                          "tcp_failures": 0,
                          "timeouts": 0,
                          "http_failures": 0,
                          "interval": 0
                         },
                         "type": "http",
                         "http_path": "/",
                         "timeout": 1,
                         "healthy": {
                          "successes": 0,
                          "interval": 0,
                          "http_statuses": [
                           200,
                           302
                          ]
                         },
                         "https_sni": "example.com",
                         "https_verify_certificate": true,
                         "concurrency": 10
                        },
                        "passive": {
                         "unhealthy": {
                          "http_failures": 0,
                          "http_statuses": [
                           429,
                           500,
                           503
                          ],
                          "tcp_failures": 0,
                          "timeouts": 0
                         },
                         "healthy": {
                          "http_statuses": [
                           200,
                           201,
                           202,
                           203,
                           204,
                           205,
                           206,
                           207,
                           208,
                           226,
                           300,
                           301,
                           302,
                           303,
                           304,
                           305,
                           306,
                           307,
                           308
                          ],
                          "successes": 0
                         },
                         "type": "http"
                        }
                       },
                       "tags": [
                        "do des",
                        "labore id ut",
                        "magna"
                       ],
                       "host_header": "ut magna Excepteur"
                      }
                     ],
                     "next": "aliquip ipsum",
                     "node_id": "cbb297c0-14a9-46bc-ad91-1d0ef9b42df9"
                    }
  /upstreams/{upstreamHost:portOriI}/targets:
    post:
      tags:
        - Target Object > Add Target
      summary: Create Target Associated to a Specific Upstream
      description: >-
        # Create Target Associated to a Specific Upstream
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#create-target-associated-to-a-specific-upstream)

        * A target is an ip address/hostname with a port that identifies an
        instance of a backend service. Every upstream can have many targets, and
        the targets can be dynamically added. Changes are effectuated on the
        fly.


        * Because the upstream maintains a history of target changes, the
        targets cannot be deleted or modified. To disable a target, post a new
        one with weight=0; alternatively, use the DELETE convenience method to
        accomplish the same.


        * The current target object definition is the one with the latest
        created_at.


        * Targets can be both tagged and filtered by tags.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>upstream host:port or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the host:port attribute of the Upstream that should be associated to the newly-created Target.</td>
          </tr>
        </table>


        # Request Body

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>target</td>
            <td>required</td>
            <td>body</td>
            <td>The target address (ip or hostname) and port. If the hostname resolves to an SRV record, the port value will be overridden by the value from the DNS record.</td>
          </tr>
          <tr>
            <td>weight</td>
            <td>optional</td>
            <td>body</td>
            <td>The weight this target gets within the upstream loadbalancer (0-1000). If the hostname resolves to an SRV record, the weight value will be overridden by the value from the DNS record. Defaults to 100.</td>
          </tr>
          <tr>
            <td>tags</td>
            <td>optional</td>
            <td>body</td>
            <td>An optional set of strings associated with the Target, for grouping and filtering.</td>
          </tr>
        </table>
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                upstream:
                  id: 885a0392-ef1b-4de3-aacf-af3f1697ce2c
                target: example.com:8000
                weight: 100
                tags:
                  - user-level
                  - low-priority
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 21:57:10 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '23'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '0'
          content:
            text/plain:
              schema:
                type: string
              example: "{\n\t\"id\": \"a3395f66-2af6-4c79-bea2-1b6933764f80\",\n\t\"created_at\": 1422386534,\n\t\"upstream\": {\n\t\t\"id\": \"885a0392-ef1b-4de3-aacf-af3f1697ce2c\"\n\t},\n\t\"target\": \"example.com:8000\",\n\t\"weight\": 100,\n\t\"tags\": [\n\t\t\"user-level\",\n\t\t\"low-priority\"\n\t]\n}"
  /upstreams/{upstreamHost:portOrId}/targets:
    get:
      tags:
        - Target Object > List Targets
      summary: List Targets Associated to a Specific Upstream
      description: >-
        # List Targets Associated to a Specific Upstream
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-targets-associated-to-a-specific-upstream)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>upstream host:port or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the host:port attribute of the Upstream whose Targets are to be retrieved. When using this endpoint, only Targets associated to the specified Upstream will be listed.</td>
          </tr>
        </table>
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Thu, 12 Mar 2020 22:04:50 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Connection:
              schema:
                type: string
                example: keep-alive
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Server:
              schema:
                type: string
                example: kong/2.0.1
            Content-Length:
              schema:
                type: integer
                example: '23'
            X-Kong-Admin-Latency:
              schema:
                type: integer
                example: '0'
          content:
            text/plain:
              schema:
                type: string
              example: "{\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"f5a9c0ca-bdbb-490f-8928-2ca95836239a\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"upstream\": {\n\t\t\t\t\"id\": \"173a6cee-90d1-40a7-89cf-0329eca780a6\"\n\t\t\t},\n\t\t\t\"target\": \"example.com:8000\",\n\t\t\t\"weight\": 100,\n\t\t\t\"tags\": [\n\t\t\t\t\"user-level\",\n\t\t\t\t\"low-priority\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"bdab0e47-4e37-4f0b-8fd0-87d95cc4addc\",\n\t\t\t\"created_at\": 1422386534,\n\t\t\t\"upstream\": {\n\t\t\t\t\"id\": \"f00c6da4-3679-4b44-b9fb-36a19bd3ae83\"\n\t\t\t},\n\t\t\t\"target\": \"example.com:8000\",\n\t\t\t\"weight\": 100,\n\t\t\t\"tags\": [\n\t\t\t\t\"admin\",\n\t\t\t\t\"high-priority\",\n\t\t\t\t\"critical\"\n\t\t\t]\n\t\t}\n\t],\n\t\"next\": \"http://localhost:8001/targets?offset=6378122c-a0a1-438d-a5c6-efabae9fb969\"\n}"
  /upstreams/{upstreamNameOrId}/targets/{host:portOrId}:
    delete:
      tags:
        - Target Object
      summary: Delete Target
      description: >-
        # Delete Upstream
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-upstream-1)

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>upstream name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the upstream for which to delete the target.</td>
          </tr>
          <tr>
            <td>host:port or id</td>
            <td>required</td>
            <td>path</td>
            <td>The host:port combination element of the target to remove, or the id of an existing target entry.</td>
          </tr>
        </table>
      parameters:
        - name: upstreamNameOrId
          in: path
          schema:
            type: string
          required: true
          description: >-
            The unique identifier or the name of the upstream for which to
            delete the target.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /upstreams/{upstreamNameOrId}/targets/{targetOrID}/{address}/healthy:
    post:
      tags:
        - Target Object
      summary: Set Target Address As Healthy
      description: >-
        # Set Target Address As Healthy
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#set-target-address-as-healthy)

        * Set the current health status of an individual address resolved by a
        target in the load balancer to “healthy” in the entire Kong cluster.


        * This endpoint can be used to manually re-enable an address resolved by
        a target that was previously disabled by the upstream’s health checker.
        Upstreams only forward requests to healthy nodes, so this call tells
        Kong to start using this address again.


        * This resets the health counters of the health checkers running in all
        workers of the Kong node, and broadcasts a cluster-wide message so that
        the “healthy” status is propagated to the whole Kong cluster.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>upstream name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the upstream.</td>
          </tr>
          <tr>
            <td>target or id</td>
            <td>required</td>
            <td>path</td>
            <td>The host/port combination element of the target to set as healthy, or the id of an existing target entry.</td>
          </tr>
          <tr>
            <td>address</td>
            <td>required</td>
            <td>path</td>
            <td>The host/port combination element of the address to set as healthy.</td>
          </tr>
        </table>
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: ''
      parameters:
        - name: upstreamNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the upstream.
        - name: targetOrID
          in: path
          schema:
            type: string
          required: true
          description: >-
            The host/port combination element of the target to set as healthy,
            or the id of an existing target entry.
        - name: address
          in: path
          schema:
            type: string
          required: true
          description: The host/port combination element of the address to set as healthy.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /upstreams/{upstreamNameOrId}/targets/{targetOrID}/{address}/unhealthy:
    post:
      tags:
        - Target Object
      summary: Set Target Address As Unhealthy
      description: >-
        # Set Target Address As Unhealthy
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#set-target-address-as-unhealthy)

        * Set the current health status of an individual address resolved by a
        target in the load balancer to “unhealthy” in the entire Kong cluster.


        * This endpoint can be used to manually disable an address and have it
        stop responding to requests. Upstreams only forward requests to healthy
        nodes, so this call tells Kong to start skipping this address.


        * This call resets the health counters of the health checkers running in
        all workers of the Kong node, and broadcasts a cluster-wide message so
        that the “unhealthy” status is propagated to the whole Kong cluster.


        * Active health checks continue to execute for unhealthy addresses. Note
        that if active health checks are enabled and the probe detects that the
        address is actually healthy, it will automatically re-enable it again.
        To permanently remove a target from the balancer, you should delete a
        target instead.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>upstream name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the upstream.</td>
          </tr>
          <tr>
            <td>target or id</td>
            <td>required</td>
            <td>path</td>
            <td>The host/port combination element of the target to set as unhealthy, or the id of an existing target entry.</td>
          </tr>
          <tr>
            <td>address</td>
            <td>required</td>
            <td>path</td>
            <td>The host/port combination element of the address to set as unhealthy.</td>
          </tr>
        </table>
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: ''
      parameters:
        - name: upstreamNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the upstream.
        - name: targetOrID
          in: path
          schema:
            type: string
          required: true
          description: >-
            The host/port combination element of the target to set as unhealthy,
            or the id of an existing target entry.
        - name: address
          in: path
          schema:
            type: string
          required: true
          description: >-
            The host/port combination element of the address to set as
            unhealthy.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /upstreams/{upstreamNameOrId}/targets/{targetOrID}/healthy:
    post:
      tags:
        - Target Object
      summary: Set Target As Healthy
      description: >-
        # Set Target As Healthy
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#set-target-as-healthy)

        * Set the current health status of a target in the load balancer to
        “healthy” in the entire Kong cluster. This sets the “healthy” status to
        all addresses resolved by this target.


        * This endpoint can be used to manually re-enable a target that was
        previously disabled by the upstream’s health checker. Upstreams only
        forward requests to healthy nodes, so this call tells Kong to start
        using this target again.


        * This resets the health counters of the health checkers running in all
        workers of the Kong node, and broadcasts a cluster-wide message so that
        the “healthy” status is propagated to the whole Kong cluster.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>upstream name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the upstream.</td>
          </tr>
          <tr>
            <td>target or id</td>
            <td>required</td>
            <td>path</td>
            <td>The host/port combination element of the target to set as healthy, or the id of an existing target entry.</td>
          </tr>
        </table>
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: ''
      parameters:
        - name: upstreamNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the upstream.
        - name: targetOrID
          in: path
          schema:
            type: string
          required: true
          description: >-
            The host/port combination element of the target to set as healthy,
            or the id of an existing target entry.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /upstreams/{upstreamNameOrId}/targets/{targetOrID}/unhealthy:
    post:
      tags:
        - Target Object
      summary: Set Target As Unhealthy
      description: >-
        # Set Target As Unhealthy
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#set-target-as-unhealthy)

        * Set the current health status of a target in the load balancer to
        “unhealthy” in the entire Kong cluster. This sets the “unhealthy” status
        to all addresses resolved by this target.


        * This endpoint can be used to manually disable a target and have it
        stop responding to requests. Upstreams only forward requests to healthy
        nodes, so this call tells Kong to start skipping this target.


        * This call resets the health counters of the health checkers running in
        all workers of the Kong node, and broadcasts a cluster-wide message so
        that the “unhealthy” status is propagated to the whole Kong cluster.


        * Active health checks continue to execute for unhealthy targets. Note
        that if active health checks are enabled and the probe detects that the
        target is actually healthy, it will automatically re-enable it again. To
        permanently remove a target from the balancer, you should delete a
        target instead.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>upstream name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the upstream.</td>
          </tr>
          <tr>
            <td>target or id</td>
            <td>required</td>
            <td>path</td>
            <td>The host/port combination element of the target to set as unhealthy, or the id of an existing target entry.</td>
          </tr>
        </table>
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: ''
      parameters:
        - name: upstreamNameOrId
          in: path
          schema:
            type: string
          required: true
          description: The unique identifier or the name of the upstream.
        - name: targetOrID
          in: path
          schema:
            type: string
          required: true
          description: >-
            The host/port combination element of the target to set as unhealthy,
            or the id of an existing target entry.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /upstreams/{nameOrId}/targets/all/:
    get:
      tags:
        - Target Object
      summary: List All Targets
      description: >-
        # List All Targets
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#list-all-targets)

        * Lists all targets of the upstream. Multiple target objects for the
        same target may be returned, showing the history of changes for a
        specific target. The target object with the latest created_at is the
        current definition.


        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>name or id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier or the name of the upstream for which to list the targets.</td>
          </tr>
        </table>
      parameters:
        - name: nameOrId
          in: path
          schema:
            type: string
          required: true
          description: >-
            The unique identifier or the name of the upstream for which to list
            the targets.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /ca_/certificates/{ca_certificateId}:
    delete:
      tags:
        - default
      summary: Delete CA Certificate
      description: >-
        # Delete CA Certificate
        [konghq](https://docs.konghq.com/2.0.x/admin-api/#delete-ca-certificate-1)


        # Path parameters

        <table style="width:50%">
          <tr>
            <th>Attributes</th>
            <th>Mandatory</th>
            <th>Type</th>
            <th>Description</th> 
          </tr>
          <tr>
            <td>certificate id</td>
            <td>required</td>
            <td>path</td>
            <td>The unique identifier of the CA Certificate to delete.</td>
          </tr>
        </table>
      parameters:
        - name: ca_certificateId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The unique identifier of the CA Certificate to delete.
          example: aliquip quis et
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                 "message": "SNI not found"
                }
